{
	"__index__": {
		"a": {
			"__index__": {
				"5": {
					"__index__": {
						"_": {
							"__index__": {
								"a": {
									"__index__": {
										"a": {
											"a5_aasecurity_addusertogroup": {
												"description": "Add a user to a group in the  Alpha Anywhere security tables.",
												"arguments": [
													{
														"name": "username"
													},
													{
														"name": "groups"
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5_aasecurity_creategroup": {
												"description": "Creates a new Group in the Alpha Anywhere security tables.",
												"arguments": [
													{
														"name": "groupname"
													}
												]
											},
											"a5_aasecurity_createuser": {
												"description": "Creates a new user in the Alpha Anywhere security tables.",
												"arguments": [
													{
														"name": "username"
													},
													{
														"name": "password"
													},
													{
														"name": "groups",
														"optional": true
													}
												]
											},
											"a5_aasecurity_createusersbulk": {
												"description": "Creates a multiple new users.",
												"arguments": [
													{
														"name": "json"
													}
												]
											},
											"a5_aasecurity_deleteuser": {
												"description": "Delete a user from the Alpha Anywhere security tables.",
												"arguments": [
													{
														"name": "username"
													}
												]
											},
											"a5_aasecurity_getallgroups": {
												"description": "Creates a list of all Groups in the Alpha Anywhere security tables. If username and groupname are blank, then lists all groups. If username is not blank, lists groups for the specified user. If groupname is not blank, then lists members of specified group.",
												"arguments": [
													{
														"name": "username",
														"optional": true
													},
													{
														"name": "groupname",
														"optional": true
													}
												]
											},
											"a5_aasecurity_getallusers": {
												"description": "Creates a list of all users in the Alpha Anywhere security tables. Returns an object with userJSON - json array with info about each user"
											},
											"a5_aasecurity_validateuser": {
												"description": "Validates a user's credentials in the Alpha Anywhere security tables. If user is valid, returns the groups that the user is a member of",
												"arguments": [
													{
														"name": "username"
													},
													{
														"name": "password"
													}
												]
											}
										},
										"b": {
											"a5_about_activation": {
												"description": "Displays help on Activation"
											}
										},
										"c": {
											"a5_accuweather_forecast": {
												"description": "Gets a weather forecast (as a JSON string) for a city from AccuWeather",
												"arguments": [
													{
														"name": "apikey"
													},
													{
														"name": "city"
													}
												]
											},
											"a5_action_scripting_book": {
												"description": "Opens the Introduction to Action Scripting book"
											},
											"a5_active_link_refreshdefinition": {
												"description": "Refresh the definition of an active-link table.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "flagsilent",
														"optional": true
													}
												]
											},
											"a5_activelink_convert": {
												"description": "Convert an active-link table to a native or passive-link table",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "type"
													},
													{
														"name": "flagshowsuccessmessage",
														"optional": true
													},
													{
														"name": "promptforconfirmation",
														"optional": true
													}
												]
											},
											"a5_activelink_createdefaulttable": {
												"description": "Create a default active-link table for a remote table. If you are calling this in a loop you can pass in an open connection.",
												"arguments": [
													{
														"name": "connectionstring"
													},
													{
														"name": "tablename"
													},
													{
														"name": "tableowner"
													},
													{
														"name": "localtablefilename"
													},
													{
														"name": "flagaddtodatabase",
														"optional": true
													},
													{
														"name": "openconnection",
														"optional": true
													},
													{
														"name": "otheroptions",
														"optional": true
													}
												]
											},
											"a5_activex_classname_get": {
												"description": "Displays names of installed ActiveX controls and allows user to select by name or by description."
											},
											"a5_actual_layout_name": {
												"description": "Returns the actual name of a layout if layoutname is a temporary name.",
												"arguments": [
													{
														"name": "layoutname"
													}
												]
											}
										},
										"d": {
											"a5_add_fields_to_table": {
												"description": "Adds fields to a table.  New_fields is a crlf list of fields to be added in format: fieldname,type,size,decimals",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "new_field_list"
													}
												]
											},
											"a5_add_new_group": {
												"description": "Allows the administrator to add a new Group to the user/groups file.",
												"arguments": [
													{
														"name": "master_password"
													},
													{
														"name": "group_name"
													}
												]
											},
											"a5_add_new_user": {
												"description": "Allows the administrator to add a new user account. Member_of is a semi_colon (;) delimited list of groups that the user is a member of.",
												"arguments": [
													{
														"name": "master_password"
													},
													{
														"name": "user_name"
													},
													{
														"name": "user_password"
													},
													{
														"name": "member_of",
														"optional": true
													},
													{
														"name": "startup_script",
														"optional": true
													}
												]
											},
											"a5_add_scr_to_favorites": {
												"description": "Adds a script to the Favorites menu in the current form or browse layout",
												"arguments": [
													{
														"name": "script_name"
													},
													{
														"name": "script_description",
														"optional": true
													},
													{
														"name": "imagename",
														"optional": true
													}
												]
											},
											"a5_add_tables_sets": {
												"description": "Displays the dialog box to add tables and sets to the Database."
											},
											"a5_add_timestamp": {
												"description": "Adds a date and time stamp to a script or function when it is saved",
												"arguments": [
													{
														"name": "input_script_text"
													}
												]
											},
											"a5_add_word_to_list": {
												"description": "used in the web components to add new entries to a list for a dropdownbox",
												"arguments": [
													{
														"name": "list"
													},
													{
														"name": "word"
													},
													{
														"name": "flagmultiselect",
														"optional": true
													},
													{
														"name": "selectiondelimiter",
														"optional": true
													},
													{
														"name": "valuedatatype",
														"optional": true
													}
												]
											},
											"a5_addin_manager": {
												"description": "Displays the Addin Manager dialog box"
											},
											"a5_addin_version_number": {
												"description": "Sets the addin version number. Each addin database must have a 'startup' script that calls this function ",
												"arguments": [
													{
														"name": "addin_name"
													},
													{
														"name": "number"
													}
												]
											},
											"a5_addtrailingbackslash": {
												"description": "Adds a trailing backslash to a string if it does not already have one",
												"arguments": [
													{
														"name": "string"
													}
												]
											},
											"a5_ado_connectionstrings": {
												"description": "Displays a dialog box to create saved ADO Connection String definitions",
												"arguments": [
													{
														"name": "library",
														"optional": true
													},
													{
														"name": "conn_mode",
														"optional": true
													},
													{
														"name": "syntax",
														"optional": true
													}
												]
											}
										},
										"l": {
											"a5_alphadao_export": {
												"description": "Exports data from local .dbf tables to remote SQL databases using AlphaDAO. Use the AlphaDAO Export Operation builder to define the job to be executed by this command.",
												"arguments": [
													{
														"name": "connectionstring"
													},
													{
														"name": "jobdefn"
													},
													{
														"name": "options"
													},
													{
														"name": "flagsilent",
														"optional": true
													},
													{
														"name": "argumentspassedin",
														"optional": true
													}
												]
											},
											"a5_alphadao_import": {
												"description": "Runs an Import job that was defined by the AlphaDAO Import builder. Returns two properties 'HasError' (.t./.f.) and 'ErrorText'. The 'jobDefn' input array has status on each object in the following properties: .countRecordsImported, .hasError, .errorText, .userCancelled",
												"arguments": [
													{
														"name": "cs"
													},
													{
														"name": "jobdefn"
													},
													{
														"name": "options"
													},
													{
														"name": "flagsilent",
														"optional": true
													},
													{
														"name": "argumentspassedin",
														"optional": true
													}
												]
											},
											"a5_alphadao_search": {
												"description": "Displays a Search form to search for records in a SQL Query. Returns a dbf table that contains all records matching the search (up to a max of 100 records) and the record numbers in the found set that the user selected.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "a_fields"
													},
													{
														"name": "sqlbasequery"
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "singleselect",
														"optional": true
													},
													{
														"name": "passedinoptions",
														"optional": true
													}
												]
											},
											"a5_alphadaoexportgenie": {
												"description": "Opens the AlphaDAO Export Genie builder",
												"arguments": [
													{
														"name": "operationname",
														"optional": true
													},
													{
														"name": "mdi",
														"optional": true
													}
												]
											},
											"a5_alphadaoimportgenie": {
												"description": "Opens the AlphaDAO Import Genie builder",
												"arguments": [
													{
														"name": "operationname",
														"optional": true
													},
													{
														"name": "mdi",
														"optional": true
													}
												]
											}
										},
										"n": {
											"a5_analayzeexcelfile": {
												"description": "get structure of an excel file",
												"arguments": [
													{
														"name": "fn"
													},
													{
														"name": "samplesize",
														"optional": true
													}
												]
											},
											"a5_anchor_tbar_is_open": {
												"description": "Returns .t. if the Anchor toolbar is open"
											},
											"a5_anchor_tbar_toggle": {
												"description": "Toggles the Anchor toolbar on/off"
											},
											"a5_anchor_toolbar_close": {
												"description": " closes Anchor toolbar"
											},
											"a5_ansidate": {
												"description": "Converts a date string to an ANSI C asctime() formatted date (Day Mon d hh:mm:ss yyyy)",
												"arguments": [
													{
														"name": "date"
													}
												]
											}
										},
										"p": {
											"a5_append_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_append_op_result": {
												"description": "Displays the Append Records result dialog box",
												"arguments": [
													{
														"name": "a_records_processed"
													},
													{
														"name": "a_records_total"
													},
													{
														"name": "a_records_violated"
													},
													{
														"name": "table_set_name"
													},
													{
														"name": "append_dlg_title",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											},
											"a5_append_quick": {
												"description": "Appends transaction table to master table. Tables must have same field names, unless a fieldmap is supplied. Append_type is \"all\", \"unique\", or \"replace\". Fieldmap is a crlf delimited string. Format is mastertable_fieldname|transactiontable_fieldname. TranscationKey is only needed if fieldnames in master and transaction are not the same.",
												"arguments": [
													{
														"name": "master_table"
													},
													{
														"name": "transaction_table"
													},
													{
														"name": "append_type",
														"optional": true
													},
													{
														"name": "key",
														"optional": true
													},
													{
														"name": "transaction_filter",
														"optional": true
													},
													{
														"name": "show_xbasic",
														"optional": true
													},
													{
														"name": "fieldmap",
														"optional": true
													},
													{
														"name": "transactionkey",
														"optional": true
													},
													{
														"name": "appendunmappedfields",
														"optional": true
													}
												]
											},
											"a5_append_toolbar": {
												"description": "Returns the system toolbar for Append Operation View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_applydatamasking": {
												"description": "Apply data masking genie dialog rules",
												"arguments": [
													{
														"name": "dm"
													},
													{
														"name": "json"
													}
												]
											}
										},
										"r": {
											"a5_arggetvalue": {
												"description": " Get the value of an argument, prompting if necessary.  Set mode to \"web\" if calling from WAS.",
												"arguments": [
													{
														"name": "parg"
													},
													{
														"name": "vars"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "tmplz",
														"optional": true
													},
													{
														"name": "flagarginquery",
														"optional": true
													}
												]
											},
											"a5_arggetvalues": {
												"description": " Get values for all the arguments.  Set mode to \"web\" if calling from WAS.",
												"arguments": [
													{
														"name": "arrargs"
													},
													{
														"name": "sql"
													},
													{
														"name": "pvars"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "ppage",
														"optional": true
													}
												]
											},
											"a5_arggetvalues_ajax": {
												"description": " Get values for all the arguments.  Set mode to \"web\" if calling from WAS.",
												"arguments": [
													{
														"name": "arrargs"
													},
													{
														"name": "sql"
													},
													{
														"name": "pvars"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "ppage",
														"optional": true
													},
													{
														"name": "tmplz",
														"optional": true
													}
												]
											},
											"a5_arguments_dbflist": {
												"description": "Used to define a dynamic list of choices from a DBF data source when defining arguments. If MaxValues = 0 then all values are returned.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "filter"
													},
													{
														"name": "displayvalue"
													},
													{
														"name": "returnvalue",
														"optional": true
													},
													{
														"name": "maxvalues",
														"optional": true
													}
												]
											},
											"a5_arguments_sqllist": {
												"description": "Used to define a dynamic list of choices from a SQL data source when defining arguments. If MaxValues = 0 then all values are returned. 'Tablename' can optionally be a SQL SELECT statement.",
												"arguments": [
													{
														"name": "connectionname"
													},
													{
														"name": "tablename"
													},
													{
														"name": "filter"
													},
													{
														"name": "displayvalue_or_expn"
													},
													{
														"name": "returnvalue_or_expn",
														"optional": true
													},
													{
														"name": "maxvalues",
														"optional": true
													}
												]
											},
											"a5_argumentsdialog": {
												"description": " Display the arguments definition dialog",
												"arguments": [
													{
														"name": "arrargsin"
													},
													{
														"name": "pvars"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "ppagein",
														"optional": true
													},
													{
														"name": "version",
														"optional": true
													},
													{
														"name": "mastermode",
														"optional": true
													}
												]
											},
											"a5_argumentsreplace": {
												"description": " Replace Arguments in a filter expression or SQL with their actual values.",
												"arguments": [
													{
														"name": "expr"
													},
													{
														"name": "arrargs"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "queryobj",
														"optional": true
													}
												]
											},
											"a5_arrange_tbar_is_open": {
												"description": "Returns .t. if the Arrange toolbar is open"
											},
											"a5_arrange_tbar_toggle": {
												"description": "Toggles the Arrange toolbar on/off"
											},
											"a5_arrange_toolbar_close": {
												"description": " closes Arrange toolbar"
											},
											"a5_array_from_string": {
												"description": "Creates a character array from a cr-lf delimeted string. Returns the size of the array.",
												"arguments": [
													{
														"name": "array_name"
													},
													{
														"name": "string"
													},
													{
														"name": "vars"
													}
												]
											}
										},
										"s": {
											"a5_ascii_table": {
												"description": "Display ascii character table"
											},
											"a5_assign_menu_images": {
												"description": "Create a string to be used to assign images to menu items that are not defined with an image."
											},
											"a5_assign_user_to_groups": {
												"description": "Allows the administrator to add or drop a user from one or more groups. Group_names is a semi_colon (;) delimited list of groups.",
												"arguments": [
													{
														"name": "master_password"
													},
													{
														"name": "user_name"
													},
													{
														"name": "group_names"
													},
													{
														"name": "action",
														"optional": true
													}
												]
											}
										},
										"u": {
											"a5_audit_trail": {
												"description": "Call this function from a table's CanSaveRecord event. UserNameMode = 1 - user the user name in the A5 Security System is inserted into the audit-trail. UserNameMode = 2 - Windows logon user name.",
												"arguments": [
													{
														"name": "usernamemode",
														"optional": true
													}
												]
											},
											"a5_audit_trail_deleterecord": {
												"description": "Call this function from a table's CanDeleteRecord event. UserNameMode = 1 - user the user name in the A5 Security System is inserted into the audit-trail. UserNameMode = 2 - Windows logon user name.",
												"arguments": [
													{
														"name": "usernamemode",
														"optional": true
													}
												]
											},
											"a5_autocomplete_list": {
												"description": "Called whenenever 3rd party .aex files are loaded. Adds the functions to the auto-complete list."
											},
											"a5_automatic_mnu_convert": {
												"description": "Prompt if V4 tbr should be converted to V5"
											},
											"a5_automatic_tbr_convert": {
												"description": "Prompt if V4 tbr should be converted to V5"
											}
										}
									}
								},
								"b": {
									"__index__": {
										"_": {
											"a5_b_celllock_image_menu": {
												"description": "Right click menu for a browse when user clicks on a locked cell (modal data entry)  -- for case when cell IS an image"
											},
											"a5_b_celllock_reg_menu": {
												"description": "Right click menu for a browse when user clicks on a locked cell (modal data entry)  -- for case when cell is NOT an image"
											}
										},
										"a": {
											"a5_backup_db_dialog": {
												"description": "Displays the Backup Database dialog box"
											},
											"a5_backup_filename": {
												"description": "Generates a filename to use for a Backup if user selects the 'keep previous backup' option.",
												"arguments": [
													{
														"name": "folder"
													},
													{
														"name": "db_name"
													},
													{
														"name": "comment",
														"optional": true
													}
												]
											},
											"a5_basequery_to_filter": {
												"description": "Converts a base filter to a query. End users cannot remove a form's base query, but they can remove a filter",
												"arguments": [
													{
														"name": "formpointer",
														"optional": true
													}
												]
											},
											"a5_batch_append": {
												"description": "Displays the Append records dialog from inside a form or browse layout."
											},
											"a5_batch_copy": {
												"description": "Displays the Copy or Move records dialog from inside a form or browse layout."
											},
											"a5_batch_delete_mark": {},
											"a5_batch_export": {
												"description": "Displays the Export records dialog from inside a form or browse layout."
											},
											"a5_batch_move": {
												"description": "Displays the Move records dialog from inside a form or browse layout."
											},
											"a5_batch_update": {},
											"a5_batchactivelinkcreate": {
												"description": "Creates default active-link tables for a crlf delimited list of tables.",
												"arguments": [
													{
														"name": "tablelist_with_type"
													},
													{
														"name": "connectionstring"
													},
													{
														"name": "folder"
													},
													{
														"name": "prefix"
													},
													{
														"name": "flagaddtablestodb",
														"optional": true
													},
													{
														"name": "flagoverwritewithoutprompting",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5_batchactivelinkdefine": {
												"description": "Brings up a dialog to create multiple Active-Link tables at once.",
												"arguments": [
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5_batchpassivelinkcreate": {
												"description": "Creates multiple passive-link tables. If flagImport is .t. then tables are imported, but are not passive-link tables.",
												"arguments": [
													{
														"name": "cs"
													},
													{
														"name": "tablelist"
													},
													{
														"name": "folder"
													},
													{
														"name": "prefix"
													},
													{
														"name": "overwritewithoutprompting"
													},
													{
														"name": "flagimport",
														"optional": true
													},
													{
														"name": "addtablestodatabase",
														"optional": true
													}
												]
											},
											"a5_batchpassivelinkdefine": {
												"description": "Brings up a dialog to create multiple Passive-Link tables at once.",
												"arguments": [
													{
														"name": "mode",
														"optional": true
													}
												]
											}
										},
										"l": {
											"a5_blank_toolbar": {
												"description": "Returns the system toolbar for Form View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"o": {
											"a5_border_tbar_is_open": {
												"description": "Returns .t. if the Border toolbar is open"
											},
											"a5_border_toolbar_close": {
												"description": " closes border toolbar"
											}
										},
										"r": {
											"a5_browse_cell_edit": {
												"description": "Browse right click menu when you right click on a cell and you are in Change or Enter mode. "
											},
											"a5_browse_cell_lock_menu": {
												"description": "Right click menu for a browse when user clicks on a locked cell (modal data entry, or an Image field)"
											},
											"a5_browse_cell_view": {
												"description": "Browse right click menu when you right click on a cell that is not locked and you are in View mode (not Change or Enter)a5_browse_cell_view"
											},
											"a5_browse_column_menu": {
												"description": "Right click menu for a browse when user clicks on a column selector"
											},
											"a5_browse_row_menu": {
												"description": "Right click menu for a browse when user clicks on a row selector"
											},
											"a5_browse_toolbar": {
												"description": "Returns the system toolbar for Form View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_browsedefaultdefinitionxml": {
												"description": "Generates default browse definition as XML"
											},
											"a5_browseeditor_toolbar": {
												"description": "Returns the system toolbar for Form Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_browseonxdialog_generatexbasic": {
												"description": "Displays an Xdialog showing an embedded default browse for a table. ",
												"arguments": [
													{
														"name": "ops"
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5_browsers": {
												"description": "Creates an array of information about all the browsers that are installed on this system."
											}
										},
										"u": {
											"a5_built_in_actions": {
												"description": "Used in the menu editor to present the user with a list of built in actions.",
												"arguments": [
													{
														"name": "menu_name"
													}
												]
											},
											"a5_button_appearance": {
												"description": "Prompts for the description and bitmap when a new button is created.",
												"arguments": [
													{
														"name": "formname"
													}
												]
											}
										}
									}
								},
								"c": {
									"__index__": {
										"a": {
											"a5_canlivepreview": {
												"description": "Determine if Live Preview is possible because the App Server is running either in this instance of Alpha or another instance on this machine"
											}
										},
										"h": {
											"a5_change_user_password": {
												"description": "Allows a user to change his logon password",
												"arguments": [
													{
														"name": "user_name"
													},
													{
														"name": "old_password"
													},
													{
														"name": "new_password"
													}
												]
											},
											"a5_changealias_insql": {
												"description": "Takes a SQL statement and changes a table alias from one value to another",
												"arguments": [
													{
														"name": "sqltxt"
													},
													{
														"name": "oldalias"
													},
													{
														"name": "newalias"
													},
													{
														"name": "flagisvalueexpression",
														"optional": true
													}
												]
											},
											"a5_changefieldsize": {
												"description": "Changes the fields sizes (width and decimal places) of fields in a table. Takes a crlf delimited list of fields. Format for original_sizes and new_sizes is 'fieldname,type,width,decimal_places'",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "original_sizes"
													},
													{
														"name": "new_sizes"
													}
												]
											},
											"a5_changelogonpassword": {
												"description": "Allow a user to change their log-in password."
											},
											"a5_changeorderoflist": {
												"description": "Allows a user to re-order a crlf delimited list of values.",
												"arguments": [
													{
														"name": "list"
													}
												]
											},
											"a5_check_tbls_sets_exist": {
												"description": "Checks to see if a CRLF delimited list of tables, or tables in a set, physically exist.",
												"arguments": [
													{
														"name": "input_name"
													},
													{
														"name": "flag_silent",
														"optional": true
													}
												]
											},
											"a5_check_throttle_file": {
												"description": "Used by developers in Runtime applications"
											},
											"a5_checkindexesdialog": {
												"description": "Displays the Check Indexes dialog box.",
												"arguments": [
													{
														"name": "defaulttable",
														"optional": true
													}
												]
											},
											"a5_chk_templates_installed": {
												"description": "Checks to see if A5 templates are installed. If not allows user to download"
											}
										},
										"l": {
											"a5_classic_style_menu": {
												"description": "Displays menus using classic Win3D background color style"
											},
											"a5_clear_menus": {
												"description": "For internal use only. Clears out all menus and loads fresh copies based on updated function defitions."
											},
											"a5_clear_toolbars": {
												"description": "For internal use only. Clears out all toolbars and loads fresh copies based on updated function defitions."
											},
											"a5_clearcache": {
												"description": "Clear files in A5's temporary cache"
											},
											"a5_clip_library": {
												"description": "Displays the script editor's code library",
												"arguments": [
													{
														"name": "hidden",
														"optional": true
													},
													{
														"name": "codeptr",
														"optional": true
													},
													{
														"name": "define_panel",
														"optional": true
													}
												]
											},
											"a5_clip_library_dialog": {
												"description": "Displays the script editor's code library",
												"arguments": [
													{
														"name": "ptr"
													}
												]
											},
											"a5_close_all_windows": {
												"description": "Closes all open windows, except the control panel",
												"arguments": [
													{
														"name": "forceclose",
														"optional": true
													},
													{
														"name": "flagexcludewebcontrolpanel",
														"optional": true
													}
												]
											},
											"a5_close_system_toolbars": {
												"description": "Called by the Deactivate event for Froms, Browse, etc. to close all of open toolbars for the layout.",
												"arguments": [
													{
														"name": "toolbar_names"
													}
												]
											},
											"a5_closecliplib": {
												"description": "Close the code library"
											}
										},
										"o": {
											"__index__": {
												"d": {
													"a5_code_format": {
														"description": " Indent code appropriately",
														"arguments": [
															{
																"name": "input_code"
															},
															{
																"name": "line_delimiter",
																"optional": true
															}
														]
													},
													"a5_code_library": {
														"description": "Displays the Code Library",
														"arguments": [
															{
																"name": "object"
															}
														]
													}
												},
												"l": {
													"a5_column_props_dialog": {
														"description": "Called by browse layout editor to edit either column properties, or browse properties, depending on what has focus."
													}
												},
												"m": {
													"a5_combine_filters": {
														"description": "Takes two filters, either of which is sub-selected, and combines into a single filter expression",
														"arguments": [
															{
																"name": "filter1"
															},
															{
																"name": "filter2"
															},
															{
																"name": "flatten",
																"optional": true
															},
															{
																"name": "sqlsyntax",
																"optional": true
															}
														]
													},
													"a5_compact_json": {
														"description": "Compacts a JSON string",
														"arguments": [
															{
																"name": "jsondata"
															},
															{
																"name": "flagcompact",
																"optional": true
															},
															{
																"name": "flagusequotes",
																"optional": true
															}
														]
													},
													"a5_compile_scripts": {
														"description": "Displays the Compile Scripts dialog box"
													},
													"a5_complete_import_task": {
														"description": "Called by the ODBC Import Genie when an import is complete and needs to be added to the current database.",
														"arguments": [
															{
																"name": "message",
																"optional": true
															},
															{
																"name": "silent",
																"optional": true
															},
															{
																"name": "genie_folder",
																"optional": true
															}
														]
													},
													"a5_composite_picture_and_ink": {
														"description": "Create a composite of a background picture and ink overlay.",
														"arguments": [
															{
																"name": "picture"
															},
															{
																"name": "ink"
															},
															{
																"name": "basepath",
																"optional": true
															}
														]
													}
												},
												"n": {
													"__index__": {
														"d": {
															"a5_conditionbuilderregister": {
																"description": " Sets up the Condition Builder used on the Other tab in Column Properties",
																"arguments": [
																	{
																		"name": "cb"
																	},
																	{
																		"name": "obj"
																	}
																]
															}
														},
														"f": {
															"a5_configure_update_chk": {
																"description": "Displays the dialog box to configure automatic update checking"
															}
														},
														"n": {
															"a5_connectionpropstostring": {
																"description": "Takes a set of  A5DataObjects connection properties and returns a connection string",
																"arguments": [
																	{
																		"name": "string"
																	}
																]
															},
															"a5_connectionstring": {
																"description": "Displays a dialog box to create or edit an ADO connection string",
																"arguments": [
																	{
																		"name": "string",
																		"optional": true
																	}
																]
															},
															"a5_connstrings_list": {
																"description": "List named connection strings. Mode is AlphaDAO or ADO. If dictionary is blank, lists connection strings in current database library.",
																"arguments": [
																	{
																		"name": "mode",
																		"optional": true
																	},
																	{
																		"name": "dictionary",
																		"optional": true
																	}
																]
															}
														},
														"t": {
															"a5_context_pagedn": {
																"description": "Called when user pressed PgDn in a form."
															},
															"a5_context_pageup": {
																"description": "Called when user pressed PgUp in a form."
															},
															"a5_control_insert_ole": {
																"description": "Used by right click and drop down menu to insert an OLE object into a field.",
																"arguments": [
																	{
																		"name": "obj"
																	}
																]
															},
															"a5_controlpanel_activate": {
																"description": "Activates the control panel."
															},
															"a5_controlpanel_isvisible": {
																"description": "Activates the control panel."
															},
															"a5_controlpanel_toolbar": {
																"description": "Returns the system toolbar for Control Panel",
																"arguments": [
																	{
																		"name": "read_from_memory",
																		"optional": true
																	}
																]
															},
															"a5_controlpanel_toolbar2": {
																"description": "Returns the system toolbar for Control Panel",
																"arguments": [
																	{
																		"name": "read_from_memory",
																		"optional": true
																	}
																]
															},
															"a5_controlreferencecode": {
																"description": "Generate XBasic code for Alpha controls. (type = \"propgrid\", \"propsheet\", \"wfspropsheet\", or \"progresslist\")",
																"arguments": [
																	{
																		"name": "type"
																	}
																]
															}
														},
														"v": {
															"a5_convert_activelink_to_named_connections": {
																"description": "Converts connection strings in active-link table definitions from explicit connections to named connections. If flagUnConvert = .t., then converts named connections to explicit connections.",
																"arguments": [
																	{
																		"name": "flagunconvert",
																		"optional": true
																	},
																	{
																		"name": "flagprompt",
																		"optional": true
																	}
																]
															},
															"a5_convert_date_string": {
																"description": "Converts a date string from one format to another. E.g. from DMY format to YMD format.",
																"arguments": [
																	{
																		"name": "datestring"
																	},
																	{
																		"name": "indateformat"
																	},
																	{
																		"name": "outdateformat"
																	},
																	{
																		"name": "separator",
																		"optional": true
																	}
																]
															},
															"a5_convert_datetime_string": {
																"description": "Converts a datetime string from one format to another. E.g. from DMY format to YMD format.",
																"arguments": [
																	{
																		"name": "datetimestring"
																	},
																	{
																		"name": "indateformat"
																	},
																	{
																		"name": "outdateformat"
																	},
																	{
																		"name": "separator",
																		"optional": true
																	}
																]
															},
															"a5_convert_delete_to_sql_delete": {
																"description": "Convert an Delete Operation to a SQL DELETE statement. Returns .failed (.t. if could not convert) and .sql (the DELETE statement)",
																"arguments": [
																	{
																		"name": "mark"
																	},
																	{
																		"name": "t"
																	},
																	{
																		"name": "flagexecuteupdate",
																		"optional": true
																	}
																]
															},
															"a5_convert_deletedups_to_sql": {
																"description": "Convert an Delete Duplicates Operation to a SQL DELTE statement. Returns .failed (.t. if could not convert) and .sql (the Update statement)",
																"arguments": [
																	{
																		"name": "del_dups"
																	},
																	{
																		"name": "t"
																	},
																	{
																		"name": "flagexecutedelete",
																		"optional": true
																	}
																]
															},
															"a5_convert_to_concise": {
																"description": "Converts a list of object names (e.g. forms, reports)to concise form, showing dictionary name only in case of duplicate object names.",
																"arguments": [
																	{
																		"name": "string"
																	}
																]
															},
															"a5_convert_type": {
																"description": "Same as convert_type(), except that if the Requested",
																"arguments": [
																	{
																		"name": "source"
																	},
																	{
																		"name": "requestedtype"
																	},
																	{
																		"name": "dateformat",
																		"optional": true
																	}
																]
															},
															"a5_convert_update_to_sql_update": {
																"description": "Convert an Update Operation to a SQL UPDATE statement. Returns .failed (.t. if could not convert) and .sql (the Update statement)",
																"arguments": [
																	{
																		"name": "update"
																	},
																	{
																		"name": "t"
																	},
																	{
																		"name": "flagexecuteupdate",
																		"optional": true
																	}
																]
															},
															"a5_convert_v4_menus": {
																"description": "Converts a menu string from a V4 Custom menu to syntax used by V5",
																"arguments": [
																	{
																		"name": "string"
																	}
																]
															},
															"a5_convertimage": {
																"description": "Converts binary image type.",
																"arguments": [
																	{
																		"name": "binput"
																	},
																	{
																		"name": "requiredformat"
																	},
																	{
																		"name": "unusedparameter",
																		"optional": true
																	}
																]
															}
														}
													}
												},
												"p": {
													"a5_copy_layout_to": {
														"description": "Copies a Layout or Operation to a different dictionary. Called from the Control Panel right click menu",
														"arguments": [
															{
																"name": "objecttype",
																"optional": true
															},
															{
																"name": "sourcename",
																"optional": true
															},
															{
																"name": "targetname",
																"optional": true
															},
															{
																"name": "targetdictionary",
																"optional": true
															}
														]
													},
													"a5_copy_op_ok": {
														"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
														"arguments": [
															{
																"name": "code_string"
															}
														]
													},
													"a5_copy_op_result": {
														"description": "Displays the Copy Records result dialog box",
														"arguments": [
															{
																"name": "a_records_processed"
															},
															{
																"name": "copy_db_name"
															}
														]
													},
													"a5_copy_property": {
														"description": "Copies the appearance properties of an object to the clipboard",
														"arguments": [
															{
																"name": "name"
															}
														]
													},
													"a5_copy_table": {
														"description": "Copies a table w/ or w/out data and layouts. Used in Create Table from Template Genie",
														"arguments": [
															{
																"name": "source"
															},
															{
																"name": "destination"
															},
															{
																"name": "include_layouts"
															},
															{
																"name": "include_sample_data"
															},
															{
																"name": "add_to_db",
																"optional": true
															}
														]
													},
													"a5_copy_tablefiles": {
														"description": "Copy a table and all of its support files to another name or folder.",
														"arguments": [
															{
																"name": "table_name"
															},
															{
																"name": "target_folder",
																"optional": true
															},
															{
																"name": "target_name",
																"optional": true
															}
														]
													},
													"a5_copy_toolbar": {
														"description": "Returns the system toolbar for Copy Operation View",
														"arguments": [
															{
																"name": "read_from_memory",
																"optional": true
															}
														]
													},
													"a5_copyselectedprops": {
														"description": "Copies selected object properties to the clipboard.",
														"arguments": [
															{
																"name": "obj"
															}
														]
													}
												}
											}
										},
										"p": {
											"a5_cp2_activeobject": {
												"description": "Returns the name of the active Object"
											},
											"a5_cp2_types": {
												"description": "Returns a list of dictionary types supported by the Control Panel"
											},
											"a5_cp_addins": {
												"description": "Gets addin menu items for the specified context",
												"arguments": [
													{
														"name": "context"
													}
												]
											},
											"a5_cp_object_exists": {
												"description": "Tests whether a Control Panel object name exists. Object can be in an external dictionary.",
												"arguments": [
													{
														"name": "object_name"
													},
													{
														"name": "class"
													}
												]
											},
											"a5_cp_query_run": {
												"description": "Executed when a user runs a query from the Control Panel",
												"arguments": [
													{
														"name": "library_name"
													},
													{
														"name": "object_name"
													},
													{
														"name": "silent_flag"
													}
												]
											}
										},
										"r": {
											"a5_create_new_database": {
												"description": "Creates a new empty Database (.adb file). Prompts user for filename."
											},
											"a5_create_new_toolbar": {
												"description": "Create a new toolbar, starting with the specified template",
												"arguments": [
													{
														"name": "toolbar_type",
														"optional": true
													}
												]
											},
											"a5_create_new_toolbar_v6": {
												"description": "Create a new toolbar, starting with the specified template",
												"arguments": [
													{
														"name": "toolbar_type",
														"optional": true
													}
												]
											},
											"a5_create_pdf_from_template": {
												"description": "For use in web applications. Takes a HTML template, and json data, merges data into template, creates a PDF from the resulting HTML and then downloads file to client. Syntax is 'alphaanywhere' or 'handlebars'",
												"arguments": [
													{
														"name": "e"
													},
													{
														"name": "template"
													},
													{
														"name": "jsondata"
													},
													{
														"name": "syntax",
														"optional": true
													},
													{
														"name": "javascriptfunctions",
														"optional": true
													}
												]
											},
											"a5_create_shortcut": {
												"description": " Bring up the shortcut genie.  restriction_flags are \"N\" (Don't create shortcut), \"U\" (No UI Message Boxes), \"P\" (No paths).  lInstall should be .T. if calling from the install package creator.",
												"arguments": [
													{
														"name": "pvars"
													},
													{
														"name": "restriction_flags",
														"optional": true
													},
													{
														"name": "title",
														"optional": true
													},
													{
														"name": "linstall",
														"optional": true
													}
												]
											},
											"a5_create_table_textmode": {
												"description": "Create a table definition by typing in free form table structure.",
												"arguments": [
													{
														"name": "style",
														"optional": true
													}
												]
											},
											"a5_create_tempfile": {
												"description": "Creates a temporary file with the specified extension. If extension is not specified, then extension of .tmp is used. If folder is not specified, then uses Windows temp folder. File is automatically deleted when A5 is closed.",
												"arguments": [
													{
														"name": "extension",
														"optional": true
													},
													{
														"name": "folder",
														"optional": true
													},
													{
														"name": "flaguseguid",
														"optional": true
													}
												]
											},
											"a5_create_tempfoldername": {
												"description": "Returns the name of a unique temporary folder in the user's Temp folder. When Alpha Five is exited, all files in this folder and the folder itself are removed."
											},
											"a5_create_thumbnail": {
												"description": "Creates a thumbnail image.",
												"arguments": [
													{
														"name": "imagedata"
													},
													{
														"name": "def"
													}
												]
											},
											"a5_createactivelinktabledialog": {
												"description": "Displays the dialog for creating Active Link tables."
											},
											"a5_createeventsstubs": {
												"description": " Creates event stubs for the .code.events property of objects",
												"arguments": [
													{
														"name": "eventname"
													}
												]
											},
											"a5_createlocalselfsignedcertificate": {
												"description": "Create a self-signed certificate using all hostnames and IP addresses for the local host",
												"arguments": [
													{
														"name": "certfile"
													},
													{
														"name": "keyfile"
													},
													{
														"name": "keypassword",
														"optional": true
													},
													{
														"name": "additionalhostnames",
														"optional": true
													}
												]
											},
											"a5_createmapdefn": {
												"description": "Creates a Table Map Definition from a CRLF delimited list of fields.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "fieldlist"
													},
													{
														"name": "updateable",
														"optional": true
													}
												]
											},
											"a5_createpassivelinktabledialog": {
												"description": "Brings up a dialog to allow the user to create passive-link tables."
											},
											"a5_createsql_layout": {
												"description": "Starts the process of creating a new layout based on a SQL data source. Prompts for the name/definition of the DataSource.",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "method",
														"optional": true
													},
													{
														"name": "webprojectfolder",
														"optional": true
													},
													{
														"name": "flagcustomdatasource",
														"optional": true
													},
													{
														"name": "actualtype",
														"optional": true
													}
												]
											},
											"a5_createsqlitedb": {
												"description": "Exports tables to a sqlite database. If tables is blank then all tables are copied to the SQLite database.",
												"arguments": [
													{
														"name": "sqlitefn"
													},
													{
														"name": "cs_source"
													},
													{
														"name": "tables"
													},
													{
														"name": "flagsilent",
														"optional": true
													},
													{
														"name": "datamasking",
														"optional": true
													}
												]
											},
											"a5_createsqltablesfromexcelfile": {
												"description": "Takes an Excel file that contains one or more sheets and exports the data a SQL database. Excel file can have multiple sheets. First row in sheet are field names. Field name can contain a hint that it is a primary key: e.g. OrderId__primary_key__",
												"arguments": [
													{
														"name": "fn"
													},
													{
														"name": "cs"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "tablenameprefix",
														"optional": true
													},
													{
														"name": "mode2",
														"optional": true
													}
												]
											},
											"a5_createtable_sql_import": {
												"description": "Displays a dialog box to import a single table from a SQL Data source"
											}
										},
										"s": {
											"a5_css_combine": {
												"description": "Combines two CSS definition strings.",
												"arguments": [
													{
														"name": "style1"
													},
													{
														"name": "style2"
													}
												]
											},
											"a5_css_def_editor": {
												"description": "CSS style builder. (selectors = class name, css = css code string, image_list = optional list of images for the user to pick from, relative_img_dir = optional location which the style builder should assume it is at, return_cancel = optional return text \"<CANCEL>\" when user cancels)",
												"arguments": [
													{
														"name": "selectors"
													},
													{
														"name": "css"
													},
													{
														"name": "image_list",
														"optional": true
													},
													{
														"name": "relative_img_dir",
														"optional": true
													},
													{
														"name": "return_cancel",
														"optional": true
													},
													{
														"name": "opsin",
														"optional": true
													}
												]
											},
											"a5_css_edit_multi": {
												"description": "Edit multiple css definitions from a css array object.",
												"arguments": [
													{
														"name": "cssobj"
													},
													{
														"name": "editlist"
													},
													{
														"name": "path"
													},
													{
														"name": "selectorlist",
														"optional": true
													},
													{
														"name": "csscureditmode",
														"optional": true
													}
												]
											},
											"a5_css_editor": {
												"description": "Edit css.",
												"arguments": [
													{
														"name": "css"
													},
													{
														"name": "path"
													},
													{
														"name": "name"
													},
													{
														"name": "fromfile",
														"optional": true
													},
													{
														"name": "inwebproject",
														"optional": true
													},
													{
														"name": "flagmdi",
														"optional": true
													}
												]
											},
											"a5_css_editor2": {
												"description": "Edit css.",
												"arguments": [
													{
														"name": "ops"
													}
												]
											},
											"a5_css_embeddedstylesheeteditor": {
												"description": "Brings up the CSS style sheet editor for editing embedded CSS style sheets.",
												"arguments": [
													{
														"name": "txt",
														"optional": true
													}
												]
											},
											"a5_css_extract": {
												"description": "Extract CSS properties.",
												"arguments": [
													{
														"name": "css"
													},
													{
														"name": "properties"
													},
													{
														"name": "normalize",
														"optional": true
													}
												]
											},
											"a5_css_import": {
												"description": "Takes two css objects (parsed with css_to_css_array()), and returns a css object (null object if cancel is selected).",
												"arguments": [
													{
														"name": "csscur"
													},
													{
														"name": "cssimp"
													},
													{
														"name": "csspathcur"
													},
													{
														"name": "csspathimp"
													}
												]
											},
											"a5_css_list": {
												"description": "Lists all the CSS files installed in the CSS folder of the A5 Executable path"
											},
											"a5_css_merge": {
												"description": "Merge css styles (css2 will overwrite duplicate styles in css1)",
												"arguments": [
													{
														"name": "css1"
													},
													{
														"name": "css2"
													}
												]
											},
											"a5_css_validate": {
												"description": "Validate CSS",
												"arguments": [
													{
														"name": "css"
													},
													{
														"name": "flagsilent",
														"optional": true
													},
													{
														"name": "msg",
														"optional": true
													},
													{
														"name": "title",
														"optional": true
													}
												]
											},
											"a5_csweb_generateissyntax": {
												"description": " Generate Native syntax for a selectitem",
												"arguments": [
													{
														"name": "conn_or_cs"
													},
													{
														"name": "si"
													},
													{
														"name": "syntax"
													}
												]
											},
											"a5_csweb_getfields": {
												"description": "Gets the fields in a table or SELECT - using AlphaDAO. pConnIn2 can either be a connection string, or an object with a .connectionstring property, or an pointer to an open connection",
												"arguments": [
													{
														"name": "pconnin2"
													},
													{
														"name": "tablename"
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "otheropsin",
														"optional": true
													}
												]
											},
											"a5_csweb_gettables": {
												"description": " Retrieve a list of tables from a Client-Server source.  pConn requires pConn.ConnectionString to be a valid Connection String",
												"arguments": [
													{
														"name": "pconn"
													}
												]
											},
											"a5_csweb_syntaxnamefromado": {
												"description": " Convert the ADO syntax name (SQL Server) to the CS syntax name (SQLServer)",
												"arguments": [
													{
														"name": "syntax"
													}
												]
											},
											"a5_csweb_to_list": {
												"description": "Returns an CRLF delimited list from an cs record source. ListType is 'OptionList' or 'List'",
												"arguments": [
													{
														"name": "pconn"
													},
													{
														"name": "cs"
													},
													{
														"name": "sql"
													},
													{
														"name": "listtype",
														"optional": true
													},
													{
														"name": "selected",
														"optional": true
													},
													{
														"name": "html_encode",
														"optional": true
													},
													{
														"name": "separator",
														"optional": true
													}
												]
											}
										},
										"u": {
											"a5_curl_fastdownloadmultiplefiles": {
												"description": "Downloads multiple remote files to a specified folder. Downloads files in parallel for maximum speed. Return value contains a list of errors. If return value is blank, no errors.",
												"arguments": [
													{
														"name": "urllist"
													},
													{
														"name": "folder"
													}
												]
											},
											"a5_current_rtf_obj": {
												"description": "Used by RTF editor menus. Internal use only"
											},
											"a5_customizedsystemtoolbarfilename": {
												"description": " Return the filename for the custom system toolbar filename"
											}
										},
										"v": {
											"a5_cvt_to_alias_physical": {
												"description": "Converts a CRLF delimited list of table names into format: alias|physical_filename. For internal use.",
												"arguments": [
													{
														"name": "table_list"
													}
												]
											}
										}
									}
								},
								"d": {
									"__index__": {
										"a": {
											"a5_database_startup": {
												"description": "Displays the Database Selection screen when Alpha is started."
											},
											"a5_databaseerrorsignature": {
												"description": "Used so that code can clean up the error messages return by AlphaDAO when a database server error occurs."
											},
											"a5_databaseexplorer": {
												"description": "Opens the SQL Database Explorer. Modes are: \"SavedSettings\", \"Empty\", \"NamedConnections\", \"Load\". If you use \"Load\" specify \"definition\" (a crlf string of form connectionName|connectionstring)",
												"arguments": [
													{
														"name": "dialog_title"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "definition",
														"optional": true
													},
													{
														"name": "ptext",
														"optional": true
													},
													{
														"name": "target_dialog_title",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5_dataobjectpopulate": {
												"description": "Used to populate the DataObject in a Web Form",
												"arguments": [
													{
														"name": "l2"
													},
													{
														"name": "l1"
													},
													{
														"name": "parent_row_number",
														"optional": true
													}
												]
											}
										},
										"e": {
											"a5_deactivateandclose": {
												"description": "Deactivate the current license and close the program",
												"arguments": [
													{
														"name": "comment",
														"optional": true
													}
												]
											},
											"a5_debug_threads": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5_decrypt_binary": {
												"description": "Decrypts an encrypted binary and returns the original binary.",
												"arguments": [
													{
														"name": "source"
													},
													{
														"name": "key"
													},
													{
														"name": "algorithm",
														"optional": true
													},
													{
														"name": "initializer",
														"optional": true
													}
												]
											},
											"a5_decrypt_string": {
												"description": "Decrypts a base64 encoded encrypted string and returns the original string.",
												"arguments": [
													{
														"name": "source"
													},
													{
														"name": "key"
													},
													{
														"name": "algorithm",
														"optional": true
													},
													{
														"name": "initializer",
														"optional": true
													}
												]
											},
											"a5_default_form": {
												"description": "Creates the default form for a table or set using the default stylesheet and spacing settings.",
												"arguments": [
													{
														"name": "table_set_name"
													}
												]
											},
											"a5_defaultbrowseonxdialog": {
												"description": "Displays an Xdialog showing an embedded default browse for a table.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "hasclosebutton",
														"optional": true
													}
												]
											},
											"a5_define_bitmap": {
												"description": "Prompts for a bitmap definition for a button",
												"arguments": [
													{
														"name": "p"
													}
												]
											},
											"a5_define_global_vars": {
												"description": "Brings up a dialog box to define Global Variables"
											},
											"a5_define_parameters": {
												"description": "Define for a list of Parameters that will be prompted for at run-time using a5_get_parameters()",
												"arguments": [
													{
														"name": "parameters"
													}
												]
											},
											"a5_definearguments": {
												"description": "Brings up builder allowing user to specify arguments for Link builder",
												"arguments": [
													{
														"name": "argstring",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5_defineconnectionstring": {
												"description": "Define a connection string to an ADO or AlphaDAO database. Let's user define an explicit string or a named connection.",
												"arguments": [
													{
														"name": "connstring"
													},
													{
														"name": "type"
													},
													{
														"name": "flagallowcreate",
														"optional": true
													},
													{
														"name": "showdefaultchoice",
														"optional": true
													}
												]
											},
											"a5_del_fields_fm_table": {
												"description": "Removes fields from a table.  Field_list is a crlf list of fields to be removed.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "field_list"
													}
												]
											},
											"a5_delete_group": {
												"description": "Allows the administrator to delete a group from the user/groups (UAF) file.",
												"arguments": [
													{
														"name": "master_password"
													},
													{
														"name": "group_name"
													}
												]
											},
											"a5_delete_user": {
												"description": "Allows the administrator to delete a user account",
												"arguments": [
													{
														"name": "master_password"
													},
													{
														"name": "user_name"
													}
												]
											}
										},
										"i": {
											"a5_dictionary_prompt": {
												"description": "Prompts for the name of an object",
												"arguments": [
													{
														"name": "dlg_title"
													},
													{
														"name": "type"
													},
													{
														"name": "overwrite_prompt",
														"optional": true
													},
													{
														"name": "ops",
														"optional": true
													},
													{
														"name": "dictionary",
														"optional": true
													}
												]
											},
											"a5_dictionary_read": {
												"description": "Reads a record from a data ditionary.  If lBlob is .T., value is returned as a blob. ExtendedAction can be '', 'Rename' or 'SaveAs'",
												"arguments": [
													{
														"name": "dictionary"
													},
													{
														"name": "type"
													},
													{
														"name": "name"
													},
													{
														"name": "delete",
														"optional": true
													},
													{
														"name": "lblob",
														"optional": true
													},
													{
														"name": "extendedaction",
														"optional": true
													},
													{
														"name": "newname",
														"optional": true
													}
												]
											},
											"a5_dictionary_write": {
												"description": "Writes a record to a data ditionary.",
												"arguments": [
													{
														"name": "dictionary"
													},
													{
														"name": "type"
													},
													{
														"name": "name"
													},
													{
														"name": "contents"
													},
													{
														"name": "flagrefreshcontrolpanel",
														"optional": true
													}
												]
											},
											"a5_dictionaryobject_exists": {
												"description": "FullyqualifiedObjectname is of form objectname@dictionary. ObjectType = 'report', 'label','letter' etc.",
												"arguments": [
													{
														"name": "fullyqualifiedobjectname"
													},
													{
														"name": "objecttype"
													}
												]
											},
											"a5_display_tableset_info": {
												"arguments": [
													{
														"name": "setname"
													},
													{
														"name": "flag_show_statistics",
														"optional": true
													}
												]
											}
										},
										"o": {
											"a5_documentationurl": {
												"description": "Returns a URL for online documentation",
												"arguments": [
													{
														"name": "path",
														"optional": true
													}
												]
											},
											"a5_downloadsurl": {
												"description": "Returns a URL for Alpha downloads",
												"arguments": [
													{
														"name": "path",
														"optional": true
													}
												]
											}
										},
										"r": {
											"a5_drop_from_database": {
												"description": "If a table or set has focus, then drop from DB, else display the multiple drop dialog."
											}
										},
										"u": {
											"a5_duplicate_set": {
												"description": "Displays the Duplicate Set dialog box.",
												"arguments": [
													{
														"name": "setname"
													}
												]
											},
											"a5_duplicate_set_files": {
												"description": "Creates a duplicate of a set",
												"arguments": [
													{
														"name": "source_set"
													},
													{
														"name": "target_set"
													}
												]
											},
											"a5_duplicate_table": {
												"description": "Displays the Duplicate Table dialog box.",
												"arguments": [
													{
														"name": "table_name"
													}
												]
											}
										}
									}
								},
								"e": {
									"__index__": {
										"d": {
											"a5_edit_fieldrules": {
												"description": "Launches the Field Rules Editor",
												"arguments": [
													{
														"name": "table_name"
													}
												]
											},
											"a5_edit_indexes": {
												"description": "Launches the Index Builder",
												"arguments": [
													{
														"name": "table_name"
													}
												]
											},
											"a5_edit_query_operation": {
												"description": "Brings up the editor for a saved Query Operation",
												"arguments": [
													{
														"name": "query_name"
													}
												]
											},
											"a5_edit_recent_db_list": {
												"description": "Edit the recent database list."
											},
											"a5_edit_speed_glossary": {
												"description": "Edit the speed glossary."
											},
											"a5_edit_structure": {
												"description": "Launches the Table Restructure Editor",
												"arguments": [
													{
														"name": "table_name"
													}
												]
											},
											"a5_edit_user_dictionary": {
												"description": "Public user defined function."
											}
										},
										"m": {
											"a5_email_addr_extract": {
												"description": " Extract an email address from a string",
												"arguments": [
													{
														"name": "text"
													}
												]
											},
											"a5_email_name_extract": {
												"description": " Given a name/email address, extract the name.  If there is no name, return the address",
												"arguments": [
													{
														"name": "text"
													}
												]
											},
											"a5_email_ob_to_ib": {
												"description": " Import an Alpha Five v5 outbox into a v6 inbox",
												"arguments": [
													{
														"name": "outbox"
													},
													{
														"name": "inbox"
													}
												]
											},
											"a5_email_toolbar_merge": {
												"description": "Returns the system toolbar for the Email composition window mailmerge",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_email_toolbar_send": {
												"description": "Returns the system toolbar for the Email composition window",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_email_valid": {
												"description": "Returns .t. if an email address is correctly formatted.",
												"arguments": [
													{
														"name": "email_address"
													}
												]
											},
											"a5_embedded_filter_genie": {
												"description": "Specialized function used for embedded filter genie in Operation genies, and Select records dialog in Operation builders",
												"arguments": [
													{
														"name": "choice_list"
													},
													{
														"name": "condition_mode"
													}
												]
											},
											"a5_embeddedcalendargenie": {
												"description": "Display the datePicker genie",
												"arguments": [
													{
														"name": "pedit"
													}
												]
											}
										},
										"n": {
											"a5_encrypt_binary": {
												"description": "Encrypts a binary object and returns the binary result.",
												"arguments": [
													{
														"name": "source"
													},
													{
														"name": "key"
													},
													{
														"name": "algorithm",
														"optional": true
													},
													{
														"name": "initializer",
														"optional": true
													}
												]
											},
											"a5_encrypt_string": {
												"description": "Encrypts a string and returns the base64 encoded result.",
												"arguments": [
													{
														"name": "source"
													},
													{
														"name": "key"
													},
													{
														"name": "algorithm",
														"optional": true
													},
													{
														"name": "initializer",
														"optional": true
													}
												]
											},
											"a5_encrypt_table_field": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "connectionstring"
													},
													{
														"name": "tablename"
													},
													{
														"name": "fieldname"
													},
													{
														"name": "encryptionkey"
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5_enter_activation_key": {
												"description": "Display the Enter Activation Key dialog"
											},
											"a5_enumapplicationdata": {
												"description": " Enumerate data in application data folder",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "key",
														"optional": true
													}
												]
											}
										},
										"v": {
											"a5_eval_expression": {
												"description": "Used in code generated by the Script Genie. If expression starts with = then it evaluates it as an expression in the context of the current form.",
												"arguments": [
													{
														"name": "expression"
													},
													{
														"name": "vars",
														"optional": true
													}
												]
											},
											"a5_eval_valid": {
												"description": "Returns .t. if an expression is valid and is not a type 'F'.",
												"arguments": [
													{
														"name": "expression"
													},
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_eval_valid_expression": {
												"description": "Used in code generated by the Script Genie. Checks to see if an expression (which must start with = ) is valid in the context of the current form.",
												"arguments": [
													{
														"name": "expression"
													},
													{
														"name": "vars",
														"optional": true
													}
												]
											},
											"a5_eval_valid_table_set": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "expression"
													},
													{
														"name": "table_set_name"
													}
												]
											},
											"a5_evalvalueexpr": {
												"description": " Evaluate an expression where <value> has been used as a placeholder",
												"arguments": [
													{
														"name": "avalue"
													},
													{
														"name": "expr"
													}
												]
											},
											"a5_event_menu": {
												"description": "Creates the menu string for object events when editing a layout.",
												"arguments": [
													{
														"name": "input_object"
													}
												]
											}
										},
										"x": {
											"a5_excel_to_sqlite": {
												"description": "Creates a SQLite database from an Excel file. Each sheet in the Excel file is a table in the SQLite database.",
												"arguments": [
													{
														"name": "excelfn"
													},
													{
														"name": "sqlitedb"
													}
												]
											},
											"a5_exif_getlatlon": {
												"description": "Reads a jpeg file and extracts GPS Lat/Lon, formatted for use with Google Maps, if present. ",
												"arguments": [
													{
														"name": "filename"
													}
												]
											},
											"a5_exif_run_identify": {
												"description": "Extracts information from an image file using ImageMagick's identify.exe. Identify describes the format and characteristics of one or more image files. Can be used to extract exif data. See http://www.imagemagick.org/script/identify.php for command details  ",
												"arguments": [
													{
														"name": "filename"
													},
													{
														"name": "command"
													}
												]
											},
											"a5_expand_json": {
												"description": "Compacts a JSON string",
												"arguments": [
													{
														"name": "jsondata"
													},
													{
														"name": "map"
													}
												]
											},
											"a5_expandcalcfields": {
												"description": " Replace CALC->Field with it's expression",
												"arguments": [
													{
														"name": "expression"
													},
													{
														"name": "all_expressions"
													},
													{
														"name": "lui",
														"optional": true
													}
												]
											},
											"a5_expandcollapsebtngenie": {
												"description": "Drop a expand/collapse button in a layout",
												"arguments": [
													{
														"name": "def"
													}
												]
											},
											"a5_exploresqlitedb": {
												"description": "Explore contents of a SQLite database",
												"arguments": [
													{
														"name": "sqlitefn"
													}
												]
											},
											"a5_export_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_export_op_result": {
												"description": "Displays the Append Records result dialog box",
												"arguments": [
													{
														"name": "a_records_processed"
													},
													{
														"name": "export_filename"
													}
												]
											},
											"a5_export_scripts_udfs": {
												"description": "Export, print, or send scripts and functions. Method is 'export', 'print' or 'sent'.",
												"arguments": [
													{
														"name": "currentselected"
													},
													{
														"name": "method",
														"optional": true
													}
												]
											},
											"a5_export_toolbar": {
												"description": "Returns the system toolbar for Update Operation View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_exportconnectionstrings": {
												"description": "Export saved connection strings to a text file."
											},
											"a5_exportdaabasetosqlite_dialog": {
												"description": "Create a SQLite database from an existing database",
												"arguments": [
													{
														"name": "flaganydatabase",
														"optional": true
													},
													{
														"name": "sourcecs",
														"optional": true
													},
													{
														"name": "targetcs",
														"optional": true
													}
												]
											},
											"a5_expression_library": {
												"description": "Displays the Expression Library",
												"arguments": [
													{
														"name": "selected_text"
													},
													{
														"name": "expression"
													}
												]
											},
											"a5_extractoddata": {
												"description": " Extracts value from a \"{DATA=value}\" owner draw string",
												"arguments": [
													{
														"name": "text"
													}
												]
											}
										}
									}
								},
								"f": {
									"__index__": {
										"_": {
											"a5_f_fldlock_image_menu": {
												"description": "Right click menu for a browse when user clicks on a locked cell (modal data entry)  -- for case when cell IS an image"
											},
											"a5_f_fldlock_reg_menu": {
												"description": "Right click menu for a browse when user clicks on a locked cell (modal data entry)  -- for case when cell is NOT an image"
											}
										},
										"b": {
											"a5_fbf_toolbar": {
												"description": "Returns the system toolbar for Find-by-Form View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"i": {
											"a5_field_copy": {
												"description": "Used in the Edit/Copy menu in form/browse so that Edit, Copy is enabled even if field is locked for editing."
											},
											"a5_field_info": {
												"description": "Returns info about a field in a table. ",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "fieldname"
													}
												]
											},
											"a5_field_select": {
												"description": "Used internally in Layout editor to bind a field to an object when placing new objects on a Layout.",
												"arguments": [
													{
														"name": "pform"
													},
													{
														"name": "prev",
														"optional": true
													},
													{
														"name": "tables",
														"optional": true
													},
													{
														"name": "cvalidtypes",
														"optional": true
													}
												]
											},
											"a5_field_type_get": {
												"description": " Returns the datatype of a field on a form, assumes pForm is a valid ptr",
												"arguments": [
													{
														"name": "field"
													},
													{
														"name": "pform"
													}
												]
											},
											"a5_file_remove": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											},
											"a5_find_mismatchedfields": {
												"description": "Compares two tables and finds missing fields or mismatched fields in the target table",
												"arguments": [
													{
														"name": "primary_table"
													},
													{
														"name": "target_table"
													}
												]
											},
											"a5_finddupsgenie": {
												"description": "Displays the Find Duplicate Records genie",
												"arguments": [
													{
														"name": "tablename"
													}
												]
											},
											"a5_fixdbffieldnames": {
												"description": "Fixes fieldnames in a .dbf table. Field names can be invalid in externally created .dbf files.",
												"arguments": [
													{
														"name": "tablename"
													}
												]
											},
											"a5_fixlayouteventnames": {
												"description": " Fixes up event names in code.events when an object is renamed",
												"arguments": [
													{
														"name": "pobj"
													},
													{
														"name": "oldobjname"
													},
													{
														"name": "newobjname"
													}
												]
											},
											"a5_fixxdialogpositions": {
												"description": "Moves any Xdialogs that were saved with positions that are now off the primary display onto the primary display"
											}
										},
										"o": {
											"a5_font_list": {
												"description": "Get a list of fonts with the True Type image icon in front on True Type fonts."
											},
											"a5_force_close_all": {
												"description": "Called by a5.close() with a .t. argument. "
											},
											"a5_form_cell_edit": {
												"description": "Form right click menu when you right click on a cell and you are in Change or Enter mode. "
											},
											"a5_form_cell_view": {
												"description": "Form right click menu when you right click on a field that is not locked and you are in View mode (not Change or Enter)"
											},
											"a5_form_create": {
												"description": "Runs the New Form Genie",
												"arguments": [
													{
														"name": "table_set_name",
														"optional": true
													}
												]
											},
											"a5_form_rclick_bckgrnd": {
												"description": "This menu is displayed when you right click on a Form background (i.e. not on a field)."
											},
											"a5_form_toolbar": {
												"description": "Returns the system toolbar for Form View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_formeditor_toolbar": {
												"description": "Returns the system toolbar for Form Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"u": {
											"a5_function_finder": {
												"description": "Helps a user select a function. Inserts the function into the expression builder or script editor."
											},
											"a5_functions_ref_book": {
												"description": "Opens the Expression Functions Manual book"
											}
										}
									}
								},
								"g": {
									"__index__": {
										"e": {
											"__index__": {
												"n": {
													"a5_gen_filter_component": {
														"description": "Called in Action Script Genie to generate a filter expression component",
														"arguments": [
															{
																"name": "input_field"
															},
															{
																"name": "input_operator"
															},
															{
																"name": "input_value"
															}
														]
													},
													"a5_generate_html_table": {
														"description": "Takes a pointer to an open .dbf table, or an AlphaDAO resultset and generates an HTML table for all of the columns in the row.",
														"arguments": [
															{
																"name": "rs"
															},
															{
																"name": "style"
															},
															{
																"name": "maxrows",
																"optional": true
															},
															{
																"name": "flagshowhtml",
																"optional": true
															}
														]
													},
													"a5_generate_toolbar": {
														"description": "Called by toolbar editor. Generates a toolbar string.",
														"arguments": [
															{
																"name": "vars"
															},
															{
																"name": "toolbar_preview_mode",
																"optional": true
															}
														]
													},
													"a5_generate_xbasic_importtotablefromfile": {
														"description": "Generate Xbasic to import data to a temporary file so that it can then be appened to a .dbf table.",
														"arguments": [
															{
																"name": "filename"
															},
															{
																"name": "target_dbf_struct"
															},
															{
																"name": "autoincfieldsintarget"
															},
															{
																"name": "sourcefiletype",
																"optional": true
															}
														]
													},
													"a5_generic_close_window_code": {
														"description": "Internal use only. Called by Action Scripting to generate code"
													},
													"a5_generic_memo_viewer": {
														"description": "Displays memos, rtf memos, bitmap, jpeg, or image file ref fields in the appropriate viewer",
														"arguments": [
															{
																"name": "obj"
															},
															{
																"name": "readonly",
																"optional": true
															},
															{
																"name": "style",
																"optional": true
															},
															{
																"name": "flag_godirectlytoselectmode",
																"optional": true
															}
														]
													},
													"a5_generic_menus": {
														"description": "Returns the generic View, Window, Help menus etc."
													},
													"a5_generictablecrudaction": {
														"description": "Updates, Reads, Inserts or Deletes data from a table (either SQL or dbf)",
														"arguments": [
															{
																"name": "pdef"
															},
															{
																"name": "paction"
															},
															{
																"name": "presult"
															},
															{
																"name": "openconnection",
																"optional": true
															}
														]
													},
													"a5_genieheadinghtml": {
														"description": "Allows you to create dialog boxes that look like Microsoft Wizard dialogs. Creates a white band with an image and text at the top that can be displayed in an embedded window on a parent dialog box.",
														"arguments": [
															{
																"name": "windowname"
															},
															{
																"name": "imagename"
															},
															{
																"name": "text"
															},
															{
																"name": "width",
																"optional": true
															},
															{
																"name": "height",
																"optional": true
															}
														]
													}
												},
												"t": {
													"__index__": {
														"_": {
															"__index__": {
																"a": {
																	"a5_get_actionscript_xbasic": {
																		"description": "Gets the Xbasic code from a saved Action Script. If action_script_parameters is .t., then returns the Action Script Parameters instead.",
																		"arguments": [
																			{
																				"name": "code"
																			},
																			{
																				"name": "action_script_parameters",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_ado_databasetype": {
																		"description": "Returns the database type for a given connection string",
																		"arguments": [
																			{
																				"name": "connection_string"
																			}
																		]
																	}
																},
																"b": {
																	"a5_get_base_filter": {
																		"description": "Gets the base filter for the current Form/Browse.",
																		"arguments": [
																			{
																				"name": "formpointer",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_base_order": {
																		"description": "Gets the base order for the current Form/Browse.",
																		"arguments": [
																			{
																				"name": "formpointer",
																				"optional": true
																			}
																		]
																	}
																},
																"c": {
																	"a5_get_color_expn": {
																		"description": "Displays Genie to help user create a color equation for a field object on a Layout",
																		"arguments": [
																			{
																				"name": "input_expression"
																			},
																			{
																				"name": "singlecolor",
																				"optional": true
																			}
																		]
																	}
																},
																"d": {
																	"a5_get_date_format": {
																		"description": "Determines if the default date format is 'm/d' - USA format, or 'd/m' - non USA format."
																	},
																	"a5_get_dd_name": {
																		"description": " Return the name of the data dictionary",
																		"arguments": [
																			{
																				"name": "ctable"
																			}
																		]
																	}
																},
																"e": {
																	"a5_get_expression_longnames": {
																		"description": "Same as a5_get_epxression2(), but full qualified all field names, including fields from the parent table.",
																		"arguments": [
																			{
																				"name": "default_expn"
																			},
																			{
																				"name": "tables",
																				"optional": true
																			},
																			{
																				"name": "required_type",
																				"optional": true
																			}
																		]
																	}
																},
																"f": {
																	"a5_get_field_info": {
																		"description": "Returns an array \"Fields\", with fieldname, and fieldtype information ",
																		"arguments": [
																			{
																				"name": "alias_physical"
																			}
																		]
																	},
																	"a5_get_fieldinfo_delayed": {
																		"description": "Returns field info from the a_tableinfo[] array which is used in the Expression Builder and Filter Builder",
																		"arguments": [
																			{
																				"name": "vars"
																			},
																			{
																				"name": "alias"
																			}
																		]
																	},
																	"a5_get_fieldnames": {
																		"description": "Get list of fields in a table or set.",
																		"arguments": [
																			{
																				"name": "table_setname"
																			},
																			{
																				"name": "flags",
																				"optional": true
																			},
																			{
																				"name": "top_level_only",
																				"optional": true
																			},
																			{
																				"name": "fully_qualify_parent_fields",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_fieldrule_editors": {
																		"description": "Get names of tables for which field rules are currently being edited"
																	},
																	"a5_get_fields_in_table_set": {
																		"description": "Returns a list of fields in a table or set. Child table fields are qualified with an alias. Field types are shown as well.",
																		"arguments": [
																			{
																				"name": "table_or_set"
																			},
																			{
																				"name": "flagtoplevelonly",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_filesupdatedsince": {
																		"description": "Get list of files updates sence the reference time",
																		"arguments": [
																			{
																				"name": "pattern"
																			},
																			{
																				"name": "reference_time"
																			}
																		]
																	},
																	"a5_get_filter": {
																		"description": "Prompts the user for a filter",
																		"arguments": [
																			{
																				"name": "default_filter"
																			},
																			{
																				"name": "tables",
																				"optional": true
																			},
																			{
																				"name": "use_genie",
																				"optional": true
																			},
																			{
																				"name": "top_level",
																				"optional": true
																			},
																			{
																				"name": "topparent_windowname",
																				"optional": true
																			},
																			{
																				"name": "variable_list",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_font_expn": {
																		"description": "Displays Genie to help user create a font equation for a field object on a Layout",
																		"arguments": [
																			{
																				"name": "input_expression"
																			}
																		]
																	}
																},
																"g": {
																	"a5_get_group_assignments": {
																		"description": "Gets the names of all users that a group has as its members. Returns a crlf delimited list.",
																		"arguments": [
																			{
																				"name": "master_password"
																			},
																			{
																				"name": "group_name"
																			}
																		]
																	},
																	"a5_get_groups": {
																		"description": "Gets the names of all groups. Returns a crlf delimited list. If you are not logged on as the Administrator, then you must supply the master password.",
																		"arguments": [
																			{
																				"name": "master_password",
																				"optional": true
																			},
																			{
																				"name": "lbuiltin",
																				"optional": true
																			}
																		]
																	}
																},
																"i": {
																	"a5_get_index_name": {
																		"description": "Displays a drop-down pick list of index names. For internal use.",
																		"arguments": [
																			{
																				"name": "index_name"
																			},
																			{
																				"name": "layout_name"
																			}
																		]
																	}
																},
																"l": {
																	"a5_get_layout_mode": {
																		"description": "Returns the data entry mode for a layout ( View, Change or Enter)",
																		"arguments": [
																			{
																				"name": "layout_p"
																			}
																		]
																	},
																	"a5_get_level_name": {
																		"description": "Returns the level in the set at which the alias_name exists.",
																		"arguments": [
																			{
																				"name": "set_name"
																			},
																			{
																				"name": "alias_name"
																			}
																		]
																	}
																},
																"o": {
																	"a5_get_operations": {
																		"description": "Returns a CRLF delimited list of operations for the specified table or set name",
																		"arguments": [
																			{
																				"name": "operation_type"
																			},
																			{
																				"name": "tablename",
																				"optional": true
																			}
																		]
																	}
																},
																"p": {
																	"a5_get_parameters": {
																		"description": "Prompt for a list of Parameters",
																		"arguments": [
																			{
																				"name": "parameters"
																			}
																		]
																	},
																	"a5_get_parameters_local": {
																		"description": "Prompt for a list of Parameters and stores the result in the specified NameSpace",
																		"arguments": [
																			{
																				"name": "parameters"
																			},
																			{
																				"name": "namespace"
																			}
																		]
																	},
																	"a5_get_passive_link_tables": {
																		"description": "Get a list of passive link tables in the current database.",
																		"arguments": [
																			{
																				"name": "mode",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_pos_linestart": {
																		"description": "Returns the character position of the start of the current line. ",
																		"arguments": [
																			{
																				"name": "p"
																			}
																		]
																	},
																	"a5_get_ptr_to_code_ed": {
																		"description": "Returns a pointer to the code editor",
																		"arguments": [
																			{
																				"name": "current_pointer"
																			}
																		]
																	}
																},
																"r": {
																	"a5_get_raw_recent_files": {
																		"description": "Get the specified number of files in the most recently used database list.",
																		"arguments": [
																			{
																				"name": "count",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_reccount_delayed": {
																		"description": "Returns field info from the a_tableinfo[] array which is used in the Expression Builder and Filter Builder",
																		"arguments": [
																			{
																				"name": "vars"
																			},
																			{
																				"name": "alias"
																			}
																		]
																	},
																	"a5_get_records_in_query": {
																		"description": "Returns the number of records in a query for a table or a set. To pass in arguments, set OpDefn.arguments = argument object",
																		"arguments": [
																			{
																				"name": "table_set_name"
																			},
																			{
																				"name": "filter_expression"
																			},
																			{
																				"name": "session_handle",
																				"optional": true
																			},
																			{
																				"name": "count_child_records",
																				"optional": true
																			},
																			{
																				"name": "opdefn",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_recs_in_qry_local": {
																		"description": "Returns the number of records in a query for a table or a set.",
																		"arguments": [
																			{
																				"name": "table_set_name"
																			},
																			{
																				"name": "filter_expression"
																			},
																			{
																				"name": "vars"
																			}
																		]
																	},
																	"a5_get_report_sections": {}
																},
																"s": {
																	"a5_get_saved_email": {
																		"description": "Retrieves the contents of an email message that was saved in an Alpha Five dictionary. If the dictionary_name is blank, then current table/set dictionary is assumed.",
																		"arguments": [
																			{
																				"name": "email_name"
																			},
																			{
																				"name": "dictionary_name",
																				"optional": true
																			}
																		]
																	}
																},
																"t": {
																	"a5_get_table_ptr": {
																		"description": "Returns a pointer to the table for the field that has focus. If not field has focus, returns pointer to form's primary table",
																		"arguments": [
																			{
																				"name": "ptr"
																			}
																		]
																	},
																	"a5_get_tempfile_name": {
																		"description": "Returns a unique temporary filename without an extension. User is responsible for removing file when it is no longer needed. See also a5_create_tempfile()"
																	},
																	"a5_get_toolbar_xdialog": {
																		"description": "Gets the Xdialog strings that are actually shown after pre-processing a saved toolbar. If type is \"string\", then pass in the toolbar string in the format it is stored in the dictionary.",
																		"arguments": [
																			{
																				"name": "toolbarname"
																			},
																			{
																				"name": "type",
																				"optional": true
																			}
																		]
																	}
																},
																"u": {
																	"a5_get_user_assignments": {
																		"description": "Gets the names of all groups that a user is a member of. Returns a crlf delimited list.",
																		"arguments": [
																			{
																				"name": "master_password"
																			},
																			{
																				"name": "user_name"
																			}
																		]
																	},
																	"a5_get_users": {
																		"description": "Gets the names of all groups that a user is a member of. Returns a crlf delimited list.",
																		"arguments": [
																			{
																				"name": "master_password",
																				"optional": true
																			}
																		]
																	}
																},
																"v": {
																	"a5_get_v4_startup_form": {
																		"description": "Returns the name of the startup form defined in V4 or before"
																	}
																},
																"w": {
																	"a5_get_webfile": {
																		"description": " Bring up a file selection dialog designed for Web Project files",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "filetypes",
																				"optional": true
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "default_ext",
																				"optional": true
																			},
																			{
																				"name": "image_types",
																				"optional": true
																			},
																			{
																				"name": "opsin",
																				"optional": true
																			}
																		]
																	},
																	"a5_get_writeable_drives": {
																		"description": "Get a list of all of the writable drives attached to the computer"
																	}
																}
															}
														},
														"a": {
															"a5_getaccesstokenfornamedapiresource": {
																"description": "Gets the access token for a named resource (API type)",
																"arguments": [
																	{
																		"name": "namedresource"
																	}
																]
															},
															"a5_getaddinlibraryfilename": {
																"description": " Return the name of the addin library filename (addin_library.aex)"
															},
															"a5_getaddinlibrarylistfilename": {
																"description": " Return the name of the file containing the list"
															},
															"a5_getaddinsinstalled": {
																"description": " Returns a list of installed addins"
															},
															"a5_getaddinsinstalledfolder": {
																"description": " Return the location of the installed addins folder",
																"arguments": [
																	{
																		"name": "type",
																		"optional": true
																	}
																]
															},
															"a5_getalllocalipaddresses": {
																"description": "Get a CR-LF delimited list of all of the configured IP addresses for the current host"
															},
															"a5_getalphasqlfunction": {
																"description": "Allows the user to select an AlphaSQL function. Can return the 'Name', 'Prototype', 'Description', or 'Prompt'",
																"arguments": [
																	{
																		"name": "returnpart",
																		"optional": true
																	}
																]
															},
															"a5_getapplicationdatafilename": {
																"description": " Given a filename, returns the fully qualified path and filename that goes in the application data folder.  If lForceAppData = .T., always return the user's application data",
																"arguments": [
																	{
																		"name": "filename"
																	},
																	{
																		"name": "lforceappdata",
																		"optional": true
																	},
																	{
																		"name": "lallusers",
																		"optional": true
																	}
																]
															},
															"a5_getapplicationdatafolder": {
																"description": " Return the application data folder where settings should be stored",
																"arguments": [
																	{
																		"name": "lallusers",
																		"optional": true
																	}
																]
															},
															"a5_getappserveractivationfilename": {
																"description": "Returns the name of the file to be used for storing the Application Server's activation packet on disk"
															},
															"a5_getappserverconfigfile": {
																"description": "Return the full filename of the configuration file used by the Application Server"
															},
															"a5_getappversionnumber": {
																"description": "Returns the version number of the Application"
															},
															"a5_getargumentvalue": {
																"description": "Used in report writer to extract values of arguments at runtime so that they can be included in the report itself.",
																"arguments": [
																	{
																		"name": "argname"
																	}
																]
															},
															"a5_getattempteduser": {
																"description": " Return the last user that attempted to log in."
															},
															"a5_getauthtokensfromauthtable": {
																"description": "Gets access and refresh token from authenticationKeys table for a namedResource. if access token has expired and if refresh token is available, token can be refreshed and stored in the authenticationKeys table",
																"arguments": [
																	{
																		"name": "namedresource"
																	},
																	{
																		"name": "flagrefreshtokenifexpired",
																		"optional": true
																	},
																	{
																		"name": "flagsaverefreshedtokeninauthenticationkeystable",
																		"optional": true
																	}
																]
															}
														},
														"c": {
															"a5_getcodelibraryfilename": {
																"description": " Get the filename of the selected clip library",
																"arguments": [
																	{
																		"name": "selected_library"
																	}
																]
															},
															"a5_getcodelibraryfolder": {
																"description": " Get the folder where the code libraries are stored"
															}
														},
														"d": {
															"a5_getdatehtml": {
																"description": "Displays a dialog with a popup calendar rendered using HTML.",
																"arguments": [
																	{
																		"name": "title"
																	},
																	{
																		"name": "default_date"
																	},
																	{
																		"name": "style"
																	},
																	{
																		"name": "nocaption",
																		"optional": true
																	},
																	{
																		"name": "xdialogpositioncommand",
																		"optional": true
																	}
																]
															},
															"a5_getdefaultshadowdbfolder": {
																"description": " Returns the default location of a shadow database",
																"arguments": [
																	{
																		"name": "databasename",
																		"optional": true
																	}
																]
															}
														},
														"e": {
															"a5_getexcelinfo": {
																"description": "Gets information about an Excel file. Returns these properties: .hasError, .errorText, .table, .version. connectionString. .table is the worksheet tab that contains the data",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															},
															"a5_getexifinfo": {
																"description": "Extracts EXIF info from an image file. Returns a .dot variable with these properties: .error (.t. or .f.), .errorText, .hasExifInfo, .latitude, .longitude, .date_time, .json (raw EXIF info in JSON format)",
																"arguments": [
																	{
																		"name": "fn"
																	}
																]
															}
														},
														"f": {
															"a5_getfields_ado": {
																"description": "Uses ADO to get field information about a table or SQL select statement",
																"arguments": [
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "table_or_sqlselect"
																	},
																	{
																		"name": "issql",
																		"optional": true
																	},
																	{
																		"name": "username",
																		"optional": true
																	},
																	{
																		"name": "password",
																		"optional": true
																	}
																]
															},
															"a5_getfqdn": {
																"description": "Get the fully qualified domain name for the current host"
															}
														},
														"g": {
															"a5_getgoogleserviceaccounttoken": {
																"description": "Get an access token for a Google Service Account. JSON is the json definition of the service account and scopes is a crlf delimited list of scopes.",
																"arguments": [
																	{
																		"name": "json"
																	},
																	{
																		"name": "scopes"
																	}
																]
															}
														},
														"h": {
															"a5_gethelpfilename": {
																"description": " Return the file name of the product's help file"
															}
														},
														"i": {
															"a5_getimagesize": {
																"description": "Gets the size of an image",
																"arguments": [
																	{
																		"name": "imagefilename"
																	}
																]
															},
															"a5_getinstallationapplicationdatafolder": {
																"description": " Gets a path to store installation-specific application data",
																"arguments": [
																	{
																		"name": "lallusers",
																		"optional": true
																	}
																]
															}
														},
														"n": {
															"a5_getnamedconnectionstring": {
																"description": "Returns the connection string for a named A5DAO connection string",
																"arguments": [
																	{
																		"name": "connectionstringname"
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5_getnamedsqldatasource": {
																"description": "Returns properties of a saved DataSource. If DataSource not found, 'ConnectionString' property is set to 'Error\"",
																"arguments": [
																	{
																		"name": "datasourcename"
																	},
																	{
																		"name": "dictionaryfilename",
																		"optional": true
																	}
																]
															}
														},
														"p": {
															"a5_getprimarykeysfromdaosearchresult": {
																"description": "Used in conjunction with a5_AlphaDAOSearch() to populate an SQL::Arguments objects with the primary key values of the selected record.",
																"arguments": [
																	{
																		"name": "args"
																	},
																	{
																		"name": "dbfname"
																	},
																	{
																		"name": "selectedrecord"
																	},
																	{
																		"name": "primarykeyfields"
																	}
																]
															}
														},
														"r": {
															"a5_getreportsqlfilter": {
																"description": "Used in report writer to extract the SQL filter for a report that is based on a SQL Data source. The sql filter is passed in as options.filter in the optional 'Options' parameter.",
																"arguments": [
																	{
																		"name": "flagresolvearguments",
																		"optional": true
																	}
																]
															},
															"a5_getreportsqlorder": {
																"description": "Used in report writer to extract the SQL order for a report that is based on a SQL Data source. The sql filter is passed in as options.filter in the optional 'Options' parameter."
															}
														},
														"s": {
															"a5_getsavedadoconn_string": {
																"description": "Get the ADO connection strings for a given saved connection name",
																"arguments": [
																	{
																		"name": "conn_name"
																	},
																	{
																		"name": "dictionary",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5_getsavedadoconnections": {
																"description": "Get a list of the saved ADO connection strings",
																"arguments": [
																	{
																		"name": "dictionary",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	},
																	{
																		"name": "flagresolved",
																		"optional": true
																	}
																]
															},
															"a5_getstylesheettablefilename": {
																"description": " Returns the filename for the table where stylesheets are stored",
																"arguments": [
																	{
																		"name": "table_type",
																		"optional": true
																	}
																]
															},
															"a5_getsystemmenusfilename": {
																"description": " Return the name of the system menus filename"
															},
															"a5_getsystemtoolbarsfilename": {
																"description": " Return the name of the system toolbars filename"
															}
														},
														"t": {
															"a5_gettables_ado": {
																"description": "Use ADO to get the names of Tables and View in a Database. Can specify connection string, or MDB filename.",
																"arguments": [
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "username",
																		"optional": true
																	},
																	{
																		"name": "password",
																		"optional": true
																	}
																]
															},
															"a5_gettempfilename": {
																"description": "Get a temp filename using request.getRequestTempFilename() is called from a web app, else returns a temp filename in windows temp folder",
																"arguments": [
																	{
																		"name": "ext",
																		"optional": true
																	},
																	{
																		"name": "name",
																		"optional": true
																	}
																]
															},
															"a5_gettimeformats": {
																"description": " Get the time format strings",
																"arguments": [
																	{
																		"name": "type"
																	}
																]
															},
															"a5_gettimevalue": {
																"description": "Prompt for a time value",
																"arguments": [
																	{
																		"name": "time"
																	}
																]
															},
															"a5_gettransformhistory": {
																"description": " Load transform history from file",
																"arguments": [
																	{
																		"name": "historystring"
																	}
																]
															},
															"a5_gettransformhistoryfilename": {
																"description": " Return the filename of the Transform History file"
															},
															"a5_gettwofactorauthenticationsettings": {
																"description": "Gets the two factor authentication settings for a user. Data are returned as a JSON string.",
																"arguments": [
																	{
																		"name": "userid"
																	}
																]
															}
														},
														"u": {
															"a5_getuserdatafilename": {
																"description": " Get the filename for a file in the user data folder (i.e. filename within my documents)",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															},
															"a5_getuserdatafolder": {
																"description": " Return the folder where user data is saved (i.e. My Documents)"
															}
														}
													}
												}
											}
										},
										"l": {
											"a5_global_search_scripts": {
												"description": "Opens the Global Search Scripts/Udf dialog. If find_what = \"\", dialog defaults to last search value.",
												"arguments": [
													{
														"name": "find_what",
														"optional": true
													}
												]
											},
											"a5_globalsetting_add": {
												"description": "Add a new setting to the Global Settings table",
												"arguments": [
													{
														"name": "settingname"
													},
													{
														"name": "settingvalue"
													}
												]
											},
											"a5_globalsetting_delete": {
												"description": "Deletes a setting from the Global Settings table",
												"arguments": [
													{
														"name": "settingname"
													}
												]
											},
											"a5_globalsetting_get": {
												"description": "Read a setting value from the Global Settings table",
												"arguments": [
													{
														"name": "settingname"
													}
												]
											}
										},
										"o": {
											"a5_goto_function_def": {
												"description": "Goto the definition of the function at the current cursor location. If flag is .t., then instead of going to the function returns a flag that indicates whether the function is local.",
												"arguments": [
													{
														"name": "obj"
													},
													{
														"name": "return_valid_flag"
													}
												]
											}
										},
										"r": {
											"a5_graphql_execute": {
												"description": "Executes a GraphQL query",
												"arguments": [
													{
														"name": "servicename"
													},
													{
														"name": "querystring"
													},
													{
														"name": "headers",
														"optional": true
													},
													{
														"name": "variables",
														"optional": true
													},
													{
														"name": "queryparameters",
														"optional": true
													}
												]
											},
											"a5_gridcomponentopeninwindow": {
												"description": "Open a Grid component in an Xdialog window. Use op.base_filter, op.user_filter, op.link and op.argumentBindings to define a filter for the Grid. op.height and op.width define the window size.",
												"arguments": [
													{
														"name": "gridname"
													},
													{
														"name": "style"
													},
													{
														"name": "op",
														"optional": true
													},
													{
														"name": "formname",
														"optional": true
													}
												]
											}
										}
									}
								},
								"h": {
									"__index__": {
										"a": {
											"a5_has_base_filter": {
												"description": "Returns .t. if the current Form/Browse has a base Filter define.",
												"arguments": [
													{
														"name": "formpointer",
														"optional": true
													}
												]
											},
											"a5_has_permission": {
												"description": " Returns whether a user has access to an object",
												"arguments": [
													{
														"name": "name"
													},
													{
														"name": "class"
													},
													{
														"name": "permission"
													},
													{
														"name": "lui",
														"optional": true
													},
													{
														"name": "user_name",
														"optional": true
													},
													{
														"name": "master_password",
														"optional": true
													}
												]
											},
											"a5_has_serversidequery": {
												"description": "Returns .t. if any incremental filters have been applied to an active-link table",
												"arguments": [
													{
														"name": "opentable"
													}
												]
											}
										},
										"o": {
											"a5_hotspot_define": {
												"description": "Prompts for the setup of a new hotspot object.",
												"arguments": [
													{
														"name": "formname"
													}
												]
											}
										},
										"t": {
											"a5_html_color": {
												"description": "Converts an A5 color name to an HTML format color name. e.g. #FF0000",
												"arguments": [
													{
														"name": "a5_color_name"
													},
													{
														"name": "include_hash",
														"optional": true
													}
												]
											},
											"a5_html_editor": {
												"description": " Opens the HTML Editor and returns the title of the window that was created.",
												"arguments": [
													{
														"name": "tabname",
														"optional": true
													},
													{
														"name": "html_code",
														"optional": true
													},
													{
														"name": "default_ext",
														"optional": true
													},
													{
														"name": "use_toolbars",
														"optional": true
													}
												]
											},
											"a5_html_editor3": {
												"description": " Opens the HTML Editor and returns the title of the window that was created.",
												"arguments": [
													{
														"name": "tabname",
														"optional": true
													},
													{
														"name": "incoming_html_code",
														"optional": true
													},
													{
														"name": "default_ext",
														"optional": true
													},
													{
														"name": "use_toolbars",
														"optional": true
													},
													{
														"name": "filename",
														"optional": true
													}
												]
											},
											"a5_html_label": {
												"description": "Convert any data type to html text, optional search highlighting feature.",
												"arguments": [
													{
														"name": "value"
													},
													{
														"name": "searchhighlights",
														"optional": true
													}
												]
											},
											"a5_html_list_ado": {
												"description": "Queries an ADO Record Set to return an <OPTION> list for use in an HTML form.",
												"arguments": [
													{
														"name": "ado"
													},
													{
														"name": "default_value",
														"optional": true
													},
													{
														"name": "maxrows",
														"optional": true
													},
													{
														"name": "htmlencode",
														"optional": true
													}
												]
											},
											"a5_html_list_dbf": {
												"description": "Queries a Table or Set to return an <OPTION> list for use in an HTML form.",
												"arguments": [
													{
														"name": "do"
													},
													{
														"name": "default_value",
														"optional": true
													},
													{
														"name": "maxrows",
														"optional": true
													},
													{
														"name": "htmlencode",
														"optional": true
													}
												]
											},
											"a5_html_list_populate": {
												"description": "Creates the <option> ....</option> syntax from a crlf delimited list for use in an HTML list or combo box",
												"arguments": [
													{
														"name": "list"
													},
													{
														"name": "selecteditems",
														"optional": true
													},
													{
														"name": "tab_prefixes",
														"optional": true
													},
													{
														"name": "format",
														"optional": true
													},
													{
														"name": "html_encode",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													},
													{
														"name": "separator",
														"optional": true
													}
												]
											},
											"a5_html_modal": {
												"description": "Opens a modal HTML Editor window",
												"arguments": [
													{
														"name": "html_code",
														"optional": true
													},
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "show_source_tab",
														"optional": true
													},
													{
														"name": "read_only",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "event_handler_code",
														"optional": true
													},
													{
														"name": "toolbar_layout",
														"optional": true
													},
													{
														"name": "initial_path",
														"optional": true
													},
													{
														"name": "flagstripbodytaginsource",
														"optional": true
													}
												]
											},
											"a5_html_modeless": {
												"description": "Opens a modeless HTML Editor window",
												"arguments": [
													{
														"name": "html_code",
														"optional": true
													},
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "show_source_tab",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "event_handler_code",
														"optional": true
													},
													{
														"name": "toolbar_layout",
														"optional": true
													},
													{
														"name": "initial_path",
														"optional": true
													}
												]
											},
											"a5_html_page_prepare": {
												"arguments": [
													{
														"name": "html"
													},
													{
														"name": "javascriptlibrariespublic",
														"optional": true
													},
													{
														"name": "flagincludea5jslibraries",
														"optional": true
													},
													{
														"name": "a5stylename",
														"optional": true
													},
													{
														"name": "jquerytheme",
														"optional": true
													},
													{
														"name": "flagincludegooglejsapi",
														"optional": true
													},
													{
														"name": "flagfullqualifyurlimages",
														"optional": true
													},
													{
														"name": "embedcss",
														"optional": true
													},
													{
														"name": "csslinkfolder",
														"optional": true
													},
													{
														"name": "flagincludeformbox",
														"optional": true
													},
													{
														"name": "flagincludepickers",
														"optional": true
													},
													{
														"name": "flagincludesvgicons",
														"optional": true
													}
												]
											},
											"a5_html_pretty": {
												"description": "Reformat HTML text to show proper indentation",
												"arguments": [
													{
														"name": "html"
													},
													{
														"name": "flagxml",
														"optional": true
													},
													{
														"name": "flagusenode",
														"optional": true
													}
												]
											},
											"a5_html_tabbed_toolbar": {
												"description": "Returns the system HTML Editor toolbars",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_html_tidy": {
												"description": "Indents an HTML document. Used the Node 'htmlTidy' package. Can also use a5_html_pretty(), which uses the Node 'prettyHTML' package",
												"arguments": [
													{
														"name": "html"
													}
												]
											},
											"a5_html_toolbar": {
												"description": "Returns the system HTML Editor toolbars",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_html_toolbar_custom": {
												"description": "Returns the custom HTML Editor system toolbar",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_html_toolbar_fmt": {
												"description": "Returns the system toolbar for HTML Formatting",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_html_toolbar_forms": {
												"description": "Returns the tabbed HTML Editor system toolbar",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_htmllist": {
												"description": "Displays a list xdialog with each item defined by some html",
												"arguments": [
													{
														"name": "a_lists"
													},
													{
														"name": "title"
													},
													{
														"name": "selected"
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "flagresizeable",
														"optional": true
													},
													{
														"name": "allowfilter",
														"optional": true
													},
													{
														"name": "filteron",
														"optional": true
													},
													{
														"name": "description",
														"optional": true
													},
													{
														"name": "showmanagelist",
														"optional": true
													},
													{
														"name": "managefolder",
														"optional": true
													},
													{
														"name": "namefield",
														"optional": true
													},
													{
														"name": "commoncss",
														"optional": true
													}
												]
											}
										}
									}
								},
								"i": {
									"__index__": {
										"m": {
											"a5_image_edit_menu": {
												"description": "Generates a dynamic menu snippet depending on the class of the current object",
												"arguments": [
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_image_transform": {
												"description": "Transforms an image",
												"arguments": [
													{
														"name": "imagedata"
													}
												]
											},
											"a5_imp_append_op_result": {
												"description": "Displays the Import-Append Records result dialog box",
												"arguments": [
													{
														"name": "a_records_processed"
													},
													{
														"name": "a_records_total"
													},
													{
														"name": "a_records_violated"
													},
													{
														"name": "table_set_name"
													}
												]
											},
											"a5_import_into_table": {
												"description": "Imports a fixed length ascii file into an existing table. Ascii file must match the structure of the table. If ascii file has fieldnames, set skip_lines to 1",
												"arguments": [
													{
														"name": "table"
													},
													{
														"name": "ascii_filename"
													},
													{
														"name": "skip_lines",
														"optional": true
													},
													{
														"name": "silent",
														"optional": true
													},
													{
														"name": "show_code",
														"optional": true
													}
												]
											},
											"a5_import_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_import_toolbar": {
												"description": "Returns the system toolbar for Import Operation",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_importasciibuilder": {
												"description": "Opens the Builder to import an ascii file"
											},
											"a5_importasciigenie": {
												"description": "Opens the Genie to import an ascii file"
											},
											"a5_importconnectionstrings": {
												"description": "Imports connection strings from a text file. Format of file is Type||Name||ConnectionString, where Type is 'ADO' or 'AlphaDAO'."
											}
										},
										"n": {
											"a5_index_builder_toolbar": {
												"description": "Returns the system toolbar for Field Rules Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_index_selector": {
												"description": "Public user defined function."
											},
											"a5_ink_to_png": {
												"description": "Converts ink data into a .png file. If background color is blank, background is transparent. Background color can be a named Alpha Anywhere color (e.g. White, Light Blue) or a RGB color. The RGB code for the color in the format \"#R,G,B\", where R, G and B are integers between 0 and 255. ",
												"arguments": [
													{
														"name": "ink"
													},
													{
														"name": "heightinpoints"
													},
													{
														"name": "widthinpoints"
													},
													{
														"name": "filename"
													},
													{
														"name": "flaguseviewbox",
														"optional": true
													},
													{
														"name": "backgroundcolor",
														"optional": true
													}
												]
											},
											"a5_insert_table_field": {
												"description": "Insert a table fieldname into the code editor"
											},
											"a5_insert_text_into_field": {
												"description": "Used in Edit/Insert command on the Form and Browse menus.",
												"arguments": [
													{
														"name": "text_to_insert"
													}
												]
											},
											"a5_installmaker_help": {
												"description": "Downloads the InstallMaker Help",
												"arguments": [
													{
														"name": "topic"
													}
												]
											},
											"a5_installtlscertificatetowindowsstore": {
												"description": "Install a TLS/SSL certificate in the Windows Certificate Store",
												"arguments": [
													{
														"name": "certfile"
													},
													{
														"name": "storename",
														"optional": true
													},
													{
														"name": "storelocation",
														"optional": true
													}
												]
											},
											"a5_interactive_window": {
												"description": "Brings up a stand alone interactive window."
											},
											"a5_intersect_op_result": {
												"description": "Displays the result of an Intersect Operation",
												"arguments": [
													{
														"name": "primary_count"
													},
													{
														"name": "transaction_count"
													},
													{
														"name": "result_table"
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											},
											"a5_invertsqlorder": {
												"description": "Inverts the OrderBy clause",
												"arguments": [
													{
														"name": "orderby"
													}
												]
											}
										},
										"s": {
											"a5_is_actionscript": {
												"description": "Returns .t. if the code is in the format of an Action Script.",
												"arguments": [
													{
														"name": "code"
													}
												]
											},
											"a5_is_activelinktable": {
												"description": "Returns .t. if a table is a Active-link table.",
												"arguments": [
													{
														"name": "table"
													}
												]
											},
											"a5_is_addin_aex_outdated": {
												"description": "Test to see if any of the component files in addin_library.aex was updated, making the addin_library.aex out of date."
											},
											"a5_is_cpobj_name_valid": {
												"description": "Returns .t. if a Control Panel object name is valid (e.g. a form, browse, append etc.)",
												"arguments": [
													{
														"name": "obj_name"
													}
												]
											},
											"a5_is_crosslevel": {
												"description": "Returns .t. if a filter expression contains fields from a one-many child table.",
												"arguments": [
													{
														"name": "setname"
													},
													{
														"name": "filter"
													}
												]
											},
											"a5_is_database_open": {
												"description": "Returns .t. if a database is currently open"
											},
											"a5_is_email_valid": {
												"description": "Tests the validity of the specified email address(es). Multiple email addresse should be separated by commas or semicolons.",
												"arguments": [
													{
														"name": "email_address"
													}
												]
											},
											"a5_is_field_active": {
												"description": "Returns .t. if the active object on the layout refrenced by layout_p is a field or browse column.",
												"arguments": [
													{
														"name": "layout_p"
													},
													{
														"name": "exclude_var_fields",
														"optional": true
													}
												]
											},
											"a5_is_find_by_key_open": {
												"description": "Tests if the Find by key dialog is open"
											},
											"a5_is_mappedtable": {
												"description": "Returns .t. if a table is a mapped table table (i.e. a 'view').",
												"arguments": [
													{
														"name": "table"
													}
												]
											},
											"a5_is_passivelinkset": {
												"description": "Returns .t. if any table in the set is a passive-link table.",
												"arguments": [
													{
														"name": "setname"
													}
												]
											},
											"a5_is_passivelinktable": {
												"description": "Returns .t. if a table is a Passive-link table.",
												"arguments": [
													{
														"name": "table"
													},
													{
														"name": "usefastmethod",
														"optional": true
													}
												]
											},
											"a5_is_path_valid": {
												"description": "Tests if a folder name is valid.",
												"arguments": [
													{
														"name": "path_name"
													}
												]
											},
											"a5_is_qbf_genie_open": {
												"description": "Tests if the QBF genie is open"
											},
											"a5_is_scr_being_edited": {
												"description": "Returns .t. if the script/function is currently being edited. ",
												"arguments": [
													{
														"name": "name",
														"optional": true
													}
												]
											},
											"a5_is_scr_fav_tlr_open": {
												"description": "Returns .t. if the Script Favorites toolbar for the current form/browse is open"
											},
											"a5_is_trace_window_open": {
												"description": "Public user defined function."
											},
											"a5_ismaximized": {
												"description": "Returns .t. if the MDI child window is maximized"
											}
										}
									}
								},
								"j": {
									"a5_join_op_result": {
										"description": "Displays the result of a Join Operation",
										"arguments": [
											{
												"name": "primary_count"
											},
											{
												"name": "result_table"
											},
											{
												"name": "arguments",
												"optional": true
											}
										]
									},
									"a5_json_extractvalues": {
										"description": "Extracts name/value pairs from a JSON string.",
										"arguments": [
											{
												"name": "txt"
											},
											{
												"name": "flagunquotevalues",
												"optional": true
											}
										]
									},
									"a5_json_populatearray": {
										"description": "Takes an array of JSON objects and populates an Xbasic property array.",
										"arguments": [
											{
												"name": "arr"
											},
											{
												"name": "txt"
											}
										]
									},
									"a5_json_prep": {
										"description": "Used before calling VarToJSON() to remove property values that are nulls.",
										"arguments": [
											{
												"name": "p"
											},
											{
												"name": "flagfast",
												"optional": true
											}
										]
									},
									"a5_json_schema_from_commented_js": {
										"description": "Public user defined function.",
										"arguments": [
											{
												"name": "text"
											}
										]
									},
									"a5_json_schema_propgrid_def": {
										"description": "Public user defined function.",
										"arguments": [
											{
												"name": "schema"
											},
											{
												"name": "propname"
											}
										]
									},
									"a5_json_to_docx_template": {
										"description": "Create a default docx template file for some JSON",
										"arguments": [
											{
												"name": "filename"
											},
											{
												"name": "json"
											},
											{
												"name": "jsonhastype"
											}
										]
									},
									"a5_json_to_excel": {
										"description": "Exports data in a JSON document to an Excel file. If the JSON is an object where each object is an array, the Excel file has multiple sheets (one for each property in the object)",
										"arguments": [
											{
												"name": "json"
											},
											{
												"name": "filename"
											}
										]
									},
									"a5_jsonarraytohtmltable": {
										"description": "Creates an HTML table to display data in a JSON array.",
										"arguments": [
											{
												"name": "json"
											}
										]
									}
								},
								"l": {
									"__index__": {
										"a": {
											"a5_labeleditor_toolbar": {
												"description": "Returns the system toolbar for Report Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_layout_design": {
												"description": "Opens the specified layout in Design mode.",
												"arguments": [
													{
														"name": "object_name"
													},
													{
														"name": "type"
													}
												]
											},
											"a5_layout_print_genie": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "layout_name"
													},
													{
														"name": "layout_type"
													},
													{
														"name": "print_type",
														"optional": true
													}
												]
											},
											"a5_layout_rename": {
												"description": "Called from the Control Panel to rename or duplicate a layout object",
												"arguments": [
													{
														"name": "flag_duplicate",
														"optional": true
													}
												]
											},
											"a5_layout_rename2": {
												"description": "Rename a Layout Object. Renames the object in the Control Panel that has focus",
												"arguments": [
													{
														"name": "duplicate",
														"optional": true
													},
													{
														"name": "newnamepassedin",
														"optional": true
													}
												]
											},
											"a5_layout_view_generic": {
												"description": "Low level function called by the form.view(), form.load(), browse.view() and browse.load(), form.dialog() methods.",
												"arguments": [
													{
														"name": "layoutname"
													},
													{
														"name": "class"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "windowname",
														"optional": true
													},
													{
														"name": "position_x",
														"optional": true
													},
													{
														"name": "position_y",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "ops",
														"optional": true
													}
												]
											},
											"a5_layouttables_toolbar": {
												"description": "Returns the system toolbar for Report Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_layouttbarstatestart": {
												"description": "Called when a optional toolbar in a layout editor is turned on"
											}
										},
										"e": {
											"a5_learn_xbasic_book": {
												"description": "Opens the Learning Xbasic book"
											},
											"a5_learn_xdialog_book": {
												"description": "Opens the Learning Xdialog book"
											},
											"a5_lettereditor_toolbar": {
												"description": "Returns the system toolbar for Report Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"i": {
											"a5_libraries_synchronize": {
												"description": "Used to make sure that that the addin_library.aex file in the program folder matches the list of .aex files in the 'addins_installed' folder",
												"arguments": [
													{
														"name": "force",
														"optional": true
													}
												]
											},
											"a5_linktoolbar": {
												"description": "Used in a MDI Xdialog to link the toolbar to the MDI xdialog window so that when a variable changes in one dialog it also changed in another.",
												"arguments": [
													{
														"name": "toolbar"
													},
													{
														"name": "dlg_title"
													}
												]
											},
											"a5_list_objects_w_events": {
												"description": "List the object for a specfied layout. Object with events are bold. Format of string returned is owner draw listbox.",
												"arguments": [
													{
														"name": "layout_name"
													}
												]
											},
											"a5_list_open_windows": {
												"description": "Returns a CRLF list of all open window names"
											},
											"a5_list_properties": {
												"description": "List properties for an object. Property list can be filtered. If show_type = .t., \"propertyname|type\". If flag_tree, then +1 and +2 symbols are included.",
												"arguments": [
													{
														"name": "objectname"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "show_type",
														"optional": true
													},
													{
														"name": "flag_tree",
														"optional": true
													}
												]
											},
											"a5_list_tables": {
												"description": "Gets list of objects in a SQL database. See also a5_list_tables_with_types()",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "sqltablefilterorflagincludetables",
														"optional": true
													},
													{
														"name": "flagincludeviews",
														"optional": true
													},
													{
														"name": "flagincludelinkedtables",
														"optional": true
													},
													{
														"name": "flagincludesystemtables",
														"optional": true
													},
													{
														"name": "flagincludesynonyms",
														"optional": true
													},
													{
														"name": "flagincludealiases",
														"optional": true
													}
												]
											},
											"a5_list_tables_with_types": {
												"description": "Gets list of objects with their types in a SQL database. See also a5_list_tables()",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "sqltablefilterorflagincludetables",
														"optional": true
													},
													{
														"name": "flagincludeviews",
														"optional": true
													},
													{
														"name": "flagincludelinkedtables",
														"optional": true
													},
													{
														"name": "flagincludesystemtables",
														"optional": true
													},
													{
														"name": "flagincludesynonyms",
														"optional": true
													},
													{
														"name": "flagincludealiases",
														"optional": true
													}
												]
											}
										},
										"o": {
											"a5_load_adoformdataobject": {
												"description": "Loads the ADOFormDataObject class into memory.",
												"arguments": [
													{
														"name": "force_reload",
														"optional": true
													}
												]
											},
											"a5_load_aex_files": {
												"description": "Combines a crlf delimited list of .AEX files into a single .aex file. Then loads the resultant .aex file",
												"arguments": [
													{
														"name": "aex_files"
													},
													{
														"name": "slot"
													},
													{
														"name": "tempname"
													}
												]
											},
											"a5_load_speed_glossary": {
												"description": "Loads the speed glossary from disk into memory. If no value is specified for dbfname then the global, system glossary is loaded. If dbfname is specified, then the glossary is loaded from the specified table. If dbfname is '<clear>' the speed glossary is cleared from memory.",
												"arguments": [
													{
														"name": "dbfname",
														"optional": true
													},
													{
														"name": "oldvaluefieldname",
														"optional": true
													},
													{
														"name": "newvaluefieldname",
														"optional": true
													}
												]
											},
											"a5_load_udf_from_dict": {
												"description": "Registers the UDFs stored in an external dictionary",
												"arguments": [
													{
														"name": "dict"
													},
													{
														"name": "password",
														"optional": true
													}
												]
											},
											"a5_loadapplicationdata": {
												"description": " Load application data from a source",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "adata"
													},
													{
														"name": "key",
														"optional": true
													}
												]
											},
											"a5_loadcomponentlow": {
												"description": "Loads a web component from a disk file. Works regardless of whether the component was saved using property_to_string(), property_to_blob(), or *variable_to_script()",
												"arguments": [
													{
														"name": "filename"
													}
												]
											},
											"a5_loadwebcomponent": {
												"description": "Used in .A5W pages to load a web component",
												"arguments": [
													{
														"name": "comp"
													},
													{
														"name": "directory"
													}
												]
											},
											"a5_loadwebcomponent_embedded": {
												"description": "Used in desktop embedded .A5W pages to load a web component",
												"arguments": [
													{
														"name": "comp"
													}
												]
											},
											"a5_lookupsavedconnectionstring": {
												"description": "Returns the Connection String corresponding to a saved Connection String name",
												"arguments": [
													{
														"name": "connectionstringname"
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											}
										}
									}
								},
								"m": {
									"__index__": {
										"a": {
											"a5_make_jquery_safe": {
												"description": "Processes a Javascript file and replaces all instaces where '$' is used to reference the jQuery object with 'jQuery' so that the Javascript is safe to use in Alpha Anywhere.",
												"arguments": [
													{
														"name": "filename"
													},
													{
														"name": "flagcreatebackup",
														"optional": true
													}
												]
											},
											"a5_make_search_expn": {
												"description": "Makes a search expression from the QBF style input into a field control. Style 1 = exact match, 2 = contains, 3 = starts with, 4 = exact match, but supports wildcard characters % _ * ? . Type for dates can include format: D:m/d  or D:d/m (format indicates format in which date value appears)",
												"arguments": [
													{
														"name": "field"
													},
													{
														"name": "vvalue"
													},
													{
														"name": "type"
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "allow_qbf",
														"optional": true
													},
													{
														"name": "syntax",
														"optional": true
													},
													{
														"name": "paramprefix",
														"optional": true
													},
													{
														"name": "qbf_operator_exclusions",
														"optional": true
													},
													{
														"name": "opsin",
														"optional": true
													},
													{
														"name": "dbsyntax",
														"optional": true
													}
												]
											},
											"a5_makejsonindexfile": {
												"description": "Takes an input JSON file (an array of objects) and creates two files. An index file with just the key fields and offset and length, and a raw file with the original data",
												"arguments": [
													{
														"name": "fninputjson"
													},
													{
														"name": "keys"
													},
													{
														"name": "flagcompactindex",
														"optional": true
													}
												]
											},
											"a5_makejsontree": {
												"description": "Takes an array and makes a JSON tree. Array has these properties at a minimum: .label, .level, ",
												"arguments": [
													{
														"name": "treein"
													},
													{
														"name": "opsin",
														"optional": true
													}
												]
											},
											"a5_mark_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_mark_op_result": {
												"description": "Displays the generic Mark Records result dialog box",
												"arguments": [
													{
														"name": "table_set_name"
													},
													{
														"name": "mark_type"
													},
													{
														"name": "a_records_processed"
													},
													{
														"name": "a_records_total"
													},
													{
														"name": "show_dup_recs_genie",
														"optional": true
													}
												]
											},
											"a5_mark_toolbar": {
												"description": "Returns the system toolbar for Mark Operation",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"d": {
											"a5_mdac_version": {
												"description": "Returns MDAC (Microsoft Data Access Components) Version Number"
											},
											"a5_mdbconstring": {
												"description": "Creates an ADO connection string for an MDB filename",
												"arguments": [
													{
														"name": "mdbfilename"
													}
												]
											},
											"a5_mdi_windowclass_add": {
												"description": "Registers a user defined MDI child window class. ",
												"arguments": [
													{
														"name": "class_name"
													},
													{
														"name": "class_long_name"
													},
													{
														"name": "icon"
													}
												]
											},
											"a5_mdi_windowclass_delete": {
												"description": "Un-registers a user defined MDI child window class. ",
												"arguments": [
													{
														"name": "class_name"
													}
												]
											}
										},
										"e": {
											"a5_memo_editor_object": {
												"description": "Called when user clicks the Pencil icon in Browse mode, and the browse is in view mode (i.e. the memo editor is not open for editing).",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_menu_def_load": {
												"description": "Gets the definition of a user defined Menu.",
												"arguments": [
													{
														"name": "menuname"
													},
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_menu_def_load_new": {
												"description": "Gets the definition of a user defined Menu.",
												"arguments": [
													{
														"name": "menuname"
													},
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_menu_def_strings": {
												"description": "Generates a list of menu commands. Used in Button Genie and other places.",
												"arguments": [
													{
														"name": "string"
													},
													{
														"name": "assign_images",
														"optional": true
													}
												]
											},
											"a5_menu_editor_modal": {
												"description": "Displays a modal menu editor for a menu string.",
												"arguments": [
													{
														"name": "menu_string"
													}
												]
											},
											"a5_merge_addin_menus": {
												"description": "Used to merge 3rd party Addin menus into an A5 System menu.",
												"arguments": [
													{
														"name": "menu_name"
													},
													{
														"name": "flag_force_system_default",
														"optional": true
													}
												]
											},
											"a5_merge_fields": {
												"description": "Merges fields from tables into a text file with placeholders for fieldnames.",
												"arguments": [
													{
														"name": "input_text"
													},
													{
														"name": "table_list"
													},
													{
														"name": "format_code_separator",
														"optional": true
													},
													{
														"name": "flag_set",
														"optional": true
													},
													{
														"name": "form_name",
														"optional": true
													}
												]
											},
											"a5_merge_json_into_template": {
												"description": "Merges a string of JSON data into a template.",
												"arguments": [
													{
														"name": "jsondata"
													},
													{
														"name": "template"
													},
													{
														"name": "javascriptfunctions",
														"optional": true
													},
													{
														"name": "partialtemplatesjson",
														"optional": true
													},
													{
														"name": "localcss",
														"optional": true
													},
													{
														"name": "flagusev8",
														"optional": true
													},
													{
														"name": "flagusenode",
														"optional": true
													}
												]
											},
											"a5_mergedataintotemplate": {
												"description": "Merge data into a template. Data source can be a) Xbasic property array, b) pointer to an open .dbf table, c) SQL result set. Template uses {ds.data(\"fieldname\")} to reference a field from the data source. Can include Xbasic expressions in { }. E.g {ut(ds.data(\"fieldname\"))}, {date()). When merging data into an HTML template, use the a5_html_label() function to escape HTML characters. For example: {a5_html_label(ds.data(\"Notes\"))} . Use {rowNumber} for current row. mergeResult.rows = number of rows that were merged",
												"arguments": [
													{
														"name": "template"
													},
													{
														"name": "datasource"
													},
													{
														"name": "mergeresult",
														"optional": true
													},
													{
														"name": "localfunctions",
														"optional": true
													}
												]
											},
											"a5_mergesqlarguments": {
												"description": "Merges arguments in two sql::arguments object into a single object",
												"arguments": [
													{
														"name": "args1"
													},
													{
														"name": "args2"
													}
												]
											}
										},
										"i": {
											"a5_minicolorpicker": {
												"description": "Mini color picker, has and HLS picker and both System and Custom palettes. color = the current color, style = \"ALPHA\" for an alpha color, \"HEX\" for a hexadecimal color, \"HTML\" for an html color, or \"RGB\" for an RGB value seperated by a \",\", \"+\", or \" \".",
												"arguments": [
													{
														"name": "color",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "position",
														"optional": true
													}
												]
											}
										},
										"o": {
											"a5_modal_change_command": {
												"description": "If a form or browse is set to Modal data entry, generates the 'Change Record' command. Otherwise null."
											},
											"a5_modal_code_editor": {
												"description": "Modeless Code editor. Type = Layout, Script, Function",
												"arguments": [
													{
														"name": "name"
													},
													{
														"name": "type"
													}
												]
											},
											"a5_modeless_code_editor": {
												"description": "Modeless Code editor. Type = Layout, Script, Function",
												"arguments": [
													{
														"name": "name"
													},
													{
														"name": "type"
													}
												]
											},
											"a5_modeless_textencoder": {
												"description": "Prompt for a text value. High order characters are uni-code encoded."
											},
											"a5_more_database_list": {
												"description": "Displays the list showing all databases in the Most Recently Used list."
											}
										},
										"s": {
											"a5_ms_word_mailmerge": {
												"description": "Opens the Mail-merge with MS Word dialog box from within a form or browse window"
											}
										},
										"u": {
											"a5_multi_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_multi_toolbar": {
												"description": "Returns the system toolbar for Intersect/Join/Subtract Operation",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_must_flatten_query": {
												"description": "Returns .t. if a filter on a set needs to use the flattenquery() command",
												"arguments": [
													{
														"name": "filter"
													},
													{
														"name": "setname"
													}
												]
											}
										}
									}
								},
								"n": {
									"a5_namedconnectioncreate": {
										"description": "Create a named connection string. Type is either 'AlphaDAO' or 'ADO'",
										"arguments": [
											{
												"name": "connectionname"
											},
											{
												"name": "connectionstring"
											},
											{
												"name": "type",
												"optional": true
											}
										]
									},
									"a5_nativetablename": {
										"description": "Generates the fully qualified native table name for a given portable sql table name",
										"arguments": [
											{
												"name": "cn"
											},
											{
												"name": "tablename"
											},
											{
												"name": "tableowner",
												"optional": true
											}
										]
									},
									"a5_new_card_stack": {
										"description": "Displayed when user tries to create a new Card Stack."
									},
									"a5_new_database_genie": {
										"description": "New Table/Set/Database Genie. Checks if templates are installed. If not downloads them."
									},
									"a5_new_function_dialog": {
										"description": "Prompts for a arguments when you define a new Global Function"
									},
									"a5_new_in_v5_book": {
										"description": "Opens the Whats new in V5 book"
									},
									"a5_new_in_xbasic_book": {
										"description": "Opens the Whats new in V5 book"
									},
									"a5_new_layout_event": {
										"description": "Edits a  new layout event and prompts for method",
										"arguments": [
											{
												"name": "eventname"
											}
										]
									},
									"a5_new_query_operation": {
										"description": "Brings up the editor to create a new saved Query Operation.",
										"arguments": [
											{
												"name": "table_set_name"
											},
											{
												"name": "use_genie",
												"optional": true
											}
										]
									},
									"a5_new_script_w_prompt": {
										"description": "Creates a new script. Allows user to add script to Favorites list. Mode is Xbasic or Action.",
										"arguments": [
											{
												"name": "mode",
												"optional": true
											}
										]
									},
									"a5_new_set": {
										"description": "Create a new Set",
										"arguments": [
											{
												"name": "primary_table",
												"optional": true
											}
										]
									},
									"a5_new_table": {
										"description": "Create a new Table"
									},
									"a5_new_table_set_genie": {
										"description": "New Table/Set/Database Genie. Checks if templates are installed. If not downloads them."
									},
									"a5_newsurl": {
										"description": "Returns a URL for news",
										"arguments": [
											{
												"name": "path",
												"optional": true
											}
										]
									},
									"a5_no_db_open_toolbar": {
										"description": "Returns the system toolbar for no Database Open",
										"arguments": [
											{
												"name": "read_from_memory",
												"optional": true
											}
										]
									},
									"a5_normalizedate": {
										"description": "Used to normalize a character date or date/time value so that it conforms to local regional settings. You can specify an optional 'switch year' in the format: e.g. mm/dd/yy::30.",
										"arguments": [
											{
												"name": "datec"
											},
											{
												"name": "format"
											},
											{
												"name": "displayunformat",
												"optional": true
											}
										]
									},
									"a5_npm_install": {
										"description": "Install a node module",
										"arguments": [
											{
												"name": "module"
											},
											{
												"name": "folder",
												"optional": true
											},
											{
												"name": "silent",
												"optional": true
											}
										]
									},
									"a5_npm_view": {
										"description": "Install a node module",
										"arguments": [
											{
												"name": "module"
											}
										]
									},
									"a5_number_format": {
										"description": "Formats a number using the number formatter in the Alpha Javascript library. ",
										"arguments": [
											{
												"name": "number"
											},
											{
												"name": "formatstring"
											}
										]
									}
								},
								"o": {
									"__index__": {
										"d": {
											"a5_odbc_connection": {
												"description": "Displays the Windows ODBC admin dialog"
											},
											"a5_odbc_import_genie": {
												"description": "Opens the ODBC Import Genie"
											}
										},
										"l": {
											"a5_ole_edit_menu": {
												"description": "Generates a dynamic menu snippet depending on the class of the current object",
												"arguments": [
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_ole_explorer": {
												"description": "Displays the OLE Object Browser"
											},
											"a5_ole_progid_get": {
												"description": "Get an OLE Create methods progid",
												"arguments": [
													{
														"name": "progid"
													}
												]
											}
										},
										"p": {
											"__index__": {
												"_": {
													"a5_op_genie": {
														"description": "Displays the Run Operation Genie",
														"arguments": [
															{
																"name": "table_set_name",
																"optional": true
															}
														]
													},
													"a5_op_name_short_to_long": {
														"description": "Take a Control Panel object name and expands it to include the dictionary.",
														"arguments": [
															{
																"name": "op_name"
															},
															{
																"name": "op_type"
															},
															{
																"name": "flagstrict",
																"optional": true
															}
														]
													}
												},
												"e": {
													"__index__": {
														"n": {
															"__index__": {
																"_": {
																	"__index__": {
																		"b": {
																			"a5_open_browse": {
																				"description": "Opens the a Browse layout for a table or set. If layoutname = \"\", use default layout.",
																				"arguments": [
																					{
																						"name": "layoutname"
																					},
																					{
																						"name": "table_set_name"
																					},
																					{
																						"name": "filter",
																						"optional": true
																					},
																					{
																						"name": "order",
																						"optional": true
																					},
																					{
																						"name": "description",
																						"optional": true
																					},
																					{
																						"name": "options",
																						"optional": true
																					},
																					{
																						"name": "enable_show_all",
																						"optional": true
																					}
																				]
																			}
																		},
																		"c": {
																			"a5_open_customcomponentcomp_builder": {
																				"description": "Opens the CustomComponent Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					},
																					{
																						"name": "subtype",
																						"optional": true
																					}
																				]
																			}
																		},
																		"d": {
																			"a5_open_default_browse": {
																				"description": "Opens the default Browse for a table or set.",
																				"arguments": [
																					{
																						"name": "table_set_name"
																					},
																					{
																						"name": "filter",
																						"optional": true
																					},
																					{
																						"name": "order",
																						"optional": true
																					},
																					{
																						"name": "description",
																						"optional": true
																					},
																					{
																						"name": "options",
																						"optional": true
																					},
																					{
																						"name": "enable_show_all",
																						"optional": true
																					},
																					{
																						"name": "arguments",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_default_form": {
																				"description": "Opens the default Form for a table or set.",
																				"arguments": [
																					{
																						"name": "table_set_name"
																					},
																					{
																						"name": "filter",
																						"optional": true
																					},
																					{
																						"name": "order",
																						"optional": true
																					},
																					{
																						"name": "description",
																						"optional": true
																					},
																					{
																						"name": "options",
																						"optional": true
																					},
																					{
																						"name": "enable_show_all",
																						"optional": true
																					},
																					{
																						"name": "arguments",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_dialog2comp_builder": {
																				"description": "Opens the TabbedUI Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_dialogcomp_builder": {
																				"description": "Opens the Web Component Dialog Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		},
																		"e": {
																			"a5_open_embeddedbrowse_companionform": {
																				"description": "Opens a modal form to edit/add records to a table shown in an embedded browse.",
																				"arguments": [
																					{
																						"name": "mode"
																					},
																					{
																						"name": "targetformname"
																					},
																					{
																						"name": "formpointer"
																					},
																					{
																						"name": "browsename"
																					},
																					{
																						"name": "targettableprimarykey",
																						"optional": true
																					},
																					{
																						"name": "linkdef",
																						"optional": true
																					},
																					{
																						"name": "otheroptions",
																						"optional": true
																					}
																				]
																			}
																		},
																		"f": {
																			"a5_open_form": {
																				"description": "Opens the a Form layout for a table or set. If layoutname = \"\", use default layout.",
																				"arguments": [
																					{
																						"name": "layoutname"
																					},
																					{
																						"name": "table_set_name"
																					},
																					{
																						"name": "filter",
																						"optional": true
																					},
																					{
																						"name": "order",
																						"optional": true
																					},
																					{
																						"name": "description",
																						"optional": true
																					},
																					{
																						"name": "options",
																						"optional": true
																					},
																					{
																						"name": "enable_show_all",
																						"optional": true
																					}
																				]
																			}
																		},
																		"g": {
																			"a5_open_gridcomp_builder": {
																				"description": "Opens the Web Component Grid Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		},
																		"h": {
																			"a5_open_htmlfile": {
																				"description": "Open the HTML editor and load the specified file.",
																				"arguments": [
																					{
																						"name": "filename"
																					},
																					{
																						"name": "tabname",
																						"optional": true
																					},
																					{
																						"name": "default_ext",
																						"optional": true
																					}
																				]
																			}
																		},
																		"i": {
																			"a5_open_import_socket": {
																				"description": "Opens a socket so that the ODBC Import Genie can talk to A5. (For Internal Use Only)."
																			}
																		},
																		"l": {
																			"a5_open_layout": {
																				"description": "Opens a Layout for a table or set. If layout_name = \"\", then uses the Default Layout (form or browse)",
																				"arguments": [
																					{
																						"name": "layout_type"
																					},
																					{
																						"name": "layout_name"
																					},
																					{
																						"name": "table_set_name"
																					},
																					{
																						"name": "filter",
																						"optional": true
																					},
																					{
																						"name": "order",
																						"optional": true
																					},
																					{
																						"name": "description",
																						"optional": true
																					},
																					{
																						"name": "options",
																						"optional": true
																					},
																					{
																						"name": "enable_show_all",
																						"optional": true
																					},
																					{
																						"name": "arguments",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_linkercomp_builder": {
																				"description": "Opens the Web Component Linker Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_logincomp_builder": {
																				"description": "Opens the Login Web Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					},
																					{
																						"name": "promptstyle",
																						"optional": true
																					}
																				]
																			}
																		},
																		"m": {
																			"a5_open_maintcomp_builder": {
																				"description": "Opens the Login Web Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		},
																		"n": {
																			"a5_open_navsyscomp_builder": {
																				"description": "Opens the Web Component Linker Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_new_database": {
																				"description": "Display the standard Windows file selection dialog to select a Database file to open.",
																				"arguments": [
																					{
																						"name": "default_folder",
																						"optional": true
																					}
																				]
																			}
																		},
																		"p": {
																			"a5_open_pagelayoutcomp_builder": {
																				"description": "Opens the pageLayout Component  Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		},
																		"q": {
																			"a5_open_query_generic": {
																				"description": "Public user defined function.",
																				"arguments": [
																					{
																						"name": "query_name"
																					},
																					{
																						"name": "layout_name",
																						"optional": true
																					},
																					{
																						"name": "layout_type",
																						"optional": true
																					}
																				]
																			}
																		},
																		"s": {
																			"a5_open_script_password": {
																				"description": "Opens a script, prompting for a password if necessary",
																				"arguments": [
																					{
																						"name": "scriptname"
																					},
																					{
																						"name": "script_type"
																					},
																					{
																						"name": "gpassword"
																					},
																					{
																						"name": "coll"
																					}
																				]
																			}
																		},
																		"t": {
																			"a5_open_tabbedlinkercomp_builder": {
																				"description": "Opens the Web Component Tabbed GridLinker Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			},
																			"a5_open_tabbeduicomp_builder": {
																				"description": "Opens the TabbedUI Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		},
																		"w": {
																			"a5_open_webcalendarcomp_builder": {
																				"description": "Opens the WebCalendar Component Builder",
																				"arguments": [
																					{
																						"name": "component_name",
																						"optional": true
																					}
																				]
																			}
																		}
																	}
																},
																"b": {
																	"a5_openbrowser": {
																		"description": "Open the specified Url in the (optionally) specified browser. Supported browser names are \"Default\", \"Chrome\", \"Firefox\", \"IE\", \"Opera\", and \"Safari\"",
																		"arguments": [
																			{
																				"name": "url"
																			},
																			{
																				"name": "browser",
																				"optional": true
																			},
																			{
																				"name": "silent",
																				"optional": true
																			}
																		]
																	}
																},
																"c": {
																	"a5_opencomp_builder": {
																		"description": "Open a builder for a Web Component",
																		"arguments": [
																			{
																				"name": "name"
																			}
																		]
																	}
																}
															}
														}
													}
												}
											}
										},
										"r": {
											"a5_oracleinstantclientinstall": {
												"description": "Installs the Oracle Instant Client DLLs if they are not already present in the A5 executeable folder."
											}
										},
										"s": {
											"a5_os_info": {
												"description": "Returns a pointer with information about the local operating system",
												"arguments": [
													{
														"name": "computer",
														"optional": true
													}
												]
											}
										},
										"u": {
											"a5_outline_menu_browse": {
												"description": "Called by a5_browse_menu(). If working in a set with multiple levels, then puts the contract/expand command on the menu."
											}
										},
										"w": {
											"a5_owner_draw_list_fmt": {
												"description": "Used to apply formatting codes to a CRLF delimited string that is displayed in an owner draw control on an Xdialog.",
												"arguments": [
													{
														"name": "input_list"
													},
													{
														"name": "format_style"
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											}
										}
									}
								},
								"p": {
									"__index__": {
										"a": {
											"a5_pack_set": {
												"description": "Packs the records in the tables of a set. Prompt for tablenames if silent if .f.",
												"arguments": [
													{
														"name": "setname"
													},
													{
														"name": "silent",
														"optional": true
													}
												]
											},
											"a5_pack_table": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "tablename"
													}
												]
											},
											"a5_pad_leading_tabs": {
												"description": "Inserts leading tabs in front of each line of a crlf delimited string",
												"arguments": [
													{
														"name": "input"
													},
													{
														"name": "tab_count"
													}
												]
											},
											"a5_paradoxconnstring": {
												"description": " Returns a connection string for a Paradox database given the path to the database",
												"arguments": [
													{
														"name": "path"
													}
												]
											},
											"a5_parray_from_string": {
												"description": "Creates a property array from a cr-lf delimeted string. Returns the size of the array.",
												"arguments": [
													{
														"name": "array_name"
													},
													{
														"name": "format_string"
													},
													{
														"name": "string"
													},
													{
														"name": "vars"
													}
												]
											},
											"a5_parse_toolbar": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "toolbar_string"
													}
												]
											},
											"a5_parse_toolbar_string": {
												"description": "Gets the horizontal, vertical and float version of a toolbar string that includes the Toolbar Macro Language",
												"arguments": [
													{
														"name": "toolbar_string"
													},
													{
														"name": "dialog_events",
														"optional": true
													},
													{
														"name": "dialog_init",
														"optional": true
													},
													{
														"name": "init",
														"optional": true
													}
												]
											},
											"a5_parse_top_x_filter": {
												"description": "Parses a filter expression and returns the top_x components",
												"arguments": [
													{
														"name": "filter"
													}
												]
											},
											"a5_passivelinktabledatasource": {
												"description": "Get the DataSource definition for a Passive Link Table",
												"arguments": [
													{
														"name": "tablename"
													}
												]
											},
											"a5_passivelinktabledefine": {
												"description": "Creates a new Passive Link Table. For syntax help specify \"Help\" as the first argument.",
												"arguments": [
													{
														"name": "datasourcedef"
													},
													{
														"name": "tablefilename",
														"optional": true
													},
													{
														"name": "showprogress",
														"optional": true
													},
													{
														"name": "allowcancel",
														"optional": true
													},
													{
														"name": "openconnection",
														"optional": true
													},
													{
														"name": "flagaddtabletodatabase",
														"optional": true
													}
												]
											},
											"a5_paste_actions": {
												"description": "Internal use only. Updates 'button_setup_actions' script with new addin definitions from Excel worksheet."
											},
											"a5_paste_all": {
												"description": "Pastes the appearance properties of all objects from the clipboard",
												"arguments": [
													{
														"name": "name"
													}
												]
											},
											"a5_paste_current_record": {
												"description": "Pastes data from the A5 Record Clipboard into current record",
												"arguments": [
													{
														"name": "tbl_pointer"
													}
												]
											},
											"a5_paste_from_clipboard": {
												"description": "Pastes an entry in the A5 Record clipboard into the record referenced by tbl_pointer. ",
												"arguments": [
													{
														"name": "tbl_pointer"
													},
													{
														"name": "field_list",
														"optional": true
													},
													{
														"name": "clip_indx",
														"optional": true
													}
												]
											},
											"a5_paste_new_record": {
												"description": "Pastes data from the A5 Record Clipboard as a new record",
												"arguments": [
													{
														"name": "tbl_pointer"
													}
												]
											},
											"a5_paste_special": {
												"description": "Displays the Paste Special Dialog (showing the contents of the A5 Record clipboard)",
												"arguments": [
													{
														"name": "tbl_pointer"
													}
												]
											},
											"a5_pasteselectedprops": {
												"description": "Pastes selected object properties from the clipboard.",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_path_relative": {
												"description": "Create a relative path from a base location and a file path.",
												"arguments": [
													{
														"name": "locpath"
													},
													{
														"name": "filepath"
													},
													{
														"name": "web",
														"optional": true
													}
												]
											}
										},
										"d": {
											"a5_pdf_combine": {
												"description": "Displays the user interface to combine multiple PDF files into a single PDF file."
											},
											"a5_pdf_encrypt": {
												"description": "Displays a dialog to encrypt a PDF file."
											},
											"a5_pdf_exporttohtml": {
												"description": "Displays a dialog to export a PDF file to a HTML file."
											},
											"a5_pdf_exporttortf": {
												"description": "Displays a dialog to export a PDF file to a RTF file."
											},
											"a5_pdf_exporttotext": {
												"description": "Displays a dialog to export a PDF file to a Text file."
											},
											"a5_pdf_frombitmap": {
												"description": "Displays a dialog to create a PDF file from a bitmap."
											},
											"a5_pdf_linearize": {
												"description": "Displays a dialog to linearize PDF file."
											},
											"a5_pdf_merge": {
												"description": "Displays a dialog to merge two PDF files."
											}
										},
										"o": {
											"a5_popupcolorpicker": {
												"description": "Popup color palettes.",
												"arguments": [
													{
														"name": "color",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "settings",
														"optional": true
													}
												]
											},
											"a5_popuptexteditor": {
												"description": "Popup editor to edit text strings",
												"arguments": [
													{
														"name": "title"
													},
													{
														"name": "text"
													}
												]
											},
											"a5_post_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_post_op_result": {
												"description": "Displays the Post Records result dialog box",
												"arguments": [
													{
														"name": "a_records_processed"
													},
													{
														"name": "a_records_total"
													},
													{
														"name": "a_records_violated"
													},
													{
														"name": "table_set_name",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											},
											"a5_post_toolbar": {
												"description": "Returns the system toolbar for Post Operation",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"r": {
											"__index__": {
												"e": {
													"a5_predefined_transformations": {
														"description": "Pre-defined transformations for the Code Editor"
													},
													"a5_preview_datasource": {
														"description": "Preview the records in a SQL DataSource",
														"arguments": [
															{
																"name": "cn"
															},
															{
																"name": "dstemp"
															}
														]
													}
												},
												"i": {
													"a5_print_genie": {
														"description": "Invokes the Print Genie which allows you to select which Layout to print, and what range of records"
													},
													"a5_printer_setup_options": {
														"description": "Promps user for printer setup options",
														"arguments": [
															{
																"name": "option_string",
																"optional": true
															},
															{
																"name": "printer",
																"optional": true
															}
														]
													}
												},
												"m": {
													"a5_prmpt_script_name": {
														"description": "Prompt for the name of a script or function to edit."
													}
												},
												"o": {
													"a5_productname": {
														"description": " Return the product name "
													},
													"a5_progresslist": {
														"description": "Displays a progress list. Function returns the name of the modeless dialog so you have a handle to which you can send events.",
														"arguments": [
															{
																"name": "pl"
															}
														]
													},
													"a5_prompt_files_in_db": {
														"description": "Prompts the user to select files in the current Database",
														"arguments": [
															{
																"name": "input_list",
																"optional": true
															}
														]
													},
													"a5_prompt_for_key": {
														"description": "Prompt for the name of a key or keystroke combination",
														"arguments": [
															{
																"name": "initial_key"
															}
														]
													},
													"a5_prompt_for_menuitem": {
														"description": "Prompts the user to select an item form a menu specified by menu_string (a P var created by a5_menu_def_strings())",
														"arguments": [
															{
																"name": "menu_strings"
															}
														]
													},
													"a5_prompt_for_tablename": {
														"description": "Prompt for a table name. Filter can be blank (all table tables), or a comma delimited list: Native,Passive,Active",
														"arguments": [
															{
																"name": "dlg_title",
																"optional": true
															},
															{
																"name": "default",
																"optional": true
															},
															{
																"name": "filter",
																"optional": true
															}
														]
													},
													"a5_prompt_layout_filter": {
														"description": "Called from Layout editors when user selects the \"Select records....\" command. "
													},
													"a5_prompt_local_tablename": {
														"description": "Prompts for the name of a new table.",
														"arguments": [
															{
																"name": "default_name",
																"optional": true
															},
															{
																"name": "warn",
																"optional": true
															},
															{
																"name": "specialmode",
																"optional": true
															}
														]
													},
													"a5_prompt_op_filter": {
														"description": "Called from Operation builders when user selects the \"Select records....\" command. Prompt for Operation filter/order"
													},
													"a5_prompt_special_filter": {
														"description": "Prompts for a filter and order expression",
														"arguments": [
															{
																"name": "filter"
															},
															{
																"name": "order"
															},
															{
																"name": "arguments",
																"optional": true
															}
														]
													},
													"a5_promptforarguments": {
														"description": "Takes an argument definition string (created by a5_definearguments()) and prompt for arguments. If arguments (of type sql::arguments) is passed in, then the argument object is populated.",
														"arguments": [
															{
																"name": "argstring"
															},
															{
																"name": "defaultvalues",
																"optional": true
															},
															{
																"name": "arguments",
																"optional": true
															}
														]
													},
													"a5_promptforoverwrite": {
														"description": " Prompt for the overwrite of a file.",
														"arguments": [
															{
																"name": "filename"
															}
														]
													},
													"a5_prop_toolbar_close": {
														"description": " closes text toolbar"
													},
													"a5_prop_toolbar_is_open": {
														"description": "Returns .t. if the Text toolbar is open"
													},
													"a5_prop_toolbar_toggle": {
														"description": "Toggles the Text toolbar on/off"
													},
													"a5_properties_dialog": {
														"description": "Called by layout editor to edit either object properties, or layout properties, depending on what has focus."
													},
													"a5_property_to_arguments": {
														"description": "Converts a dot variable to SQL Arguments",
														"arguments": [
															{
																"name": "p"
															},
															{
																"name": "args"
															}
														]
													},
													"a5_propgridxml_clear": {
														"description": "Clears cached PropGrid XML definitions",
														"arguments": [
															{
																"name": "id",
																"optional": true
															}
														]
													},
													"a5_propgridxml_get": {
														"description": "Gets the XML for a PropGrid from the PropGrid string.",
														"arguments": [
															{
																"name": "id"
															},
															{
																"name": "propgridstring"
															},
															{
																"name": "usecachedversion",
																"optional": true
															}
														]
													}
												}
											}
										},
										"u": {
											"a5_put_rec_on_clipboard": {
												"description": "Puts the current record (in the record referenced by tbl_pointer) on the A5 Record clipboard. ",
												"arguments": [
													{
														"name": "tbl_pointer"
													}
												]
											}
										}
									}
								},
								"q": {
									"a5_qb_sp_report_metadata_passivelink": {
										"description": "Returns metadata if a table is a QuickBooks SP Report Passive-Link table.",
										"arguments": [
											{
												"name": "table"
											}
										]
									},
									"a5_qbf_toolbar": {
										"description": "Returns the system toolbar for Query-by-Form View",
										"arguments": [
											{
												"name": "read_from_memory",
												"optional": true
											}
										]
									},
									"a5_qr_summary_default_label": {
										"description": "Generate a default report definition from quickreport definition ",
										"arguments": [
											{
												"name": "def"
											},
											{
												"name": "grpname"
											},
											{
												"name": "fldname"
											},
											{
												"name": "sumop"
											}
										]
									},
									"a5_qrb_createpassivelink_sp_report": {
										"description": "Create a passive-link table with data from a standard QuickBooks report.",
										"arguments": [
											{
												"name": "defaultreportname",
												"optional": true
											}
										]
									},
									"a5_qrybuilder_toolbar": {
										"description": "Returns the system toolbar for Query Builder",
										"arguments": [
											{
												"name": "read_from_memory",
												"optional": true
											}
										]
									},
									"a5_qualify_field": {
										"description": "Used in ADO Xdialog and HTML forms to qualify field and table names in an SQL Select statement",
										"arguments": [
											{
												"name": "fieldname"
											},
											{
												"name": "database_type",
												"optional": true
											},
											{
												"name": "flagexpressionallowed",
												"optional": true
											}
										]
									},
									"a5_qualify_filename": {
										"description": "Takes a filename, and qualifies it by adding missing drive and path designation (if necessary), relative to the current .ADB file. e.g. 'data.txt' becomes 'c:\\myapp\\data.txt'",
										"arguments": [
											{
												"name": "inputfilename"
											}
										]
									},
									"a5_querystring_process": {
										"description": "Processes the Query string portion of a URL. Removes all name value pairs in filter_parameters - a CRLF delimited list of name/value pairs that can include wildcard characters, and adds in new_parameters - a CRLF delimited list of name/value pairs. If flagEliminameEmptyValues = .t., then names with no values are removed from the query string. If flagPrefixQuestionMark = .t., then result if prefixed with \"?\" if it is non-blank.",
										"arguments": [
											{
												"name": "querystring"
											},
											{
												"name": "filter_parameters"
											},
											{
												"name": "new_parameters"
											},
											{
												"name": "flageliminameemptyvalues",
												"optional": true
											},
											{
												"name": "flagprefixquestionmark",
												"optional": true
											}
										]
									},
									"a5_quickimport": {
										"description": "Displays UI to import a file (excel or comma delimited ascii) into the current table.",
										"arguments": [
											{
												"name": "tablename",
												"optional": true
											}
										]
									},
									"a5_quickreportcolumnsizetofit": {
										"description": "Generate a report definition from quickreport definition ",
										"arguments": [
											{
												"name": "def"
											},
											{
												"name": "fieldname"
											}
										]
									},
									"a5_quickreportcreatereportdefinition": {
										"description": "Generate a report definition from quickreport definition ",
										"arguments": [
											{
												"name": "def"
											},
											{
												"name": "keepdictionary",
												"optional": true
											},
											{
												"name": "pdict",
												"optional": true
											}
										]
									},
									"a5_quickreportstylesheetenum": {
										"description": "Get stylesheets for title",
										"arguments": [
											{
												"name": "dlg_title"
											}
										]
									},
									"a5_quickreportstylesheetrender": {
										"description": "Render quickdraw for a stylesheet",
										"arguments": [
											{
												"name": "width"
											},
											{
												"name": "height"
											},
											{
												"name": "data"
											},
											{
												"name": "format"
											}
										]
									}
								},
								"r": {
									"__index__": {
										"e": {
											"__index__": {
												"a": {
													"a5_read_write_dictionary": {
														"description": "Reads or Writes a record to a data dictionary",
														"arguments": [
															{
																"name": "title"
															},
															{
																"name": "method"
															},
															{
																"name": "type"
															},
															{
																"name": "name"
															},
															{
																"name": "data",
																"optional": true
															},
															{
																"name": "dictionary_name",
																"optional": true
															},
															{
																"name": "allow_delete",
																"optional": true
															},
															{
																"name": "preview_button",
																"optional": true
															}
														]
													}
												},
												"c": {
													"a5_rec_clip_has_data": {
														"description": "Returns .t. if the Alpha Five record clipboard has any data on it."
													},
													"a5_recent_databases": {
														"description": "Returns a string in a menu format of the most recently used databases. Long file names are trimmed.",
														"arguments": [
															{
																"name": "from_memory",
																"optional": true
															}
														]
													},
													"a5_reconstruct_tbr": {
														"description": "Takes a parsed toolbar string and recontructs it in a form useful for a5_show_toolbars()",
														"arguments": [
															{
																"name": "p_parsed_toolbar"
															}
														]
													},
													"a5_recorder_toolbar": {
														"description": "Returns the Script Recorder toolbar strings"
													},
													"a5_records_undelete": {
														"description": " Call the Undelete Records dialog",
														"arguments": [
															{
																"name": "ctable"
															}
														]
													}
												},
												"f": {
													"a5_refreshactivelinkdialog": {
														"description": "Refresh an active-link table definition. If 'tablename' is null, then prompts for list of tables to refresh.",
														"arguments": [
															{
																"name": "tablename",
																"optional": true
															}
														]
													},
													"a5_refreshpassivelinkset": {
														"description": "Refreshes the data in a set that is built on one or more passive-link tables. Returns .HasError, .ErrorText and .UserCancelled",
														"arguments": [
															{
																"name": "setname"
															},
															{
																"name": "promptforoverwrite",
																"optional": true
															}
														]
													},
													"a5_refreshpassivelinktable": {
														"description": "Updates the data in a Passive-Link Table.",
														"arguments": [
															{
																"name": "tablename"
															},
															{
																"name": "flagreportresults",
																"optional": true
															},
															{
																"name": "promptforoverwrite",
																"optional": true
															},
															{
																"name": "arguments",
																"optional": true
															},
															{
																"name": "otheroptions",
																"optional": true
															},
															{
																"name": "openconnection",
																"optional": true
															},
															{
																"name": "suppresserrormessages",
																"optional": true
															},
															{
																"name": "showprogress",
																"optional": true
															},
															{
																"name": "allowcancel",
																"optional": true
															}
														]
													},
													"a5_refreshpassivelinktabledialog": {
														"description": "Displays a dialog to select which passive-link tables to refresh",
														"arguments": [
															{
																"name": "mode",
																"optional": true
															}
														]
													}
												},
												"g": {
													"a5_regexfilename": {
														"description": "Returns the name of the file used to store a history of regular expressions"
													},
													"a5_registration_license_inuse": {
														"description": "Return the number of users logged in via a .muf file, optional license key if checking a *different* installation (for example runtime).",
														"arguments": [
															{
																"name": "filename"
															},
															{
																"name": "serial_start",
																"optional": true
															},
															{
																"name": "count",
																"optional": true
															}
														]
													},
													"a5_registration_specify_cards": {
														"description": "List of cards to load.",
														"arguments": [
															{
																"name": "hardcards"
															}
														]
													},
													"a5_registration_specify_edition": {
														"description": "Edition name.",
														"arguments": [
															{
																"name": "edition"
															}
														]
													},
													"a5_registration_specify_keys": {
														"description": "Remember the license keys (format is up to the startup.aex).",
														"arguments": [
															{
																"name": "registration_keys"
															}
														]
													},
													"a5_registration_specify_runtime_unlimited": {
														"description": "No limit on users."
													},
													"a5_registration_user_add": {
														"description": "Add a serial starting # plus a count.",
														"arguments": [
															{
																"name": "serial_start"
															},
															{
																"name": "count"
															}
														]
													}
												},
												"l": {
													"a5_release_notes": {}
												},
												"m": {
													"a5_remote_debugger_agent_set": {
														"description": "set debugger agent state",
														"arguments": [
															{
																"name": "enable"
															},
															{
																"name": "debugerror",
																"optional": true
															},
															{
																"name": "debugsecret",
																"optional": true
															}
														]
													},
													"a5_remove_curly_brackets": {
														"description": "Remove curly brackets from a string",
														"arguments": [
															{
																"name": "text"
															}
														]
													},
													"a5_remove_quotes": {
														"description": " Unquotes string if string is quoted, else does nothing. ",
														"arguments": [
															{
																"name": "string"
															}
														]
													},
													"a5_remove_recs_genie": {
														"description": "Displays the Remove Records genie",
														"arguments": [
															{
																"name": "primary_table",
																"optional": true
															},
															{
																"name": "remove_list",
																"optional": true
															},
															{
																"name": "primary_table_key",
																"optional": true
															},
															{
																"name": "transaction_table_key",
																"optional": true
															},
															{
																"name": "silent",
																"optional": true
															}
														]
													},
													"a5_removescripttags": {
														"description": "Removes <script> tags from HTML text.",
														"arguments": [
															{
																"name": "html"
															}
														]
													},
													"a5_removetrailingbackslash": {
														"description": "Removes a trailing backslash to a string if it has one",
														"arguments": [
															{
																"name": "string"
															}
														]
													}
												},
												"p": {
													"a5_repair_set_structure": {
														"description": "Repair the structure of a set if one or more of the tables in the set have been moved to different locations.",
														"arguments": [
															{
																"name": "setname"
															}
														]
													},
													"a5_report_save_as": {
														"description": "Called by the File/Save As.. menu in Print Preview"
													},
													"a5_reporteditor_toolbar": {
														"description": "Returns the system toolbar for Report Editor",
														"arguments": [
															{
																"name": "read_from_memory",
																"optional": true
															}
														]
													}
												},
												"q": {
													"a5_request_activation": {
														"description": "Display the Request and Activation Key dialog"
													}
												},
												"s": {
													"a5_resolveconnectionstring": {
														"description": "Resolves a named AlphaDAO connection string",
														"arguments": [
															{
																"name": "cs"
															}
														]
													},
													"a5_resource_info": {
														"description": "use WMI to find out what resources are being used by the specified process",
														"arguments": [
															{
																"name": "process_name_or_id",
																"optional": true
															},
															{
																"name": "computer",
																"optional": true
															}
														]
													}
												}
											}
										},
										"f": {
											"a5_rfc1123date": {
												"description": "Converts a date string to an RFC 1123 formatted date (Day, dd Month yyyy hh:mm:ss TIMEZONE)",
												"arguments": [
													{
														"name": "date"
													}
												]
											},
											"a5_rfc822date": {
												"description": "Converts a date string to an RFC 822 formatted date (Day, dd Month yy hh:mm:ss TIMEZONE)",
												"arguments": [
													{
														"name": "date"
													}
												]
											},
											"a5_rfc850date": {
												"description": "Converts a date string to an RFC 850 formatted date (Weekday, dd-Mon-yy hh:mm:ss TIMEZONE)",
												"arguments": [
													{
														"name": "date"
													}
												]
											}
										},
										"t": {
											"a5_rtf_context_menu": {
												"description": "RTF Context menu",
												"arguments": [
													{
														"name": "readonly_flags",
														"optional": true
													}
												]
											},
											"a5_rtf_edit_menu": {
												"description": "Generates a dynamic menu snippet depending on the class of the current object",
												"arguments": [
													{
														"name": "context",
														"optional": true
													}
												]
											},
											"a5_rtf_editor": {
												"description": "Displays an RTF editor to edit an RTF text object.",
												"arguments": [
													{
														"name": "fp"
													},
													{
														"name": "rtftitle",
														"optional": true
													},
													{
														"name": "linklist",
														"optional": true
													},
													{
														"name": "linkeditor",
														"optional": true
													},
													{
														"name": "readonly",
														"optional": true
													},
													{
														"name": "cursor_position",
														"optional": true
													}
												]
											},
											"a5_rtf_editor2": {
												"description": "Displays an RTF editor to edit an RTF text object.",
												"arguments": [
													{
														"name": "fp"
													},
													{
														"name": "rtftitle",
														"optional": true
													},
													{
														"name": "linklist",
														"optional": true
													},
													{
														"name": "linkeditor",
														"optional": true
													},
													{
														"name": "readonly",
														"optional": true
													},
													{
														"name": "cursor_position",
														"optional": true
													},
													{
														"name": "showfield",
														"optional": true
													}
												]
											},
											"a5_rtf_editor_object": {
												"description": "Called when user clicks the Pencil icon in Browse mode, and the browse is in view mode (i.e. the memo editor is not open for editing - e.g. it is a readonly memo).",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_rtf_export": {
												"description": "Used on the Edit menu in Form/Browse to export RTF data to a file.",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_rtf_find": {
												"description": "Brings up the RTF search/replace dialog in RTF static editor",
												"arguments": [
													{
														"name": "rtf_obj"
													}
												]
											},
											"a5_rtf_import": {
												"description": "Used on the Edit menu in Form/Browse to import RTF data into a field.",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_rtf_insert_expression": {
												"description": "Inserts an Expression into a Static RTF Object. For Internal Use Only.",
												"arguments": [
													{
														"name": "default_expression",
														"optional": true
													}
												]
											},
											"a5_rtf_insert_pagebreak": {
												"description": "Inserts a Page Break into a Static RTF Object. For Internal Use Only."
											},
											"a5_rtf_static_tbar_open": {
												"description": " Launches the RTF editor toolbar for static RTF objects.",
												"arguments": [
													{
														"name": "field_name"
													}
												]
											},
											"a5_rtf_toolbar_close": {
												"description": " closes RTF editor toolbar"
											},
											"a5_rtf_toolbar_launch": {
												"description": " Launches the RTF editor toolbar",
												"arguments": [
													{
														"name": "field_name"
													}
												]
											},
											"a5_rtn_field_rules_tbar": {
												"description": "Returns the 'Return to Field Rules' toolbar. ",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_rtn_index_blder_tbar": {
												"description": "Returns the 'Return to Index Builder' toolbar. ",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_rtn_set_editor_tbar": {
												"description": "Returns the 'Return to Field Rules' toolbar. ",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_rtn_table_editor_tbar": {
												"description": "Returns the 'Return to Table Editor' toolbar. ",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"u": {
											"a5_rules_editor_toolbar": {
												"description": "Returns the system toolbar for Field Rules Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_run_javascript": {
												"description": "Evaluates Javascript code and returns the result",
												"arguments": [
													{
														"name": "javascriptcode"
													}
												]
											},
											"a5_run_op_genie": {
												"description": "Displays the Run Operation Genie when you right click on an Operation name in the Control Panel",
												"arguments": [
													{
														"name": "current_object"
													}
												]
											},
											"a5_run_vbscript": {
												"description": "Evaluates VBScript code and returns the result",
												"arguments": [
													{
														"name": "vbscriptcode"
													}
												]
											},
											"a5_runimagemagiccommand": {
												"description": "Transforms an image using ImageMagic. Command is an ImageMagic transform command e.g. -resize 800x300",
												"arguments": [
													{
														"name": "filein"
													},
													{
														"name": "fileout"
													},
													{
														"name": "command"
													}
												]
											}
										}
									}
								},
								"s": {
									"__index__": {
										"3": {
											"a5_s3documentsurl": {
												"description": "Returns a URL for documents on S3",
												"arguments": [
													{
														"name": "path",
														"optional": true
													}
												]
											},
											"a5_s3downloadsurl": {
												"description": "Returns a URL for downloads on S3",
												"arguments": [
													{
														"name": "path",
														"optional": true
													},
													{
														"name": "flagnocloudfront",
														"optional": true
													}
												]
											}
										},
										"a": {
											"a5_sass_string": {
												"arguments": [
													{
														"name": "txtin"
													},
													{
														"name": "flagstrict",
														"optional": true
													},
													{
														"name": "flagreturnerrors",
														"optional": true
													}
												]
											},
											"a5_save_bitmap_to_dict": {
												"description": "Saves a blob variable to the dictionary as a names bitmap",
												"arguments": [
													{
														"name": "blob"
													},
													{
														"name": "name"
													},
													{
														"name": "dictionary_filename",
														"optional": true
													}
												]
											},
											"a5_save_query": {
												"description": "Prompts for the name of a query",
												"arguments": [
													{
														"name": "dlg_title"
													},
													{
														"name": "method"
													},
													{
														"name": "table_set_name"
													}
												]
											},
											"a5_save_script": {
												"description": "Saves text as a script. If favorites_prompt = .t., then allows user to put script on Favorites list (only if in context of a Layout)",
												"arguments": [
													{
														"name": "script_code"
													},
													{
														"name": "favorites_prompt"
													}
												]
											},
											"a5_saveapplicationdata": {
												"description": " Save application-specific data",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "adata"
													},
													{
														"name": "key",
														"optional": true
													}
												]
											},
											"a5_saveas_formats_help": {
												"description": "Bubble help list of file/save as formats."
											},
											"a5_savetransformhistory": {
												"description": " Save the transform history to a file",
												"arguments": [
													{
														"name": "historystring"
													}
												]
											}
										},
										"c": {
											"a5_scale_imageblob": {
												"description": "Scales an image blob. Input and output supported image types: .png, .jpg, .jpeg, .bmp. Scale is a decimal number. e.g. .5 = 50% of original size, 1.5 is 150% of original size. If scale is set to 0 you can specify maxSize - the dimension in inches or pixels of the height, width, or maximum dimension of the image. Units is 'inches' or 'pixels'. AppliesTo is 'Max', 'Width' or 'Height'.",
												"arguments": [
													{
														"name": "blobin"
													},
													{
														"name": "blobtypein"
													},
													{
														"name": "blobtypeout"
													},
													{
														"name": "scale"
													},
													{
														"name": "maxsize",
														"optional": true
													},
													{
														"name": "units",
														"optional": true
													},
													{
														"name": "appliesto",
														"optional": true
													},
													{
														"name": "scalemethod",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "flagoktouseimagemagic",
														"optional": true
													}
												]
											},
											"a5_scale_imagefile": {
												"description": "Scales an image file. Input and output supported filetypes: .png, .jpg, .jpeg, .bmp. Scale is a decimal number. e.g. .5 = 50% of original size, 1.5 is 150% of original size. If scale is set to 0 you can specify maxSize - the dimension in inches or pixels of the height, width, or maximum dimension of the image. Units is 'inches' or 'pixels'. AppliesTo is 'Max', 'Width' or 'Height'.)",
												"arguments": [
													{
														"name": "filenamein"
													},
													{
														"name": "filenameout"
													},
													{
														"name": "scale"
													},
													{
														"name": "maxsize",
														"optional": true
													},
													{
														"name": "units",
														"optional": true
													},
													{
														"name": "appliesto",
														"optional": true
													},
													{
														"name": "scalemethod",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "flagoktouseimagemagic",
														"optional": true
													}
												]
											},
											"a5_scaleimagefileusingimagemagic": {
												"description": "Scales an image file using ImageMagic. The scaleCommand is created using this function: a5wcb_scaleImagePrompt(\"\")",
												"arguments": [
													{
														"name": "imagefilenamein"
													},
													{
														"name": "imagefilenameout"
													},
													{
														"name": "scalecommand"
													},
													{
														"name": "flagexecutecommand",
														"optional": true
													}
												]
											},
											"a5_script_create_new": {
												"description": "Create a new script or function. If the specified name exits, the existing script or function is deleted. If editor_style is Xbasic or Genie",
												"arguments": [
													{
														"name": "script_name"
													},
													{
														"name": "type"
													},
													{
														"name": "editor_style"
													},
													{
														"name": "default_text"
													}
												]
											},
											"a5_script_favorites": {
												"description": "Script Favorites. Mode = \"play\", \"save\", \"manage\", \"Toolbar\", \"pick-list\", \"dialog\"",
												"arguments": [
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "data",
														"optional": true
													}
												]
											},
											"a5_script_favorites_menu": {
												"description": "Generates a string to add favorites to the Scripts menus in Froms and Browses"
											},
											"a5_script_rename": {
												"description": "Displays the Script/UDF Re-Name Dialog for the script or function that is currently selected in the control panel."
											},
											"a5_scripteditor_popup": {
												"description": "Pop up script editor. Returns .text and .lastbutton properties",
												"arguments": [
													{
														"name": "starting_code_pointer"
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "modal",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "parent_dialog_title",
														"optional": true
													}
												]
											},
											"a5_scriptgenie_multistep": {
												"description": "Pop up script genie that allows the user to select multiple actions. Returns .code and .lastbutton properties",
												"arguments": [
													{
														"name": "form_name"
													},
													{
														"name": "starting_code",
														"optional": true
													},
													{
														"name": "modal",
														"optional": true
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "height_condition",
														"optional": true
													}
												]
											},
											"a5_scriptgenie_multistp2": {
												"description": "Pop up script genie that allows the user to select multiple actions. Returns .code and .lastbutton properties",
												"arguments": [
													{
														"name": "form_name"
													},
													{
														"name": "sg_pointer"
													},
													{
														"name": "starting_code",
														"optional": true
													},
													{
														"name": "modal",
														"optional": true
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "height",
														"optional": true
													},
													{
														"name": "height_condition",
														"optional": true
													},
													{
														"name": "parent_dialog_title",
														"optional": true
													},
													{
														"name": "flagallowstretch",
														"optional": true
													}
												]
											}
										},
										"e": {
											"__index__": {
												"c": {
													"a5_secencryptpwd": {
														"description": " Encrypt a password",
														"arguments": [
															{
																"name": "password"
															},
															{
																"name": "encryptpassword",
																"optional": true
															}
														]
													},
													"a5_secgrouphaspermission": {
														"description": " Check if a named group has permission to an object",
														"arguments": [
															{
																"name": "groupname"
															},
															{
																"name": "name"
															},
															{
																"name": "class"
															},
															{
																"name": "permission"
															}
														]
													},
													"a5_security_option": {
														"description": "Invokes one of the security menu options. Option matches the wording on the menu. e.g. \"Set Database Password\"",
														"arguments": [
															{
																"name": "option"
															}
														]
													}
												},
												"l": {
													"a5_select_field_value": {
														"description": "Displays a dialog or dropdown showing field values from a field in a table",
														"arguments": [
															{
																"name": "table_name"
															},
															{
																"name": "field_name"
															},
															{
																"name": "starting_record",
																"optional": true
															},
															{
																"name": "record_fetch_count",
																"optional": true
															},
															{
																"name": "mode",
																"optional": true
															}
														]
													},
													"a5_select_field_value2": {
														"description": "Wrapper around the a5_select_field_value() function, but returns a \"C\" rather than a \"P\" value.",
														"arguments": [
															{
																"name": "table_name"
															},
															{
																"name": "field_name"
															}
														]
													},
													"a5_select_fieldname": {
														"description": "Used in expression builder to prompt for a field name.",
														"arguments": [
															{
																"name": "table_set_names"
															},
															{
																"name": "field_selected",
																"optional": true
															},
															{
																"name": "field_value",
																"optional": true
															},
															{
																"name": "reference_table",
																"optional": true
															},
															{
																"name": "tablealiasdialogtitle",
																"optional": true
															},
															{
																"name": "set_parent_level",
																"optional": true
															}
														]
													},
													"a5_select_fields_multi": {
														"description": "Returns a crlf delimited list of fields selected from a table or a set",
														"arguments": [
															{
																"name": "table_setname"
															},
															{
																"name": "field_list"
															},
															{
																"name": "dialog_box_title",
																"optional": true
															},
															{
																"name": "help_text",
																"optional": true
															}
														]
													},
													"a5_select_key_value": {
														"description": "Displays a dialog or dropdown showing field values from a field in a table",
														"arguments": [
															{
																"name": "table_name"
															},
															{
																"name": "key_expression"
															},
															{
																"name": "mode",
																"optional": true
															},
															{
																"name": "default_value",
																"optional": true
															}
														]
													},
													"a5_select_script_action": {
														"description": "Prompts the user for a Action Script Category and Action",
														"arguments": [
															{
																"name": "mode",
																"optional": true
															},
															{
																"name": "reloadactionlist",
																"optional": true
															}
														]
													},
													"a5_selected_property_set": {
														"description": "Sets the specified property for all currently selected objects on the layout, pForm.",
														"arguments": [
															{
																"name": "cproperty"
															},
															{
																"name": "value"
															},
															{
																"name": "pform"
															}
														]
													},
													"a5_selected_records": {
														"description": "Takes a comma delimited list of records, and record ranges, and returns a list of record numbers. e.g. 1,5-7,11 becomes 1,2,5,6,7,11",
														"arguments": [
															{
																"name": "record_list"
															}
														]
													},
													"a5_selectmultifields": {
														"description": "Select a crlf delimited list of fields from a crlf delimited list of tablenames",
														"arguments": [
															{
																"name": "tablelist"
															},
															{
																"name": "selected_fields",
																"optional": true
															}
														]
													},
													"a5_selectwinusers": {
														"description": " Dialog to select users from a windows machine or domain, type can be \"user\", \"group\", or \"computer\"",
														"arguments": [
															{
																"name": "type",
																"optional": true
															}
														]
													}
												},
												"n": {
													"a5_send_db_dialog": {
														"description": "Opens the Zip Database dialog box"
													},
													"a5_sendexportorprint_code": {
														"description": "Displays a dialog to export, print or email code.",
														"arguments": [
															{
																"name": "currentselected",
																"optional": true
															},
															{
																"name": "cmode",
																"optional": true
															}
														]
													}
												},
												"r": {
													"a5_serverside_findbykey": {
														"description": "Used when Find by Key command is invoked for an active-link table. Does a server-side query.",
														"arguments": [
															{
																"name": "playout"
															},
															{
																"name": "searchforvalue",
																"optional": true
															},
															{
																"name": "initialkey",
																"optional": true
															}
														]
													},
													"a5_serverside_query_genie": {
														"description": "Opens the server-side filter/order builder for a form/browse that is based on an active-link table.",
														"arguments": [
															{
																"name": "pformorbrowse",
																"optional": true
															}
														]
													},
													"a5_serversidesavedqueryrun": {
														"description": "Run a saved server side query",
														"arguments": [
															{
																"name": "tbl"
															},
															{
																"name": "savedqueryname"
															},
															{
																"name": "additive",
																"optional": true
															}
														]
													}
												},
												"s": {
													"a5_session_vars_restore": {
														"description": "Restores all of the session variables from a string",
														"arguments": [
															{
																"name": "session_handle"
															},
															{
																"name": "session_vars"
															}
														]
													},
													"a5_session_vars_store": {
														"description": "Copies all of the session variables to a string that can be restores using a5_session_vars_restore() ",
														"arguments": [
															{
																"name": "session_handle"
															}
														]
													}
												},
												"t": {
													"a5_set_editor2": {
														"description": "Modal set editor.",
														"arguments": [
															{
																"name": "setname"
															}
														]
													},
													"a5_set_editor_toolbar": {
														"description": "Returns the system toolbar for Set Editor",
														"arguments": [
															{
																"name": "read_from_memory",
																"optional": true
															}
														]
													},
													"a5_set_in_use": {
														"description": "Returns .t. if the specified set is currently open.",
														"arguments": [
															{
																"name": "setname"
															}
														]
													},
													"a5_set_op_generic": {
														"description": "Type is pack, empty, or undelete. called by a5_pack_set(), a5_zap_set() and a5_undelete_set()",
														"arguments": [
															{
																"name": "type"
															},
															{
																"name": "setname"
															},
															{
																"name": "silent",
																"optional": true
															}
														]
													},
													"a5_set_property_multi": {
														"description": "Sets a property for all of the objects in a crlf delimited list of objects",
														"arguments": [
															{
																"name": "object_names"
															},
															{
																"name": "property_name"
															},
															{
																"name": "value"
															},
															{
																"name": "value_type"
															},
															{
																"name": "add_property",
																"optional": true
															}
														]
													},
													"a5_setamyuniprops": {
														"description": "Displays dialog to set options for the Alpha Five Printer PDF/HTML/RTF or Text printer drivers.",
														"arguments": [
															{
																"name": "type"
															},
															{
																"name": "current_props",
																"optional": true
															},
															{
																"name": "mode",
																"optional": true
															}
														]
													},
													"a5_setappversionnumber": {
														"description": "Sets the version number of the Application",
														"arguments": [
															{
																"name": "number"
															}
														]
													},
													"a5_sets_enum": {
														"description": "Returns a list of table names. If table name is not unique it is fully qualified, otherwise not."
													},
													"a5_settwofactorauthenticationsettings": {
														"description": "Sets the two factor authentication settings for a user. The settings are supplied in a JSON format.",
														"arguments": [
															{
																"name": "userid"
															},
															{
																"name": "json"
															}
														]
													}
												}
											}
										},
										"h": {
											"a5_short_type_to_long": {
												"description": "Converts a short data type to a long type - e.g. 'c' to 'characer'. If type = 'list' shows all available data types.",
												"arguments": [
													{
														"name": "type"
													}
												]
											},
											"a5_shorten_fn": {
												"description": "intelligently shortens a filename",
												"arguments": [
													{
														"name": "filename"
													},
													{
														"name": "length",
														"optional": true
													}
												]
											},
											"a5_shorten_url": {
												"description": "intelligently shortens a URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "length",
														"optional": true
													}
												]
											},
											"a5_show_function_def": {
												"description": "Shows the definition of the function at the current cursor location in a popup window.",
												"arguments": [
													{
														"name": "obj"
													}
												]
											},
											"a5_show_html": {
												"description": "Displays HTML text in a Dialog box",
												"arguments": [
													{
														"name": "htmltxt"
													},
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "flaguseshellexplorer",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													},
													{
														"name": "flagshowsourcetab",
														"optional": true
													},
													{
														"name": "defaulttab",
														"optional": true
													},
													{
														"name": "flagusechrome",
														"optional": true
													},
													{
														"name": "opendevtools",
														"optional": true
													}
												]
											},
											"a5_show_htmlchrome": {
												"description": "Displays html content using chrome.",
												"arguments": [
													{
														"name": "html"
													},
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "stylename",
														"optional": true
													},
													{
														"name": "loadalphajslibraries",
														"optional": true
													},
													{
														"name": "poptions",
														"optional": true
													},
													{
														"name": "flagopendevtools",
														"optional": true
													}
												]
											},
											"a5_show_mru_query": {
												"description": "Show the most recent query for table or set",
												"arguments": [
													{
														"name": "table_set"
													}
												]
											},
											"a5_show_set_info": {
												"description": "Show information about a set's structure",
												"arguments": [
													{
														"name": "setname"
													}
												]
											},
											"a5_show_toolbars": {
												"description": "Takes a specially formatted toolbar string and displays a toolbar that can be docked horizontally, vertically, or floating",
												"arguments": [
													{
														"name": "dlg_title"
													},
													{
														"name": "dialog_body"
													},
													{
														"name": "dialog_events",
														"optional": true
													},
													{
														"name": "dialog_init",
														"optional": true
													},
													{
														"name": "init",
														"optional": true
													}
												]
											},
											"a5_show_toolbars_local": {
												"description": "Takes a specially formatted toolbar string and displays a toolbar that can be docked horizontally, vertically, or floating",
												"arguments": [
													{
														"name": "vars"
													},
													{
														"name": "dlg_title"
													},
													{
														"name": "dialog_body"
													},
													{
														"name": "dialog_events",
														"optional": true
													},
													{
														"name": "dialog_init",
														"optional": true
													},
													{
														"name": "init",
														"optional": true
													}
												]
											},
											"a5_show_url": {
												"description": "Opens a live browser window showing the contents of a URL.",
												"arguments": [
													{
														"name": "target_url"
													},
													{
														"name": "title",
														"optional": true
													},
													{
														"name": "widthininches",
														"optional": true
													},
													{
														"name": "heightininches",
														"optional": true
													},
													{
														"name": "resizeable",
														"optional": true
													}
												]
											},
											"a5_showadoxdialog": {
												"description": "Displays an Xdialog created by the 'ADO Xdialog Form' Action Scripting Genie. Function parameters allow user to override certain properties defined in the ADO Form.",
												"arguments": [
													{
														"name": "formname"
													},
													{
														"name": "properties",
														"optional": true
													}
												]
											},
											"a5_showclipboard": {
												"description": "Show the text currently on the clipboard."
											},
											"a5_showemailsettings": {
												"description": "Display the settings for the email_send_noprofile() function.",
												"arguments": [
													{
														"name": "flagshowdatainpopupwindow",
														"optional": true
													}
												]
											},
											"a5_showpopuphelp": {
												"description": "Popup help dialog.",
												"arguments": [
													{
														"name": "title"
													},
													{
														"name": "content"
													},
													{
														"name": "ishtml",
														"optional": true
													},
													{
														"name": "closeonleave",
														"optional": true
													},
													{
														"name": "dlgevents",
														"optional": true
													},
													{
														"name": "position",
														"optional": true
													}
												]
											}
										},
										"i": {
											"a5_simple_code_editor": {
												"description": "Code editor. Type = Layout, Script, Function",
												"arguments": [
													{
														"name": "name"
													},
													{
														"name": "type"
													},
													{
														"name": "modal",
														"optional": true
													}
												]
											},
											"a5_simpleargumentdefinition": {
												"description": "Used to define Arguments using a simplified syntax: CRLF or comma delimited list of form :argname|type, or :argname|type|defaultvalue",
												"arguments": [
													{
														"name": "argstring"
													},
													{
														"name": "argprefix",
														"optional": true
													}
												]
											},
											"a5_sizetabletofit": {
												"description": "Analyzes the size of the data in a table and restructures the table so that each field is the minimum required size.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "pad_character_field_width",
														"optional": true
													},
													{
														"name": "pad_numeric_field_width",
														"optional": true
													},
													{
														"name": "pad_numeric_field_decimals",
														"optional": true
													},
													{
														"name": "create_backup",
														"optional": true
													}
												]
											}
										},
										"p": {
											"a5_spellcheck": {
												"description": "Launches the spell checker for the specified layout pointer. Mode is 'all', 'field', 'record', or 'field_list:field1,field2,field3,fieldn'",
												"arguments": [
													{
														"name": "layout_ptr"
													},
													{
														"name": "spell_check_mode",
														"optional": true
													}
												]
											},
											"a5_spellcheckfield": {
												"description": "Launches the spell checker, checking the current field in all records",
												"arguments": [
													{
														"name": "layout_ptr"
													}
												]
											},
											"a5_spellcheckstring": {
												"description": "Spell check a text string or a rtf text string. For RTF, must supply plain_text and rtf_text strings.",
												"arguments": [
													{
														"name": "string"
													},
													{
														"name": "string_type",
														"optional": true
													},
													{
														"name": "string_rtf",
														"optional": true
													},
													{
														"name": "show_done_button",
														"optional": true
													},
													{
														"name": "ignore_words",
														"optional": true
													},
													{
														"name": "replace_all_words",
														"optional": true
													}
												]
											},
											"a5_split_url": {
												"description": "Splits a URL into its components",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "urlencode",
														"optional": true
													}
												]
											}
										},
										"q": {
											"__index__": {
												"l": {
													"__index__": {
														"_": {
															"__index__": {
																"a": {
																	"a5_sql_addcolumnstoselect": {
																		"description": "Add columns to a sql select statement.",
																		"arguments": [
																			{
																				"name": "sql"
																			},
																			{
																				"name": "columns"
																			},
																			{
																				"name": "flagdatapassiniscrlf",
																				"optional": true
																			},
																			{
																				"name": "flagremoveexistingcolumns",
																				"optional": true
																			},
																			{
																				"name": "allowduplicatefields",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_addfilterorder": {
																		"description": "Adds a filter to the WHERE clause of an SQL statement, and sets the ORDER BY clause",
																		"arguments": [
																			{
																				"name": "sql_statement"
																			},
																			{
																				"name": "filter1"
																			},
																			{
																				"name": "filter2",
																				"optional": true
																			},
																			{
																				"name": "order",
																				"optional": true
																			},
																			{
																				"name": "flagremoveexistingfilter",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_arguments_dump": {
																		"description": "Dumps data in an sql::arguments object to a string. Can use a5_sql_arguments_load() to load arguments from this string.",
																		"arguments": [
																			{
																				"name": "args"
																			}
																		]
																	},
																	"a5_sql_arguments_load": {
																		"description": "Load sql::arguments from a string created by a5_sql_arguments_dump().",
																		"arguments": [
																			{
																				"name": "args"
																			},
																			{
																				"name": "argdef"
																			}
																		]
																	}
																},
																"b": {
																	"a5_sql_builder_simple": {
																		"description": "Displays a dialog allowing a user to create a SQL SELECT by checking a list of fields. User can switch to the full SQL Query Builder genie.",
																		"arguments": [
																			{
																				"name": "connstring"
																			},
																			{
																				"name": "sqlselect"
																			},
																			{
																				"name": "sqltype"
																			},
																			{
																				"name": "sqlarguments"
																			},
																			{
																				"name": "basetablename",
																				"optional": true
																			}
																		]
																	}
																},
																"c": {
																	"a5_sql_cache_datafilename": {
																		"description": "Returns the name of the cached data file for a SQL Datasource, based on the Datasource's GUID. Optionally returns .exists and .timestamp properties.",
																		"arguments": [
																			{
																				"name": "guid"
																			},
																			{
																				"name": "checkifexists",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_commandwindow": {
																		"description": "Opens the SQL command window",
																		"arguments": [
																			{
																				"name": "connections",
																				"optional": true
																			},
																			{
																				"name": "defaultconnection",
																				"optional": true
																			},
																			{
																				"name": "windowstyle",
																				"optional": true
																			}
																		]
																	}
																},
																"d": {
																	"a5_sql_droptables": {
																		"description": "Displays a dialog allowing a user to select multiple tables from a database to be dropped.",
																		"arguments": [
																			{
																				"name": "cs"
																			},
																			{
																				"name": "arr_result",
																				"optional": true
																			},
																			{
																				"name": "flagtables",
																				"optional": true
																			},
																			{
																				"name": "flagviews",
																				"optional": true
																			},
																			{
																				"name": "flaglinkedtables",
																				"optional": true
																			},
																			{
																				"name": "flagsynonyms",
																				"optional": true
																			},
																			{
																				"name": "flagaliases",
																				"optional": true
																			}
																		]
																	}
																},
																"e": {
																	"a5_sql_extractorder": {
																		"description": "Extracts the ORDER BY clause from a SQL SELECT statement.",
																		"arguments": [
																			{
																				"name": "sql"
																			}
																		]
																	}
																},
																"f": {
																	"a5_sql_filter_buildergenie": {
																		"description": "Build a WHERE clause for a SQL table.",
																		"arguments": [
																			{
																				"name": "connectionorconnectionstring"
																			},
																			{
																				"name": "table"
																			},
																			{
																				"name": "filter"
																			},
																			{
																				"name": "arguments",
																				"optional": true
																			},
																			{
																				"name": "opsin",
																				"optional": true
																			}
																		]
																	}
																},
																"g": {
																	"a5_sql_generate_select2": {
																		"description": " Generate a syntax-specific Select statement.  Wraps A5_SQLGenerate_Select() and adds the columns, filter, and order",
																		"arguments": [
																			{
																				"name": "syntax"
																			},
																			{
																				"name": "format"
																			},
																			{
																				"name": "data"
																			},
																			{
																				"name": "columns"
																			},
																			{
																				"name": "filter",
																				"optional": true
																			},
																			{
																				"name": "order",
																				"optional": true
																			}
																		]
																	}
																},
																"i": {
																	"a5_sql_importdatasource": {
																		"description": "Imports a DataSource definition as a native Alpha Five table.",
																		"arguments": [
																			{
																				"name": "ds"
																			},
																			{
																				"name": "tablename"
																			},
																			{
																				"name": "addtabletodatabase",
																				"optional": true
																			},
																			{
																				"name": "arguments",
																				"optional": true
																			},
																			{
																				"name": "options",
																				"optional": true
																			},
																			{
																				"name": "openconnection",
																				"optional": true
																			},
																			{
																				"name": "showprogress",
																				"optional": true
																			},
																			{
																				"name": "allowcancel",
																				"optional": true
																			}
																		]
																	}
																},
																"n": {
																	"a5_sql_nested_query_to_json_document": {
																		"description": "Takes a CRLF delimited list of SQL Query definitions and returns a JSON document with the query result ",
																		"arguments": [
																			{
																				"name": "ops"
																			},
																			{
																				"name": "args"
																			},
																			{
																				"name": "mode",
																				"optional": true
																			},
																			{
																				"name": "wfin",
																				"optional": true
																			}
																		]
																	}
																},
																"p": {
																	"a5_sql_parsewhereclause": {
																		"description": "Populate an array from the WHERE -clause of a parsed SQL Query.",
																		"arguments": [
																			{
																				"name": "a"
																			},
																			{
																				"name": "as"
																			},
																			{
																				"name": "flaghaving",
																				"optional": true
																			},
																			{
																				"name": "cn",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_parsewhereclause_datatypes": {
																		"description": "Called by SQL Query Genie. After A5_SQL_ParseWhereClause() has created array, call this to get data types for entries in the array.",
																		"arguments": [
																			{
																				"name": "arr"
																			},
																			{
																				"name": "as"
																			},
																			{
																				"name": "cn"
																			}
																		]
																	}
																},
																"q": {
																	"a5_sql_query_genie": {
																		"description": "SQL Query Genie",
																		"arguments": [
																			{
																				"name": "cn2",
																				"optional": true
																			},
																			{
																				"name": "sqltxt",
																				"optional": true
																			},
																			{
																				"name": "arguments",
																				"optional": true
																			},
																			{
																				"name": "windowstyle",
																				"optional": true
																			},
																			{
																				"name": "dialog_title",
																				"optional": true
																			},
																			{
																				"name": "connectionstrings",
																				"optional": true
																			},
																			{
																				"name": "defaultconnection",
																				"optional": true
																			},
																			{
																				"name": "ops",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_querysaveas": {
																		"description": "Saves a SQL query as a table, passivelink table etc. Used in the SQL Database Explorer",
																		"arguments": [
																			{
																				"name": "cs"
																			},
																			{
																				"name": "sqlselectstatement"
																			},
																			{
																				"name": "saveastype"
																			},
																			{
																				"name": "argumentdefinitions",
																				"optional": true
																			},
																			{
																				"name": "showprogress",
																				"optional": true
																			},
																			{
																				"name": "allowcancel",
																				"optional": true
																			}
																		]
																	}
																},
																"r": {
																	"a5_sql_record_content_get": {
																		"description": "Given a table handle, do a SQL_records_get on the table",
																		"arguments": [
																			{
																				"name": "ctx"
																			},
																			{
																				"name": "expr"
																			},
																			{
																				"name": "order"
																			},
																			{
																				"name": "filter"
																			},
																			{
																				"name": "flags",
																				"optional": true
																			}
																		]
																	},
																	"a5_sql_record_xbase_content_get": {
																		"description": "Given a table handle, do a SQL_records_get on the table",
																		"arguments": [
																			{
																				"name": "ctx"
																			},
																			{
																				"name": "columns"
																			},
																			{
																				"name": "format_expr"
																			},
																			{
																				"name": "order"
																			},
																			{
																				"name": "filter"
																			}
																		]
																	},
																	"a5_sql_removeorder": {
																		"description": "Removes the ORDER BY clause from a SQL SELECT statement.",
																		"arguments": [
																			{
																				"name": "sql"
																			}
																		]
																	}
																},
																"t": {
																	"a5_sql_table_selector": {
																		"description": "Select a table/view from a SQL database",
																		"arguments": [
																			{
																				"name": "connectionorconnectionstring"
																			},
																			{
																				"name": "table"
																			},
																			{
																				"name": "flagdecoratewithtype",
																				"optional": true
																			},
																			{
																				"name": "flagsilent",
																				"optional": true
																			}
																		]
																	}
																}
															}
														},
														"e": {
															"a5_sqlexpressionbuilder": {
																"description": "SQL Expression builder. ",
																"arguments": [
																	{
																		"name": "cn"
																	},
																	{
																		"name": "tables"
																	},
																	{
																		"name": "expression"
																	}
																]
															}
														},
														"i": {
															"a5_sqlimport_execute": {
																"description": "Takes a import definition and executes it",
																"arguments": [
																	{
																		"name": "sqlimport"
																	},
																	{
																		"name": "keepconnectionopen",
																		"optional": true
																	}
																]
															}
														},
														"t": {
															"a5_sqltojsonexpandingmenu": {
																"description": "Generates JSON to populate an Expanding Menu control from a SQL query",
																"arguments": [
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "table"
																	},
																	{
																		"name": "fieldlist"
																	},
																	{
																		"name": "endpointfieldname",
																		"optional": true
																	},
																	{
																		"name": "filter",
																		"optional": true
																	},
																	{
																		"name": "order",
																		"optional": true
																	},
																	{
																		"name": "argsin",
																		"optional": true
																	},
																	{
																		"name": "endpointfunctionname",
																		"optional": true
																	},
																	{
																		"name": "tablealias",
																		"optional": true
																	},
																	{
																		"name": "tableowner",
																		"optional": true
																	}
																]
															},
															"a5_sqltojsontree": {
																"description": "Helper function that generates JSON from a sql database to populate a list with cascading data. You can specify an endpoint 'action' that is different than the endpoint display value.",
																"arguments": [
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "table"
																	},
																	{
																		"name": "fieldlist"
																	},
																	{
																		"name": "endpointffieldname",
																		"optional": true
																	},
																	{
																		"name": "filter",
																		"optional": true
																	},
																	{
																		"name": "order",
																		"optional": true
																	},
																	{
																		"name": "argsin",
																		"optional": true
																	},
																	{
																		"name": "flagexpandingmenuformat",
																		"optional": true
																	},
																	{
																		"name": "endpointfunctionname",
																		"optional": true
																	},
																	{
																		"name": "tablealias",
																		"optional": true
																	},
																	{
																		"name": "tableowner",
																		"optional": true
																	}
																]
															}
														}
													}
												}
											}
										},
										"t": {
											"a5_start_in_debug_mode": {
												"description": "If shift+control is being held down when the database is opened, then prompts for startup options."
											},
											"a5_static_rtf_ins_tbar": {
												"description": "Returns the system toolbar for Static RTF Insert toolbar",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_strip_object_name": {
												"description": "Takes a fully qualified dictionary object name and strips out the dictionary if possible (i.e. object name is unique)",
												"arguments": [
													{
														"name": "type"
													},
													{
														"name": "object_fullname"
													}
												]
											},
											"a5_structured_taborder": {
												"description": "Redefine the tab order of objects in a form designer",
												"arguments": [
													{
														"name": "objptr"
													}
												]
											},
											"a5_stylebuilder_editclipboardcss": {
												"description": "Edit CSS in clipboard.",
												"arguments": [
													{
														"name": "sbobj"
													}
												]
											},
											"a5_stylesheet_menu": {
												"description": "Computes the right click \"Stylesheet\" menu for form editor"
											}
										},
										"u": {
											"a5_subscriptioninfo": {
												"description": "Retrieve subscription details for a product license",
												"arguments": [
													{
														"name": "license",
														"optional": true
													}
												]
											},
											"a5_substyle_select": {
												"description": " Brings up a dialog to select a substyle for an object if there are any",
												"arguments": [
													{
														"name": "stylesheet"
													},
													{
														"name": "class"
													}
												]
											},
											"a5_subtract_op_result": {
												"description": "Displays the result of a Subtract Operation",
												"arguments": [
													{
														"name": "primary_count"
													},
													{
														"name": "transaction_count"
													},
													{
														"name": "result_table"
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											},
											"a5_sum_op_ok": {
												"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
												"arguments": [
													{
														"name": "code_string"
													}
												]
											},
											"a5_summarize_toolbar": {
												"description": "Returns the system toolbar for Summarize Operation View",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											}
										},
										"y": {
											"a5_synchronize_folders": {
												"description": "Synchronize the files in two folders. ",
												"arguments": [
													{
														"name": "folder1"
													},
													{
														"name": "folder2"
													},
													{
														"name": "pattern",
														"optional": true
													},
													{
														"name": "synchronize_files",
														"optional": true
													}
												]
											},
											"a5_system_addin_version": {
												"description": "Public user defined function."
											},
											"a5_system_function_debug": {
												"description": "Set breakpoints on system functions"
											},
											"a5_system_short_time_formatter": {
												"description": " Format a shorttime for a layout",
												"arguments": [
													{
														"name": "y"
													},
													{
														"name": "format"
													}
												]
											},
											"a5_system_time_formatter": {
												"description": " Format a time for a layout",
												"arguments": [
													{
														"name": "t"
													},
													{
														"name": "format"
													}
												]
											},
											"a5_system_toolbar_editor": {
												"description": "Edit a toolbar using V5 toolbar editor",
												"arguments": [
													{
														"name": "input_string"
													},
													{
														"name": "toolbar_name"
													},
													{
														"name": "dlg_title"
													}
												]
											},
											"a5_system_toolbar_show": {
												"description": "Shows a system toolbar. The toolbar_property_string is returned by the appropriate function. e.g. a5_form_toolbar() etc.",
												"arguments": [
													{
														"name": "vars"
													},
													{
														"name": "toolbar_property_string"
													},
													{
														"name": "relative_position",
														"optional": true
													},
													{
														"name": "flagglobal",
														"optional": true
													}
												]
											}
										}
									}
								},
								"t": {
									"__index__": {
										"_": {
											"a5_t_from_rfcdate": {
												"description": "Converts a time in RFC 822, RFC 850, RFC 1123 or ANSI C format to a time variable",
												"arguments": [
													{
														"name": "date_string"
													}
												]
											}
										},
										"a": {
											"a5_table_by_example": {
												"description": "Displays the Table by Example dialog box.",
												"arguments": [
													{
														"name": "style",
														"optional": true
													}
												]
											},
											"a5_table_delete": {
												"description": "Deletes all of the files for a table: .dbf, .fpt, .cdx, .ddd, .ddm and .ddx",
												"arguments": [
													{
														"name": "table_name"
													}
												]
											},
											"a5_table_editor_toolbar": {
												"description": "Returns the system toolbar for Table Editor",
												"arguments": [
													{
														"name": "read_from_memory",
														"optional": true
													}
												]
											},
											"a5_table_menu_enable": {
												"description": "Determins if certain right click menu items in the control panel for a table should be enabled or disabled",
												"arguments": [
													{
														"name": "verb"
													}
												]
											},
											"a5_table_openview": {
												"description": "Open a table showing a view definition. A view is a crlf delimited list of fieldnames or fieldname=<expression>",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "viewdefinition"
													},
													{
														"name": "mode",
														"optional": true
													},
													{
														"name": "alias",
														"optional": true
													},
													{
														"name": "encryption_key",
														"optional": true
													}
												]
											},
											"a5_table_removefiles": {
												"description": "Removes all files associated with a .dbf filename.",
												"arguments": [
													{
														"name": "fully_qualified_tablename"
													}
												]
											},
											"a5_table_rename_low": {
												"description": "Called from the Control Panel to rename a table.",
												"arguments": [
													{
														"name": "tablename"
													},
													{
														"name": "newname"
													},
													{
														"name": "kind",
														"optional": true
													}
												]
											},
											"a5_table_set_exists": {
												"description": "Returns .t. if the table or set exists. If table_set_name is null, then A5 uses table or set name in Control Panel that has focus.",
												"arguments": [
													{
														"name": "table_set_name"
													}
												]
											},
											"a5_table_set_zip_send": {
												"description": "Called by the right click in the control panel when Set or Table has focus to Zip/Send.",
												"arguments": [
													{
														"name": "method",
														"optional": true
													}
												]
											},
											"a5_table_statistics": {
												"description": "Displays the Database Information Dialog box"
											},
											"a5_tablearraypopulate": {
												"description": "Populates a property array with a list of tables. Properties are .name, .filename, .image, .display",
												"arguments": [
													{
														"name": "arr"
													},
													{
														"name": "filter",
														"optional": true
													}
												]
											},
											"a5_tableedbyex_tbar": {
												"description": "Table by example toolbar"
											},
											"a5_tableisindatabase": {
												"description": "Returns .t. if the table or set filename is a member of the current database.",
												"arguments": [
													{
														"name": "table_or_set_filename"
													}
												]
											},
											"a5_tables_enum": {
												"description": "Returns a list of table names. If table name is not unique it is fully qualified, otherwise not.",
												"arguments": [
													{
														"name": "include_sets",
														"optional": true
													}
												]
											}
										},
										"b": {
											"a5_tb_border_color_bmp": {
												"description": "Draw the Border Color button with a specified color swatch.",
												"arguments": [
													{
														"name": "cbmpname"
													},
													{
														"name": "ccolor"
													}
												]
											},
											"a5_tb_fill_color_bmp": {
												"description": "Draw the Fill Color button with a specified color swatch.",
												"arguments": [
													{
														"name": "cbmpname"
													},
													{
														"name": "ccolor"
													}
												]
											},
											"a5_tb_font_color_bmp": {
												"description": "Draw the Font Color button with a specified color swatch.",
												"arguments": [
													{
														"name": "cbmpname"
													},
													{
														"name": "ccolor"
													}
												]
											},
											"a5_tb_shadow_color_bmp": {
												"description": "Draw the Shadow Color button with a specified color swatch.",
												"arguments": [
													{
														"name": "cbmpname"
													},
													{
														"name": "ccolor"
													}
												]
											},
											"a5_tbar_string_open": {
												"description": "Opens a toolbar whose definition is stored in tbar_string in the form of a \"property to string\" of a var with .toolbar_body, .toolbar_xdialog_events and .toolbar_xdialog_init properties",
												"arguments": [
													{
														"name": "tbar_string"
													}
												]
											}
										},
										"c": {
											"a5_tcpportinuse": {
												"description": "Check to see if the specified TCP port is already in use.",
												"arguments": [
													{
														"name": "portnumber"
													},
													{
														"name": "localaddress",
														"optional": true
													},
													{
														"name": "remoteaddress",
														"optional": true
													},
													{
														"name": "remoteport",
														"optional": true
													}
												]
											}
										},
										"e": {
											"a5_text_toolbar_close": {
												"description": " closes text toolbar"
											},
											"a5_text_toolbar_is_open": {
												"description": "Returns .t. if the Text toolbar is open"
											},
											"a5_text_toolbar_toggle": {
												"description": "Toggles the Text toolbar on/off"
											}
										},
										"h": {
											"a5_threadstackdump": {
												"description": "Dump the stack for all threads",
												"arguments": [
													{
														"name": "sampletwice",
														"optional": true
													}
												]
											}
										},
										"i": {
											"a5_time_format_help": {
												"description": "Builder for time/date format string.",
												"arguments": [
													{
														"name": "date_only",
														"optional": true
													},
													{
														"name": "time_only",
														"optional": true
													},
													{
														"name": "initialvalue",
														"optional": true
													},
													{
														"name": "flagsuppressmilliseconds",
														"optional": true
													}
												]
											}
										},
										"o": {
											"a5_to_systray": {
												"description": "Minimize Alpha to the Windows System Tray (systray)",
												"arguments": [
													{
														"name": "hide",
														"optional": true
													},
													{
														"name": "apptitle",
														"optional": true
													}
												]
											},
											"a5_toggle_debugger_safe": {
												"description": "set debugger agent state"
											},
											"a5_toggle_qbf_genie": {
												"description": "Toggles the QBF Genie on/off"
											},
											"a5_toggle_scr_fav_tlr": {
												"description": "Toggles on/off the Script Favorites toolbar for the current form/browse."
											},
											"a5_toggle_setting": {
												"description": "Toggles the state of a system mode setting",
												"arguments": [
													{
														"name": "setting_name"
													}
												]
											},
											"a5_toolbar_def_load": {
												"description": "Returns the definition of a toolbar. Dialog body, init, event and title strings are returned",
												"arguments": [
													{
														"name": "toolbarname"
													}
												]
											},
											"a5_toolbar_editor": {
												"description": "Edit a toolbar using V5 toolbar editor",
												"arguments": [
													{
														"name": "tb_input"
													},
													{
														"name": "toolbar_name"
													},
													{
														"name": "dlg_title"
													}
												]
											},
											"a5_toolbar_editor_v6": {
												"description": "Edit a toolbar using V5 toolbar editor",
												"arguments": [
													{
														"name": "tb_input"
													},
													{
														"name": "toolbar_name"
													},
													{
														"name": "dlg_title"
													}
												]
											},
											"a5_toolbar_examine": {
												"description": "Returns the internal text from a V4 custom toolbar definition",
												"arguments": [
													{
														"name": "tlbrname"
													}
												]
											},
											"a5_toolbar_float_state": {
												"description": "Returns the remembered docking state for a toolbar",
												"arguments": [
													{
														"name": "toolbar_name"
													}
												]
											},
											"a5_toolbar_open": {
												"description": "Opens a toolbar. If flagGlobal is .f., and if the toolbar is opened from a button or event in an MDI window (e.g. a form), the toolbar will be hidden when the window looses focus and closed when the the window is closed.",
												"arguments": [
													{
														"name": "toolbarname"
													},
													{
														"name": "flagglobal",
														"optional": true
													}
												]
											},
											"a5_toolbar_open_local": {
												"description": "Opens a toolbar.",
												"arguments": [
													{
														"name": "vars"
													},
													{
														"name": "toolbarname"
													},
													{
														"name": "relative_position",
														"optional": true
													}
												]
											}
										},
										"r": {
											"a5_transform_join": {
												"arguments": [
													{
														"name": "code_text"
													},
													{
														"name": "operation_name"
													},
													{
														"name": "silent"
													},
													{
														"name": "lv"
													}
												]
											}
										},
										"u": {
											"a5_tutorial_book": {
												"description": "Opens the tutorial book"
											}
										}
									}
								},
								"u": {
									"a5_undelete_set": {
										"description": "Packs the records in the tables of a set. Prompt for tablenames if silent if .f.",
										"arguments": [
											{
												"name": "setname"
											},
											{
												"name": "silent",
												"optional": true
											}
										]
									},
									"a5_unflatten_query": {
										"description": "Removes the flattenquery() from a filter expression",
										"arguments": [
											{
												"name": "filter"
											}
										]
									},
									"a5_unsquare": {
										"description": "Removes [ ] from a crlf delimited string. Useful when using the <array>.Matching() method",
										"arguments": [
											{
												"name": "string"
											}
										]
									},
									"a5_update_op_ok": {
										"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
										"arguments": [
											{
												"name": "code_string"
											}
										]
									},
									"a5_update_op_result": {
										"description": "Displays the Update Records result dialog box",
										"arguments": [
											{
												"name": "a_records_processed"
											},
											{
												"name": "a_records_violated"
											},
											{
												"name": "table_set_name",
												"optional": true
											},
											{
												"name": "filter",
												"optional": true
											},
											{
												"name": "arguments",
												"optional": true
											}
										]
									},
									"a5_update_toolbar": {
										"description": "Returns the system toolbar for Update Operation View",
										"arguments": [
											{
												"name": "read_from_memory",
												"optional": true
											}
										]
									},
									"a5_url_from_storagejsonformat": {
										"description": "Takes a JSON definition for an object in storage (e.g. Amazon S3) and generates a signed URL to download the object. E.g. take this: \"{cs: 'alphamediacapture',object: 'my_movies7.xlsx',source: 'S3'}\" and generates a signed URL to download the object. 'numberOfSecondsBeforeURLExpires' - if the object is protected, specify the number of seconds that the URL can be used for after it has been generated. Default is 240 seconds.",
										"arguments": [
											{
												"name": "json"
											},
											{
												"name": "numberofsecondsbeforeurlexpires",
												"optional": true
											}
										]
									},
									"a5_user_groups_dialog": {
										"description": "Displays the Add Users & Groups dialog"
									},
									"a5_user_guide_book": {
										"description": "Opens the User Guide book"
									},
									"a5_ux_action": {
										"description": "Perform an action on the UX during an ajax callback. actionType is: 'ajaxListAction' (default), 'populateControlsFromTable'",
										"arguments": [
											{
												"name": "e"
											},
											{
												"name": "ops"
											},
											{
												"name": "actiontype",
												"optional": true
											}
										]
									},
									"a5_ux_field_popup_enum": {
										"description": "Gtt the names of popup editors"
									}
								},
								"v": {
									"a5_validate_xbasic_expression": {
										"description": "Validates an xbasic expression",
										"arguments": [
											{
												"name": "expn"
											}
										]
									},
									"a5_videotutorialsurl": {
										"description": "Returns a URL for online video tutorials",
										"arguments": [
											{
												"name": "path",
												"optional": true
											}
										]
									},
									"a5_view_layout_menu": {
										"description": "Called when user presses the View button on the control panel when a table is active.",
										"arguments": [
											{
												"name": "class"
											},
											{
												"name": "object_name"
											}
										]
									},
									"a5_viewduprecs": {
										"description": "Displays a dialog shows master and duplicate records.",
										"arguments": [
											{
												"name": "tablename"
											},
											{
												"name": "dup_key"
											},
											{
												"name": "run_query_to_find_dups",
												"optional": true
											}
										]
									}
								},
								"w": {
									"__index__": {
										"a": {
											"a5_wait_xdialog": {
												"description": "Displays a modeless Xdialog telling user to wait. Xdialog title is returned so that calling code can close it. You can optionally leave the message blank and specify an HTML string for the message.",
												"arguments": [
													{
														"name": "msg"
													},
													{
														"name": "width",
														"optional": true
													},
													{
														"name": "html",
														"optional": true
													},
													{
														"name": "htmlheight",
														"optional": true
													},
													{
														"name": "position",
														"optional": true
													},
													{
														"name": "delayinseconds",
														"optional": true
													}
												]
											}
										},
										"e": {
											"a5_webcomponentopeninwindow": {
												"description": "Open a Grid component in an Xdialog window. Use op.base_filter, op.user_filter, op.link and op.argumentBindings to define a filter for the Grid. op.height and op.width define the window size.",
												"arguments": [
													{
														"name": "componentname"
													},
													{
														"name": "componenttype"
													},
													{
														"name": "style"
													},
													{
														"name": "op",
														"optional": true
													},
													{
														"name": "formname",
														"optional": true
													}
												]
											},
											"a5_webcomponentpicker": {
												"description": " Open the web component picker. If componentType = \"\", then shows all types. If Project = \"\" then includes combox box to select project. If shortname is .t., then shows name of component relative to project folder.",
												"arguments": [
													{
														"name": "dlg_title",
														"optional": true
													},
													{
														"name": "componenttype",
														"optional": true
													},
													{
														"name": "project",
														"optional": true
													},
													{
														"name": "shortname",
														"optional": true
													},
													{
														"name": "latecheckofcomponenttype",
														"optional": true
													}
												]
											},
											"a5_webcpisopen": {
												"description": "Tests if the Web App Control Panel is open"
											},
											"a5_webcpsetfocus": {
												"description": "Set focus to web control panel. Open it if necessary"
											},
											"a5_webcptoggle": {
												"description": "Togglethe Web App Control Panel is open"
											},
											"a5_webprojectfile": {
												"description": "Takes a short web project name and returns real filename. e.g. dialog1 or default|dialog1",
												"arguments": [
													{
														"name": "name"
													},
													{
														"name": "extension"
													}
												]
											},
											"a5_webprojectget": {
												"description": "Gets the default web project name"
											},
											"a5_webprojectimages": {
												"description": "Get a list of images in the current web project.",
												"arguments": [
													{
														"name": "flagpublishformat",
														"optional": true
													}
												]
											},
											"a5_webprojectpath": {
												"description": "Returns the path of a WebProject.",
												"arguments": [
													{
														"name": "project",
														"optional": true
													},
													{
														"name": "adb_name",
														"optional": true
													}
												]
											},
											"a5_webprojectslist": {
												"description": "Gets a list of the Web Projects for the specified Database",
												"arguments": [
													{
														"name": "adb_name",
														"optional": true
													}
												]
											},
											"a5_webserversoftwarestring": {
												"description": "Returns a formatted string to identify the server software in HTTP headers"
											},
											"a5_websharedresourcepath": {
												"description": "Returns the path of Shared Resources for web projects.",
												"arguments": [
													{
														"name": "adb_name",
														"optional": true
													}
												]
											},
											"a5_welcome_dialog": {
												"description": "Displays the list showing all databases in the Most Recently Used list.",
												"arguments": [
													{
														"name": "flagpromptforqrbproject",
														"optional": true
													}
												]
											}
										},
										"f": {
											"a5_wf_style_builder": {
												"description": "Edit an A5 Webform style",
												"arguments": [
													{
														"name": "style_name",
														"optional": true
													}
												]
											},
											"a5_wf_style_names": {
												"description": "Get a list of styles. If type=1 then a5 standard, if type=2 then all styles.",
												"arguments": [
													{
														"name": "type"
													}
												]
											},
											"a5_wfse": {
												"description": "Generic webform style component editor.",
												"arguments": [
													{
														"name": "settings"
													}
												]
											}
										},
										"h": {
											"a5_what_being_edited": {
												"description": "Returns a list of scripts currently open for editing. Active script is listed first."
											}
										},
										"i": {
											"a5_wildcardselect": {
												"description": "Used to do a wildcard selection in a list or checkbox.",
												"arguments": [
													{
														"name": "choices"
													},
													{
														"name": "existingchoices"
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "caption",
														"optional": true
													}
												]
											},
											"a5_window_buttons": {
												"description": "Returns the list of buttons to be displayed by the Windows toolbar"
											},
											"a5_window_list": {
												"description": "Generates a list of open windows for the Windows menu."
											},
											"a5_window_position": {
												"description": "Positions a window in the client area. Position_x:left, center, right, fill  Position_y:top, center, bottom, fill",
												"arguments": [
													{
														"name": "pointer"
													},
													{
														"name": "position_x",
														"optional": true
													},
													{
														"name": "position_y",
														"optional": true
													}
												]
											},
											"a5_windowbar_close": {
												"description": "Closes the Window Toolbar is open"
											},
											"a5_windowbar_is_open": {
												"description": "Returns .t. if the Window Toolbar is open"
											},
											"a5_windowbar_show": {
												"description": "Opens the Window Toolbar"
											},
											"a5_windowbar_toggle": {
												"description": "Toggles the Window Toolbar on/off"
											}
										},
										"o": {
											"a5_word_merge": {
												"description": "Mailmerge into Microsoft Word. Choice = \"new\" or \"template\" for an existing template. Mergedata is a comma delimited txt fie.",
												"arguments": [
													{
														"name": "choice"
													},
													{
														"name": "mergedata"
													},
													{
														"name": "template",
														"optional": true
													}
												]
											},
											"a5_word_merge_dotnet": {
												"description": "Uses Visual Studio Tools for Office (which must be installed on your machine - see https://www.microsoft.com/en-us/download/details.aspx?id=3508) to merge data from a SQL query into a MS Word template document.",
												"arguments": [
													{
														"name": "folder"
													},
													{
														"name": "template"
													},
													{
														"name": "connectionstring"
													},
													{
														"name": "sql"
													},
													{
														"name": "args"
													},
													{
														"name": "flagportablesql",
														"optional": true
													},
													{
														"name": "outputfilename",
														"optional": true
													}
												]
											},
											"a5_workspaceget": {
												"description": "Gets the current workspace name"
											}
										},
										"r": {
											"a5_wrapinerrorhandler": {
												"description": "Wraps a code snippet in an ON ERROR handler",
												"arguments": [
													{
														"name": "codetxt"
													},
													{
														"name": "msg",
														"optional": true
													}
												]
											}
										}
									}
								},
								"x": {
									"a5_xbasic_ref_book": {
										"description": "Opens the Xbasic Reference Manual book"
									},
									"a5_xbasictreetojsontree": {
										"description": "Take a CRLF delimited string that Xdialog uses for Tree Control data and converts to a JSON string.",
										"arguments": [
											{
												"name": "treedata"
											},
											{
												"name": "separator",
												"optional": true
											},
											{
												"name": "propertyname",
												"optional": true
											},
											{
												"name": "flagexpandingmenuformat",
												"optional": true
											}
										]
									},
									"a5_xd_genie_listvcodeget": {
										"description": " Generate code for the List View Genie",
										"arguments": [
											{
												"name": "lvdef"
											},
											{
												"name": "lvvar"
											},
											{
												"name": "sizex",
												"optional": true
											},
											{
												"name": "sizey",
												"optional": true
											},
											{
												"name": "scope",
												"optional": true
											}
										]
									},
									"a5_xd_genie_simplechartcodeget": {
										"description": " Generate code for the SimpleChart Genie",
										"arguments": [
											{
												"name": "scdef"
											},
											{
												"name": "varname"
											},
											{
												"name": "sizex",
												"optional": true
											},
											{
												"name": "sizey",
												"optional": true
											}
										]
									},
									"a5_xdialog_builder_genie": {
										"description": "Display the xdialog genie",
										"arguments": [
											{
												"name": "pedit",
												"optional": true
											}
										]
									},
									"a5_xdialog_font_override": {
										"description": "Some Xdialogs will not render properly if the system font for Xdialog is not Tahoma,8. This function allows you to temporarily override the user's custom font setting.",
										"arguments": [
											{
												"name": "font"
											}
										]
									},
									"a5_xdialog_preprocess": {
										"description": "Used to pre-process Xdialog Body strings that contain macro commands. e.g. {Hyperlink}. Also removes commented lines (lines that have a ' in column 1)",
										"arguments": [
											{
												"name": "text"
											},
											{
												"name": "vars"
											}
										]
									},
									"a5_xmlarguments_decode": {
										"description": "Takes an encoded XML Arguments string (created with a5_XMLArguments_encode()) and decodes it.",
										"arguments": [
											{
												"name": "encodedxml"
											},
											{
												"name": "flagisurlencoded",
												"optional": true
											}
										]
									},
									"a5_xmlarguments_encode": {
										"description": "Takes the SQL::Argument object's XML property and encodes it for inclusion in an HTML document",
										"arguments": [
											{
												"name": "xml"
											}
										]
									},
									"a5_xp_style_menu": {
										"description": "Displays menus using Office XP style",
										"arguments": [
											{
												"name": "fill_color",
												"optional": true
											},
											{
												"name": "box_color",
												"optional": true
											}
										]
									},
									"a5_xtab_op_ok": {
										"description": "Returns .flag (.t. or .f.) and .error if the Operation is fully, and correctly defined.",
										"arguments": [
											{
												"name": "code_string"
											}
										]
									},
									"a5_xtab_toolbar": {
										"description": "Returns the system toolbar for Update Operation View",
										"arguments": [
											{
												"name": "read_from_memory",
												"optional": true
											}
										]
									}
								},
								"z": {
									"a5_zap_set": {
										"description": "Packs the records in the tables of a set. Prompt for tablenames if silent if .f.",
										"arguments": [
											{
												"name": "setname"
											},
											{
												"name": "silent",
												"optional": true
											}
										]
									},
									"a5_zap_table": {
										"description": "Public user defined function.",
										"arguments": [
											{
												"name": "tablename"
											}
										]
									},
									"a5_zip_db_dialog": {
										"description": "Opens the Zip Database dialog box"
									},
									"a5_zip_files_w_fback": {
										"description": "Used by Zip/Send/Backup Database. Creates a zip file based on an input list of files.",
										"arguments": [
											{
												"name": "result_files_to_zip"
											},
											{
												"name": "zipfile"
											},
											{
												"name": "include_paths"
											},
											{
												"name": "db_zip_compress"
											},
											{
												"name": "silent",
												"optional": true
											}
										]
									}
								}
							}
						},
						"a": {
							"a5ajaxchunkedresponsedone": {
								"description": "Used in an Ajax callback that sends back chunked responses. Must be sent as the last message."
							},
							"a5ajaxchunkedresponsewrite": {
								"description": "Used in an Ajax callback that sends back chunked responses. Sends a chunked message.",
								"arguments": [
									{
										"name": "js"
									},
									{
										"name": "ein",
										"optional": true
									}
								]
							},
							"a5ajs_graphqldbqueryeditor": {
								"description": "Edit GraphQL query ",
								"arguments": [
									{
										"name": "gql"
									},
									{
										"name": "flagshowsavebutton",
										"optional": true
									}
								]
							}
						},
						"c": {
							"a5cs_analyzesimplequery": {
								"description": "Analyze a SELECT statement. If statement is a simple list of columns from a single table returns .t.. Else .f.",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "sqltext"
									},
									{
										"name": "result"
									}
								]
							},
							"a5cs_decomposeaggregateexpression": {
								"description": "Takes an Aggregate SQL Expression and parses out the pieces.",
								"arguments": [
									{
										"name": "sqlexpression"
									},
									{
										"name": "isdistinct"
									},
									{
										"name": "columnexpression"
									},
									{
										"name": "aggregatefunction"
									}
								]
							},
							"a5cs_determineoptimalquerylocation": {
								"description": "Determine optimal location for running a query on an active-link table. Returns 'client-side' or 'server-side'.",
								"arguments": [
									{
										"name": "tbl"
									}
								]
							},
							"a5cs_driverinstalled": {
								"description": " Returns .t. if the specified driver (mysql, oracle, db2, etc) is installed",
								"arguments": [
									{
										"name": "driver"
									}
								]
							},
							"a5cs_generatenativefilter": {
								"description": "Takes a Portable AlphaSQL Filter expression and converts it to a native SQL expression",
								"arguments": [
									{
										"name": "filter"
									},
									{
										"name": "cn"
									}
								]
							},
							"a5cs_generatenativeorder": {
								"description": "Takes a Portable AlphaSQL Order expression and converts it to a native SQL expression",
								"arguments": [
									{
										"name": "order"
									},
									{
										"name": "cn"
									}
								]
							},
							"a5cs_get_tables": {
								"description": "Gets a list of tables and views in a Alpha DAO connection. Returns .tables, .tableswithtype, .tablewithtypesicons",
								"arguments": [
									{
										"name": "flagsilent"
									},
									{
										"name": "sqlconn"
									},
									{
										"name": "includeviews",
										"optional": true
									},
									{
										"name": "includelinkedtables",
										"optional": true
									},
									{
										"name": "includesystemtables",
										"optional": true
									},
									{
										"name": "includesynonyms",
										"optional": true
									},
									{
										"name": "includealiases",
										"optional": true
									}
								]
							},
							"a5cs_getfunctionsinsqlexpression": {
								"description": "Returns a list of functions in a Portable SQL Value Expression",
								"arguments": [
									{
										"name": "sqlstatement"
									},
									{
										"name": "queryxml",
										"optional": true
									}
								]
							},
							"a5cs_getprimarykeycolumns": {
								"description": "Gets the primary key columns as a CR-LF delimited list for a SQL table.",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "tablename"
									},
									{
										"name": "tableowner"
									}
								]
							},
							"a5cs_getquerylocation": {
								"description": "Determines where a query for an active-link table should be run.",
								"arguments": [
									{
										"name": "tbl"
									}
								]
							},
							"a5cs_prompt_surrogatekey": {
								"description": "Checks to see if a table has a primary key. If not, prompts for a surrogate primary key.",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "tablename"
									},
									{
										"name": "tableowner"
									},
									{
										"name": "currentsurrogatekey",
										"optional": true
									},
									{
										"name": "columnlist",
										"optional": true
									},
									{
										"name": "flagallowabort",
										"optional": true
									}
								]
							},
							"a5cs_promptfortable": {
								"description": "Prompts for the name of a table from a remote database. PromptList and InitialCheck are comma delimited strings that can contain: Views,Linked Tables,System Tables,Synonyms,Aliases",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "dlg_title"
									},
									{
										"name": "default_selection",
										"optional": true
									},
									{
										"name": "promptlist",
										"optional": true
									},
									{
										"name": "initialcheck",
										"optional": true
									},
									{
										"name": "size",
										"optional": true
									}
								]
							},
							"a5cs_promptfortablemulti": {
								"description": "Displays a dialog box allowing you to select multiple tables from a remote database.",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "dialog_title",
										"optional": true
									},
									{
										"name": "selected",
										"optional": true
									},
									{
										"name": "flagtables",
										"optional": true
									},
									{
										"name": "flagviews",
										"optional": true
									},
									{
										"name": "flaglinkedtables",
										"optional": true
									},
									{
										"name": "flagsynonyms",
										"optional": true
									},
									{
										"name": "flagaliases",
										"optional": true
									}
								]
							},
							"a5cs_sql_add_filter_order": {
								"description": "Adds a filter and order to a portable SQL Select statement.",
								"arguments": [
									{
										"name": "sqltxt"
									},
									{
										"name": "filter"
									},
									{
										"name": "filter2"
									},
									{
										"name": "order"
									},
									{
										"name": "flagusehavingifgroupbysql",
										"optional": true
									},
									{
										"name": "havingfilter",
										"optional": true
									},
									{
										"name": "flagportablesql",
										"optional": true
									},
									{
										"name": "queryxml",
										"optional": true
									},
									{
										"name": "opspassedin",
										"optional": true
									}
								]
							},
							"a5cs_validateexpression": {
								"description": "Validates a portable SQL expression. Table_name must not be qualified. E.g.: 'order details' not '\"order details\"'",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "expression"
									},
									{
										"name": "table_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							}
						},
						"d": {
							"a5dialoghelper_populateexpandingmenucontrol": {
								"description": "Takes a 'friendly' menu definition and generates JS to repopulate an expanding menu control",
								"arguments": [
									{
										"name": "friendlymenudefn"
									},
									{
										"name": "controlid"
									},
									{
										"name": "tmpl"
									}
								]
							}
						},
						"e": {
							"a5enum": {
								"description": "Enumerates objects of specified type for a CRLF or comma delimited list of tables and sets",
								"arguments": [
									{
										"name": "type"
									},
									{
										"name": "table_set_list",
										"optional": true
									}
								]
							}
						},
						"f": {
							"a5fedex_jwt": {
								"description": "Retrieves and caches a JWT from Fedex for the specified API key and secret key",
								"arguments": [
									{
										"name": "apikey"
									},
									{
										"name": "secretkey"
									}
								]
							}
						},
						"g": {
							"a5gridhelper_dumpargumentstohtml": {
								"description": "Turns sql::arguments into an HTML table,",
								"arguments": [
									{
										"name": "arguments"
									},
									{
										"name": "colortouse",
										"optional": true
									}
								]
							},
							"a5gridhelper_getstylejs": {
								"arguments": [
									{
										"name": "tmpl"
									},
									{
										"name": "stylenames"
									}
								]
							}
						},
						"h": {
							"a5helper_createsqlitedbfromjsondefinition": {
								"description": "Create a sqlite database from json definition",
								"arguments": [
									{
										"name": "json"
									},
									{
										"name": "sqlitefilename"
									},
									{
										"name": "arguments",
										"optional": true
									},
									{
										"name": "xbasicfunctiondefinitions",
										"optional": true
									}
								]
							},
							"a5helper_findrecordinsqltable": {
								"description": "Queries a SQL table for a value. All fields of the correct type are queried (i.e. a keyword search)",
								"arguments": [
									{
										"name": "connectionstring"
									},
									{
										"name": "tablename"
									},
									{
										"name": "findwhatvalue"
									},
									{
										"name": "fieldlist",
										"optional": true
									},
									{
										"name": "treatcommaasor",
										"optional": true
									},
									{
										"name": "pagesizec",
										"optional": true
									},
									{
										"name": "pagenumberc",
										"optional": true
									},
									{
										"name": "maxrows",
										"optional": true
									},
									{
										"name": "currentpagenumberc",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									}
								]
							},
							"a5helper_generatefiledownloadjs": {
								"description": "Generate JS to download a file",
								"arguments": [
									{
										"name": "componentalias"
									},
									{
										"name": "exportfilename"
									},
									{
										"name": "clientsidefilename",
										"optional": true
									},
									{
										"name": "pin",
										"optional": true
									}
								]
							},
							"a5helper_generatejsonformdefinition_from_xbasicdefinition": {
								"description": "Generates a JSON Form definition from a concise JSON definition",
								"arguments": [
									{
										"name": "json"
									}
								]
							},
							"a5helper_replayharfile": {
								"description": "Takes a .har file and replays it",
								"arguments": [
									{
										"name": "harfn"
									},
									{
										"name": "componentname"
									},
									{
										"name": "componenttype",
										"optional": true
									}
								]
							},
							"a5helper_sql_applysecurity": {
								"description": "Applies security to a SQL SELECT statement. Only applies if the SQL statement can be parsed.",
								"arguments": [
									{
										"name": "sql"
									},
									{
										"name": "securitydef"
									},
									{
										"name": "loggedingroups"
									},
									{
										"name": "wfin",
										"optional": true
									}
								]
							},
							"a5helper_transformfields_to_json_schema": {
								"description": "Takes a list of TransForm form fields and creates a default Word template document",
								"arguments": [
									{
										"name": "formdef"
									}
								]
							},
							"a5helper_writetoauditinglog": {
								"description": "If auditing is turned on for a web project, will update the auditing log. 'dataJSON' has the data for field old/new values. To get dataJSON, call a5Helper_getAuditInfoFromSQLStatement() BEFORE the CRUD operation occurs (for Update and Delete). Syntax for a5Helper_getAuditInfoFromSQLStatement() is: a5Helper_getAuditInfoFromSQLStatement(connection as sql::connection,sqlStatement as c ,argsXml as c )",
								"arguments": [
									{
										"name": "cn"
									},
									{
										"name": "operationtype"
									},
									{
										"name": "datajson"
									},
									{
										"name": "pkfields"
									},
									{
										"name": "pkvalue"
									},
									{
										"name": "comment",
										"optional": true
									}
								]
							},
							"a5http_carootsfile": {
								"description": "Returns the location of the default CA Roots file used for http_* client functions and curl operations."
							},
							"a5http_carootspath": {
								"description": "Returns the location of the default CA Roots file used for curl and http_* client functions and curl operations."
							}
						},
						"i": {
							"a5instancecount": {
								"description": "Returns a count of the number of instances of Alpha Anywhere that are funning."
							}
						},
						"p": {
							"a5prop_getcolor": {
								"description": " Wrapper function to get colors from form/browse objects based on version",
								"arguments": [
									{
										"name": "obj"
									},
									{
										"name": "color_or_accent"
									},
									{
										"name": "parent_prop"
									},
									{
										"name": "default",
										"optional": true
									}
								]
							},
							"a5prop_setcolor": {
								"description": " Wrapper function to set colors on form/browse objects based on version",
								"arguments": [
									{
										"name": "obj"
									},
									{
										"name": "color"
									},
									{
										"name": "color_or_accent"
									},
									{
										"name": "parent_prop"
									}
								]
							}
						},
						"s": {
							"a5ssrs_connect": {
								"description": "Connect to SSRS server",
								"arguments": [
									{
										"name": "ssrs"
									},
									{
										"name": "connectionstring"
									},
									{
										"name": "flagshowurl",
										"optional": true
									},
									{
										"name": "pin",
										"optional": true
									}
								]
							},
							"a5ssrs_reportpreview": {
								"description": "Preview a SSRS report",
								"arguments": [
									{
										"name": "reportname"
									},
									{
										"name": "format",
										"optional": true
									},
									{
										"name": "connectionstring",
										"optional": true
									}
								]
							},
							"a5ssrs_runreport": {
								"description": "Run a SQL Server Reporting Services Report",
								"arguments": [
									{
										"name": "ssrs"
									},
									{
										"name": "reportname"
									},
									{
										"name": "outputformat",
										"optional": true
									},
									{
										"name": "fileextension",
										"optional": true
									},
									{
										"name": "parametersjson",
										"optional": true
									}
								]
							},
							"a5ssrs_runreportlow": {
								"description": "Run a SSRS report",
								"arguments": [
									{
										"name": "reportname"
									},
									{
										"name": "args"
									},
									{
										"name": "filename",
										"optional": true
									},
									{
										"name": "type",
										"optional": true
									}
								]
							},
							"a5ssrs_utilities": {
								"description": "Dislay a multi-column list of choices, allowing a user to select entries by checking entries. Returns .lastbutton, .selected, .selected_in_selection_order",
								"arguments": [
									{
										"name": "ssrs"
									},
									{
										"name": "obj"
									}
								]
							},
							"a5storage_copyfiles": {
								"description": "Copies files to storage using parallel process for fast copy",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "sourcefolder"
									},
									{
										"name": "pattern",
										"optional": true
									},
									{
										"name": "targetfolder",
										"optional": true
									},
									{
										"name": "concurrenttasks",
										"optional": true
									},
									{
										"name": "presultin",
										"optional": true
									},
									{
										"name": "flagsetreadpermission",
										"optional": true
									},
									{
										"name": "optimized",
										"optional": true
									}
								]
							},
							"a5storage_deleteitem": {
								"description": "Deletes an item from storage. Returns .t. if item did not exist.",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "itemname"
									},
									{
										"name": "presult",
										"optional": true
									}
								]
							},
							"a5storage_getitem_as_blob": {
								"description": "Retrieves an item from storage as a blob",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "itemname"
									},
									{
										"name": "presult",
										"optional": true
									}
								]
							},
							"a5storage_getitem_as_file": {
								"description": "Retrieves an item from storage as a file",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "itemname"
									},
									{
										"name": "filename"
									},
									{
										"name": "presult",
										"optional": true
									}
								]
							},
							"a5storage_getitemproperties": {
								"description": "Gets properties of an object in a S3 bucket",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "itemname"
									}
								]
							},
							"a5storage_listitems": {
								"description": "Gets a list of items in a storage container. You can optionally return objects that start with the specified searchPrefix",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "searchprefix",
										"optional": true
									},
									{
										"name": "presult",
										"optional": true
									}
								]
							},
							"a5storage_listjson": {
								"description": "Gets a list of items in a storage container. You can optionally return objects that start with the specified searchPrefix",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "searchprefix",
										"optional": true
									},
									{
										"name": "presult",
										"optional": true
									}
								]
							},
							"a5storage_savedata": {
								"description": "Saves binary data to storage",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "blob"
									},
									{
										"name": "itemname"
									},
									{
										"name": "mimetype",
										"optional": true
									},
									{
										"name": "presult",
										"optional": true
									},
									{
										"name": "flagsetreadpermission",
										"optional": true
									},
									{
										"name": "flagoverwriteexistingobject",
										"optional": true
									}
								]
							},
							"a5storage_savefile": {
								"description": "Saves a file to storage",
								"arguments": [
									{
										"name": "storageconnectionstring"
									},
									{
										"name": "filename"
									},
									{
										"name": "itemname"
									},
									{
										"name": "mimetype",
										"optional": true
									},
									{
										"name": "presult",
										"optional": true
									},
									{
										"name": "pdatain",
										"optional": true
									},
									{
										"name": "flagsetreadpermission",
										"optional": true
									},
									{
										"name": "flagoverwriteexistingobject",
										"optional": true
									}
								]
							}
						},
						"t": {
							"a5transform_bulkupdate": {
								"description": "Performs a build update of TransForm data. jsonData is an JSON array of objects. Each object has these properties: formdata, metadata, commands",
								"arguments": [
									{
										"name": "apikey"
									},
									{
										"name": "jsondata"
									}
								]
							},
							"a5transform_createfrominstance": {
								"description": "Create a new TransForm form instance in the hosted TransForm service.",
								"arguments": [
									{
										"name": "apikey"
									},
									{
										"name": "formid"
									},
									{
										"name": "formdatajson"
									},
									{
										"name": "assignto",
										"optional": true
									}
								]
							},
							"a5transform_getdata": {
								"description": "Get Transform Data for a particular Form definition. ",
								"arguments": [
									{
										"name": "apikey"
									},
									{
										"name": "formid"
									},
									{
										"name": "paginated",
										"optional": true
									},
									{
										"name": "pagesize",
										"optional": true
									},
									{
										"name": "pagenumber",
										"optional": true
									},
									{
										"name": "pin",
										"optional": true
									},
									{
										"name": "flagdisplaywaitmessage",
										"optional": true
									}
								]
							},
							"a5transform_onsubmit_postdata": {
								"description": "Post data using the CURL object",
								"arguments": [
									{
										"name": "def"
									},
									{
										"name": "datajson"
									},
									{
										"name": "testmode",
										"optional": true
									}
								]
							},
							"a5transform_updateforminstance": {
								"description": "Updates (INSERT, UPDATE OR DELETE) data for a forminstanceid, or creates a new forminstance.",
								"arguments": [
									{
										"name": "apikey"
									},
									{
										"name": "datajson"
									},
									{
										"name": "forminstanceid"
									},
									{
										"name": "person",
										"optional": true
									},
									{
										"name": "action",
										"optional": true
									},
									{
										"name": "formid",
										"optional": true
									}
								]
							}
						},
						"u": {
							"a5upsize_prompt_primarykey": {
								"description": "prompts for a surrogate primary key.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "primarykey"
									}
								]
							}
						},
						"w": {
							"__index__": {
								"_": {
									"__index__": {
										"a": {
											"a5w_ajaxtojson": {
												"description": " Dumps out JSON from a data source",
												"arguments": [
													{
														"name": "tmpl"
													},
													{
														"name": "do"
													}
												]
											},
											"a5w_analyzewebaccesslogs": {
												"description": "Get a list of requests per minute from web access logs. Show as chart or list.  Can be run on desktop or web. A file name can be passes in on the desktop",
												"arguments": [
													{
														"name": "logfile",
														"optional": true
													}
												]
											},
											"a5w_audittableactionlow": {
												"description": "Used in a Web application to save data to the audit table",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_authenticationkeysactionlow": {
												"description": "Used in a Web application to save/read data to the Authentication Keys table.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													},
													{
														"name": "actiontype"
													}
												]
											}
										},
										"c": {
											"a5w_cell": {
												"description": "Returns data value from a DataObject.",
												"arguments": [
													{
														"name": "dataobject"
													},
													{
														"name": "fieldname"
													},
													{
														"name": "row"
													}
												]
											},
											"a5w_checkboxes": {
												"description": "Generate code for Checkbox controls.",
												"arguments": [
													{
														"name": "choices"
													},
													{
														"name": "name"
													},
													{
														"name": "selected",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "orientation",
														"optional": true
													},
													{
														"name": "events",
														"optional": true
													},
													{
														"name": "id",
														"optional": true
													},
													{
														"name": "separator",
														"optional": true
													},
													{
														"name": "flagusearraysyntaxforsinglechoice",
														"optional": true
													},
													{
														"name": "class",
														"optional": true
													},
													{
														"name": "flagdisabled",
														"optional": true
													},
													{
														"name": "spanclass",
														"optional": true
													},
													{
														"name": "verticalspacebetweencontrols",
														"optional": true
													},
													{
														"name": "customattributes",
														"optional": true
													}
												]
											},
											"a5w_clientsidecalcbuilder": {
												"description": " A builder for creating expressions that can be passed into a5_wdialogunobtrusiveJS()",
												"arguments": [
													{
														"name": "expr"
													},
													{
														"name": "fields"
													},
													{
														"name": "title",
														"optional": true
													}
												]
											},
											"a5w_createupdateobject": {
												"description": "Creates an UpdateObject showing all objects on a form (or web form) that have changed.",
												"arguments": [
													{
														"name": "dataobject"
													},
													{
														"name": "parentdataobject"
													},
													{
														"name": "parent_row_number",
														"optional": true
													}
												]
											}
										},
										"d": {
											"a5w_deletefromauthenticationkeys": {
												"description": "Used in a Web application to delete an entry in the Work Queue. pValues.id is the value of the entry to be deleted.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_deletefromwebapprepository": {
												"description": "Used in a Web application to delete data from the Web Application Repository.",
												"arguments": [
													{
														"name": "key"
													},
													{
														"name": "presult",
														"optional": true
													}
												]
											},
											"a5w_deletefromworkqueue": {
												"description": "Used in a Web application to delete an entry in the Work Queue. pValues.id is the value of the entry to be deleted.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_documenttemplate": {
												"description": "Document template helper"
											}
										},
										"f": {
											"a5w_field": {
												"description": "Returns data value from a DataObject.",
												"arguments": [
													{
														"name": "dataobject"
													},
													{
														"name": "fieldname"
													}
												]
											},
											"a5w_flagworkingprevieworpreview": {
												"description": "Tests if you are in Preview mode, or Working Preview mode.",
												"arguments": [
													{
														"name": "ops",
														"optional": true
													}
												]
											}
										},
										"g": {
											"a5w_getconnectionstringserver": {
												"description": "Open Connection String dialog on the app server and show generated connection string"
											},
											"a5w_getextendeduserinfo": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "userid"
													},
													{
														"name": "flaggetcachedvalue",
														"optional": true
													},
													{
														"name": "mode",
														"optional": true
													}
												]
											},
											"a5w_getfromwebapprepository": {
												"description": "Used in a Web application to read data to the Web Application Repository.",
												"arguments": [
													{
														"name": "key"
													},
													{
														"name": "presult",
														"optional": true
													},
													{
														"name": "flagclientside",
														"optional": true
													}
												]
											},
											"a5w_getlivepreviewfolder": {
												"description": "Get the Live Preview folder"
											}
										},
										"h": {
											"a5w_hasauthenticationkeysdatasource": {
												"description": "Returns true if the web project has an Authentication Keys table"
											}
										},
										"i": {
											"a5w_info": {
												"description": "Create a web page with info about the A5W environment",
												"arguments": [
													{
														"name": "full_page",
														"optional": true
													},
													{
														"name": "include_prodheader",
														"optional": true
													}
												]
											}
										},
										"l": {
											"a5w_label_saveas": {
												"description": "If an label needs to get access to global variables defined in a .a5w page, you must call this, and not label.saveas()",
												"arguments": [
													{
														"name": "layoutname"
													},
													{
														"name": "saveas_format",
														"optional": true
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "order",
														"optional": true
													},
													{
														"name": "filename",
														"optional": true
													},
													{
														"name": "globalvariables",
														"optional": true
													},
													{
														"name": "printoptions",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5w_letter_saveas": {
												"description": "If an letter needs to get access to global variables defined in a .a5w page, you must call this, and not letter.saveas()",
												"arguments": [
													{
														"name": "layoutname"
													},
													{
														"name": "saveas_format",
														"optional": true
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "order",
														"optional": true
													},
													{
														"name": "filename",
														"optional": true
													},
													{
														"name": "globalvariables",
														"optional": true
													},
													{
														"name": "printoptions",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											}
										},
										"m": {
											"a5w_makecontrolid": {
												"description": " Make a control ID ",
												"arguments": [
													{
														"name": "componentname"
													},
													{
														"name": "controlname"
													}
												]
											}
										},
										"n": {
											"a5w_node_service_publish": {
												"description": " Create a node settings content (saved to outputFile - either local project file OR temp file to publish)",
												"arguments": [
													{
														"name": "projname"
													},
													{
														"name": "profile"
													}
												]
											}
										},
										"p": {
											"a5w_publish": {
												"description": " Publish a web project",
												"arguments": [
													{
														"name": "projname"
													},
													{
														"name": "profile"
													},
													{
														"name": "publish_type",
														"optional": true
													},
													{
														"name": "files",
														"optional": true
													},
													{
														"name": "flagoptimizepublishing",
														"optional": true
													},
													{
														"name": "flagpublishdatabasealb",
														"optional": true
													},
													{
														"name": "flagpublishsecuritytables",
														"optional": true
													},
													{
														"name": "flagpublishsupportfiles",
														"optional": true
													},
													{
														"name": "flagcreateaex",
														"optional": true
													},
													{
														"name": "flagpublishselectedonly",
														"optional": true
													},
													{
														"name": "flagsuppressfilestobepublisheddialog",
														"optional": true
													},
													{
														"name": "iisproviderpublish",
														"optional": true
													},
													{
														"name": "flagchecksecuritybeforepublish",
														"optional": true
													},
													{
														"name": "additionaloptions",
														"optional": true
													},
													{
														"name": "flagverifyconnstrings",
														"optional": true
													},
													{
														"name": "pinfromlivetest",
														"optional": true
													},
													{
														"name": "pinout",
														"optional": true
													}
												]
											},
											"a5w_publish2": {
												"description": "A wrapper around the a5w_publish() function to make it easier for create command line programs that automate publishing. Call a5w_publish2(\"help\") to get help on the options.",
												"arguments": [
													{
														"name": "opsin"
													}
												]
											}
										},
										"r": {
											"a5w_radiobuttons": {
												"description": "Used to generate radio buttons for an A5 Web page.",
												"arguments": [
													{
														"name": "choices"
													},
													{
														"name": "name"
													},
													{
														"name": "selected",
														"optional": true
													},
													{
														"name": "style",
														"optional": true
													},
													{
														"name": "orientation",
														"optional": true
													},
													{
														"name": "events",
														"optional": true
													},
													{
														"name": "id",
														"optional": true
													},
													{
														"name": "separator",
														"optional": true
													},
													{
														"name": "class",
														"optional": true
													},
													{
														"name": "flagdisabled",
														"optional": true
													},
													{
														"name": "spanclass",
														"optional": true
													},
													{
														"name": "verticalspacebetweencontrols",
														"optional": true
													},
													{
														"name": "customattributes",
														"optional": true
													}
												]
											},
											"a5w_readfromauthenticationkeys": {
												"description": "Used in a Web application to read data to the Work Queue. pValues.id is the value of the entry to be read. pValues gets populated with values from all fields in the record.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_readfromworkqueue": {
												"description": "Used in a Web application to read data to the Work Queue. pValues.id is the value of the entry to be read. pValues gets populated with values from all fields in the record.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_removerawlogresponsebody": {
												"description": "Remove response body from raw log - normally used to parse out binary content"
											},
											"a5w_report_pdf": {
												"description": "Runs a report and saves it as a PDF file",
												"arguments": [
													{
														"name": "reportname"
													},
													{
														"name": "filename"
													},
													{
														"name": "sqlfilter",
														"optional": true
													},
													{
														"name": "sqlorder",
														"optional": true
													},
													{
														"name": "localfilter",
														"optional": true
													},
													{
														"name": "localorder",
														"optional": true
													},
													{
														"name": "argsxml",
														"optional": true
													},
													{
														"name": "pdfoptions",
														"optional": true
													},
													{
														"name": "reporttype",
														"optional": true
													}
												]
											},
											"a5w_report_saveas": {
												"description": "If an report needs to get access to global variables defined in a .a5w page, you must call this, and not report.saveas(). Filename can be a json string that defines a S3 bucket: e.g. {\"type\": \"Store\",\"ConnectionString\": \"mys3storagestring\",\"objectName\": \"pdfreports/report1.pdf\"}",
												"arguments": [
													{
														"name": "layoutname"
													},
													{
														"name": "saveas_format",
														"optional": true
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "order",
														"optional": true
													},
													{
														"name": "filename",
														"optional": true
													},
													{
														"name": "_gv",
														"optional": true
													},
													{
														"name": "printoptions",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5w_report_to_docgen": {
												"description": "Public user defined function.",
												"arguments": [
													{
														"name": "reportname"
													},
													{
														"name": "docgenname"
													}
												]
											},
											"a5w_reportbooster": {
												"description": "Report booster returns report servers supported"
											},
											"a5w_rulemanager": {
												"description": " Load the A5 Rule Manager",
												"arguments": [
													{
														"name": "projname"
													}
												]
											},
											"a5w_rulesave": {
												"description": " Save a set of Validation rules away with a name",
												"arguments": [
													{
														"name": "prules"
													},
													{
														"name": "name"
													},
													{
														"name": "projname"
													}
												]
											},
											"a5w_rulesenum": {
												"description": " List validation rules defined in a project",
												"arguments": [
													{
														"name": "projname"
													},
													{
														"name": "lglobal",
														"optional": true
													}
												]
											},
											"a5w_rulesload": {
												"description": " Load Validation rules from file",
												"arguments": [
													{
														"name": "p"
													},
													{
														"name": "projname"
													}
												]
											},
											"a5w_run_component": {
												"description": "Executes a Web Component. Picks the appropriate function to run the component by referencing the .ComponentType property",
												"arguments": [
													{
														"name": "tmpl"
													},
													{
														"name": "passedrequest",
														"optional": true
													},
													{
														"name": "passedsession",
														"optional": true
													},
													{
														"name": "passedresponse",
														"optional": true
													},
													{
														"name": "passedserversetting",
														"optional": true
													},
													{
														"name": "pagevariables",
														"optional": true
													}
												]
											}
										},
										"s": {
											"a5w_saveas": {
												"description": "If a layout needs to get access to global variables defined in a .a5w page, you must call this, and not report.saveas()",
												"arguments": [
													{
														"name": "layouttype"
													},
													{
														"name": "layoutname"
													},
													{
														"name": "saveas_format",
														"optional": true
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "order",
														"optional": true
													},
													{
														"name": "filename",
														"optional": true
													},
													{
														"name": "globalvariables",
														"optional": true
													},
													{
														"name": "printoptions",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											},
											"a5w_savetoauthenticationkeys": {
												"description": "Used in a Web application to save data to the Work Queue.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_savetowebapprepository": {
												"description": "Used in a Web application to save data to the Web Application Repository.",
												"arguments": [
													{
														"name": "key"
													},
													{
														"name": "data"
													},
													{
														"name": "objecttype",
														"optional": true
													},
													{
														"name": "componentguid",
														"optional": true
													},
													{
														"name": "userid",
														"optional": true
													},
													{
														"name": "securitygroups",
														"optional": true
													},
													{
														"name": "presultin",
														"optional": true
													},
													{
														"name": "flagallowclientsideaccess",
														"optional": true
													}
												]
											},
											"a5w_savetoworkqueue": {
												"description": "Used in a Web application to save data to the Work Queue.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_selectnamedresource": {
												"description": "Select a Named Resource for resource provides such as oAuth providers",
												"arguments": [
													{
														"name": "namedresource",
														"optional": true
													},
													{
														"name": "options",
														"optional": true
													}
												]
											}
										},
										"t": {
											"a5w_threadsinrawlog": {
												"description": "Find the thread names of all threads used in a Raw HTTP Log"
											}
										},
										"u": {
											"a5w_updateauthenticationkeys": {
												"description": "Used in a Web application to update data in the Work Queue. pValues.id is the value of the entry to be update. pValues must contain values for all fields to be updated.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_updateworkqueue": {
												"description": "Used in a Web application to update data in the Authentication Keys table. pValues.id is the value of the entry to be update. pValues must contain values for all fields to be updated.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													}
												]
											},
											"a5w_urlavailable": {
												"description": "Test if a URL is available using CURL. 'ShowWait' will show a wait dialog if the connection takes a long time.  The default is .T.",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "showwait",
														"optional": true
													}
												]
											}
										},
										"w": {
											"a5w_workqueueactionlow": {
												"description": "Used in a Web application to save/read data to the Work Queue.",
												"arguments": [
													{
														"name": "pvalues"
													},
													{
														"name": "presult"
													},
													{
														"name": "actiontype"
													}
												]
											}
										}
									}
								},
								"c": {
									"__index__": {
										"b": {
											"__index__": {
												"_": {
													"__index__": {
														"a": {
															"a5wcb_alphashellqrcodes": {
																"arguments": [
																	{
																		"name": "componentname",
																		"optional": true
																	}
																]
															}
														},
														"c": {
															"a5wcb_chromeworkingpreviewfilename": {
																"description": "Generates a temp filename for chrome working preview. File will not get deleted when session expired. all files from previous day and older are deleted"
															},
															"a5wcb_circularprogressbuilder": {
																"description": "Genie to generate settings object for circular progress inticator",
																"arguments": [
																	{
																		"name": "json",
																		"optional": true
																	},
																	{
																		"name": "ph",
																		"optional": true
																	},
																	{
																		"name": "flagpromptfordiv",
																		"optional": true
																	},
																	{
																		"name": "controls",
																		"optional": true
																	}
																]
															},
															"a5wcb_cloneworkspace": {
																"description": "Clone a workspace to a new worspace in a different folder"
															},
															"a5wcb_convertfriendlymenutoexpandingmenujsondata": {
																"description": "Takes a menu definition (crlf data with tab indentation) and converts to json data",
																"arguments": [
																	{
																		"name": "menu"
																	},
																	{
																		"name": "tmplin",
																		"optional": true
																	},
																	{
																		"name": "flaglowlevel",
																		"optional": true
																	}
																]
															},
															"a5wcb_createdialogusingxbasic": {
																"description": "Create a dialog component programmatically.",
																"arguments": [
																	{
																		"name": "wp"
																	},
																	{
																		"name": "componentname"
																	},
																	{
																		"name": "flagshowprogress",
																		"optional": true
																	}
																]
															},
															"a5wcb_createframelayoutarray": {
																"arguments": [
																	{
																		"name": "tmpl"
																	},
																	{
																		"name": "a_fields"
																	},
																	{
																		"name": "flag_use_row_number",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5wcb_creategridfrommetadata": {
																"description": "Create a grid component in the curent project from the published metadata file and the published component",
																"arguments": [
																	{
																		"name": "metadatafilename",
																		"optional": true
																	},
																	{
																		"name": "openinbuilder",
																		"optional": true
																	}
																]
															}
														},
														"d": {
															"a5wcb_defineclasses": {
																"description": " Define the global classes used with web components"
															}
														},
														"e": {
															"a5wcb_edit_html": {
																"description": "Public user defined function.",
																"arguments": [
																	{
																		"name": "html"
																	},
																	{
																		"name": "title",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5wcb_edit_json": {
																"description": "Public user defined function.",
																"arguments": [
																	{
																		"name": "json"
																	},
																	{
																		"name": "title",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5wcb_exportstaticdatatosql": {
																"description": "Exports static data (in crlf delimited list or JSON) to a SQL table. SQL table is created from the 'fields' definition.",
																"arguments": [
																	{
																		"name": "data"
																	},
																	{
																		"name": "fields"
																	},
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "tablename"
																	},
																	{
																		"name": "sequencename",
																		"optional": true
																	},
																	{
																		"name": "overwriteoption",
																		"optional": true
																	},
																	{
																		"name": "rowcount",
																		"optional": true
																	}
																]
															}
														},
														"f": {
															"a5wcb_frametemplate": {
																"description": " Computes template for frames in dialogs and grids",
																"arguments": [
																	{
																		"name": "mode"
																	},
																	{
																		"name": "tmpl"
																	},
																	{
																		"name": "a_fields"
																	},
																	{
																		"name": "a_columns"
																	},
																	{
																		"name": "colspan",
																		"optional": true
																	}
																]
															},
															"a5wcb_friendlyname_decode": {
																"description": "Transforms a Web Project friendly name to a file name",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															},
															"a5wcb_friendlyname_encode": {
																"description": "Transforms a Web Project filename to a friendly name",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															}
														},
														"g": {
															"a5wcb_getcomponentguid": {
																"description": "Gets the internal GUID for the component (this GUID uniquely identifies the compoennt). Component name format is [projectname]\\componentname. E.g. [project1]\\mytabbedUI",
																"arguments": [
																	{
																		"name": "componentname"
																	}
																]
															},
															"a5wcb_getlinksfromschema": {
																"description": "Gets one-to-many and one-to-one links for each table in a database schema",
																"arguments": [
																	{
																		"name": "sc"
																	}
																]
															},
															"a5wcb_getprimarykey": {
																"description": "Gets the primary key column(s) for a table",
																"arguments": [
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "tablename"
																	}
																]
															},
															"a5wcb_getprojectfmname": {
																"description": "Returns the Web Project that a given filename is in",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															},
															"a5wcb_getstylenames": {
																"description": "Get info (in json format) about all styles (system, local and global)"
															},
															"a5wcb_googleauthenticatorqrcode": {
																"description": "Displays a QR code to register a new app in Google Authenticator",
																"arguments": [
																	{
																		"name": "issuer"
																	},
																	{
																		"name": "userid"
																	},
																	{
																		"name": "secret"
																	},
																	{
																		"name": "width",
																		"optional": true
																	},
																	{
																		"name": "height",
																		"optional": true
																	},
																	{
																		"name": "returnb64image",
																		"optional": true
																	}
																]
															},
															"a5wcb_graphqlquerybuilder": {
																"description": "GraphQL query builder. You can set websiteBaseURL to [workingPreview:<projectname>]. If <projectName> is not supplied, current project is assumed",
																"arguments": [
																	{
																		"name": "websitebaseurl"
																	},
																	{
																		"name": "servicename"
																	},
																	{
																		"name": "authorizationtype",
																		"optional": true
																	},
																	{
																		"name": "querystring",
																		"optional": true
																	},
																	{
																		"name": "variablesjson",
																		"optional": true
																	},
																	{
																		"name": "authorizationvariable",
																		"optional": true
																	},
																	{
																		"name": "flagshowwarningonexit",
																		"optional": true
																	}
																]
															}
														},
														"l": {
															"a5wcb_linkfilterbuildercs": {
																"description": "Create a filter for SQL based Grid component",
																"arguments": [
																	{
																		"name": "fieldnames_types"
																	},
																	{
																		"name": "where_clause"
																	},
																	{
																		"name": "sourcefieldlist",
																		"optional": true
																	},
																	{
																		"name": "arguments",
																		"optional": true
																	},
																	{
																		"name": "flagdbfmode",
																		"optional": true
																	},
																	{
																		"name": "flagshowhyperlinkforhelponfiltering",
																		"optional": true
																	},
																	{
																		"name": "vsqlin",
																		"optional": true
																	}
																]
															}
														},
														"p": {
															"a5wcb_promptalphalaunchsvgicon": {
																"description": "Used in AlphaLaunch to prompt for a SVG icon",
																"arguments": [
																	{
																		"name": "svg"
																	}
																]
															},
															"a5wcb_prompthighordertext": {
																"description": "Prompt for a text value. High order characters are uni-code encoded.",
																"arguments": [
																	{
																		"name": "txtencoded"
																	},
																	{
																		"name": "controltype",
																		"optional": true
																	},
																	{
																		"name": "flagshowopeninhtmleditor",
																		"optional": true
																	},
																	{
																		"name": "flagshowunicodeoption",
																		"optional": true
																	},
																	{
																		"name": "dlgtitle",
																		"optional": true
																	},
																	{
																		"name": "mode2",
																		"optional": true
																	},
																	{
																		"name": "wpin",
																		"optional": true
																	},
																	{
																		"name": "flagbuttonlabel",
																		"optional": true
																	}
																]
															},
															"a5wcb_promptstatictext": {
																"arguments": [
																	{
																		"name": "text"
																	},
																	{
																		"name": "mode",
																		"optional": true
																	},
																	{
																		"name": "vin",
																		"optional": true
																	}
																]
															}
														},
														"r": {
															"a5wcb_removejavascriptcomments": {
																"description": "Remove comments from a Javascript function ",
																"arguments": [
																	{
																		"name": "js"
																	}
																]
															},
															"a5wcb_removejavascriptevents": {
																"description": "Remove javascript attributes and hrefs from html to prepare it for display in the local preview window",
																"arguments": [
																	{
																		"name": "txt"
																	}
																]
															},
															"a5wcb_replace_comp_style": {
																"description": "Replace the style used by one or more selected components.  If a list of components is supplied, 'runsilent' can be set to True.  The component selection dialog will not appear if 'runsilent' is True.  If a style is not specified, the current default style is used.  A dialog will always show the progress of the operation.",
																"arguments": [
																	{
																		"name": "style_name",
																		"optional": true
																	},
																	{
																		"name": "project",
																		"optional": true
																	},
																	{
																		"name": "component_list",
																		"optional": true
																	},
																	{
																		"name": "title",
																		"optional": true
																	},
																	{
																		"name": "runsilent",
																		"optional": true
																	}
																]
															}
														},
														"s": {
															"a5wcb_sanitize_html_id": {
																"description": "Checks if an HTML element ID is valid.",
																"arguments": [
																	{
																		"name": "id"
																	},
																	{
																		"name": "mode",
																		"optional": true
																	}
																]
															},
															"a5wcb_setpagesecurity": {
																"arguments": [
																	{
																		"name": "relativepagename"
																	},
																	{
																		"name": "setting",
																		"optional": true
																	},
																	{
																		"name": "groups",
																		"optional": true
																	}
																]
															},
															"a5wcb_showcomponentdependencies": {
																"description": "Public user defined function.",
																"arguments": [
																	{
																		"name": "filename"
																	}
																]
															},
															"a5wcb_sqlfilter_to_mongo": {
																"description": "Takes a SQL WHERE clause and return a JSON string showing the MongoDB query.",
																"arguments": [
																	{
																		"name": "filter"
																	}
																]
															},
															"a5wcb_ssrs_connstringbuilder": {
																"description": "Build a connection string to a SQL Server Reporting Services server.",
																"arguments": [
																	{
																		"name": "json"
																	}
																]
															},
															"a5wcb_svgiconselector": {
																"description": "SVG Icon selector",
																"arguments": [
																	{
																		"name": "icon"
																	},
																	{
																		"name": "style_name"
																	},
																	{
																		"name": "tmplin",
																		"optional": true
																	}
																]
															},
															"a5wcb_svgiconselectorgeneric": {
																"description": "SVG icon picker",
																"arguments": [
																	{
																		"name": "icon"
																	},
																	{
																		"name": "svg"
																	},
																	{
																		"name": "css",
																		"optional": true
																	},
																	{
																		"name": "cn",
																		"optional": true
																	},
																	{
																		"name": "dcn",
																		"optional": true
																	},
																	{
																		"name": "iconnamesjson",
																		"optional": true
																	},
																	{
																		"name": "tmplin",
																		"optional": true
																	},
																	{
																		"name": "style_name",
																		"optional": true
																	}
																]
															}
														},
														"t": {
															"a5wcb_tabtemplateajax": {
																"description": "Generates a template for an HTML tab container. Returns .html and .js properties. tabList is a crlf delimited list of tab labels.",
																"arguments": [
																	{
																		"name": "tablist"
																	},
																	{
																		"name": "position",
																		"optional": true
																	},
																	{
																		"name": "initialtabpanenumber",
																		"optional": true
																	},
																	{
																		"name": "initialselection",
																		"optional": true
																	},
																	{
																		"name": "opsin",
																		"optional": true
																	},
																	{
																		"name": "tmpl",
																		"optional": true
																	}
																]
															},
															"a5wcb_transformutilities_createtablesfromtransformformdef": {
																"description": "Takes a TransForm form definition and an optional tableMap, and fieldMap and create CTRATE TABLE statements ",
																"arguments": [
																	{
																		"name": "transformformdef"
																	},
																	{
																		"name": "toptablename"
																	},
																	{
																		"name": "connectionstring"
																	},
																	{
																		"name": "tablemap",
																		"optional": true
																	},
																	{
																		"name": "fieldmap",
																		"optional": true
																	},
																	{
																		"name": "mincharfieldsize",
																		"optional": true
																	},
																	{
																		"name": "minnumericfieldsize",
																		"optional": true
																	},
																	{
																		"name": "mindecimals",
																		"optional": true
																	},
																	{
																		"name": "flagoverwriteexistingtables",
																		"optional": true
																	},
																	{
																		"name": "flagexecutesqlcomands",
																		"optional": true
																	},
																	{
																		"name": "forminstanceidfieldname",
																		"optional": true
																	},
																	{
																		"name": "otheroptionsjson",
																		"optional": true
																	},
																	{
																		"name": "flaglocal",
																		"optional": true
																	},
																	{
																		"name": "apikey",
																		"optional": true
																	},
																	{
																		"name": "jsona",
																		"optional": true
																	}
																]
															}
														},
														"u": {
															"a5wcb_updatecompiledgrids": {
																"description": "Loops through all grid components in a project, then creates a compiled file as needed for Ajax enabled grids (._a5wcmp_compiled)",
																"arguments": [
																	{
																		"name": "showwarning",
																		"optional": true
																	},
																	{
																		"name": "chkexists",
																		"optional": true
																	},
																	{
																		"name": "silent",
																		"optional": true
																	},
																	{
																		"name": "mode",
																		"optional": true
																	},
																	{
																		"name": "resavegrid",
																		"optional": true
																	},
																	{
																		"name": "popsin",
																		"optional": true
																	}
																]
															},
															"a5wcb_updatemanifestfiles": {
																"description": "Update all web component Manifest files",
																"arguments": [
																	{
																		"name": "showwarning",
																		"optional": true
																	},
																	{
																		"name": "chkexists",
																		"optional": true
																	},
																	{
																		"name": "silent",
																		"optional": true
																	},
																	{
																		"name": "resavecomp",
																		"optional": true
																	},
																	{
																		"name": "compfile",
																		"optional": true
																	}
																]
															},
															"a5wcb_userdefinedcomponentlist": {
																"description": "Open a builder for a Web Component",
																"arguments": [
																	{
																		"name": "componenttype"
																	},
																	{
																		"name": "mode",
																		"optional": true
																	},
																	{
																		"name": "flagreadfrommemory",
																		"optional": true
																	},
																	{
																		"name": "flagcommunityedition",
																		"optional": true
																	}
																]
															},
															"a5wcb_ux_register_userdefined_control": {
																"description": "Used in a5wcb_ux_addinControls() to register any user defined controls (e.g. a5wcb_uxdefineControl_formView()) ",
																"arguments": [
																	{
																		"name": "pbase"
																	},
																	{
																		"name": "pnew"
																	}
																]
															}
														},
														"w": {
															"a5wcb_warn_prerendereduxcomponents": {}
														}
													}
												}
											}
										}
									}
								},
								"e": {
									"a5webform_gen_x": {
										"description": "Generates the DataObject definition for the specified DataObject number",
										"arguments": [
											{
												"name": "formdef"
											},
											{
												"name": "dataobject_num"
											},
											{
												"name": "code_type",
												"optional": true
											},
											{
												"name": "platform",
												"optional": true
											},
											{
												"name": "css_name",
												"optional": true
											}
										]
									}
								},
								"s": {
									"__index__": {
										"_": {
											"__index__": {
												"a": {
													"a5ws_add_group": {
														"description": "Add a group to the list of security groups for the current project. 'Request' pointer must be provided if run in web page.",
														"arguments": [
															{
																"name": "group_name"
															},
															{
																"name": "localrequest",
																"optional": true
															}
														]
													}
												},
												"c": {
													"a5ws_changeloggedinuserpassword": {
														"description": "Web Security - Change a logged in user's password. This can only be run from the Application Server",
														"arguments": [
															{
																"name": "originalpassword"
															},
															{
																"name": "newpassword"
															},
															{
																"name": "confirmpassword"
															},
															{
																"name": "request",
																"optional": true
															},
															{
																"name": "session",
																"optional": true
															}
														]
													},
													"a5ws_cleanpagesecurity": {
														"description": "Cleans 'pages.SecuritySettings' file to remove any files that no longer exist in the project.  If 'project' is not supplied, the current project is used",
														"arguments": [
															{
																"name": "project",
																"optional": true
															}
														]
													},
													"a5ws_createsecurityfiles": {
														"description": "Create Default Web Security Files for Web Project. Used in Web Application Server",
														"arguments": [
															{
																"name": "projpath",
																"optional": true
															}
														]
													}
												},
												"d": {
													"a5ws_delete_group": {
														"description": "Delete a web security group in the current project.  Group_value can be a group 'name' or a group 'guid'. Default for 'confirm_empty' is False. If True, the group will only be deleted if no users are assigned to group. 'Request' pointer must be provided if run in web page.",
														"arguments": [
															{
																"name": "group_value"
															},
															{
																"name": "confirm_empty",
																"optional": true
															},
															{
																"name": "localrequest",
																"optional": true
															}
														]
													},
													"a5ws_delete_user": {
														"description": "Delete a web security user in the current project.  User_value can be a user 'guid' or a user 'userid'. 'Request' pointer must be provided if run in web page.",
														"arguments": [
															{
																"name": "user_value"
															},
															{
																"name": "localrequest",
																"optional": true
															}
														]
													}
												},
												"e": {
													"a5ws_exportusers": {
														"description": "Export selected records from the current project web users table to an external table"
													}
												},
												"g": {
													"__index__": {
														"e": {
															"__index__": {
																"t": {
																	"__index__": {
																		"_": {
																			"a5ws_get_group_assignments": {
																				"description": "Return a CR-LF delimited list of users assigned to a particular group in the current project.  FlagWeb default value is .F.  FlagWeb = .T. will output list in a format used in web components for checkboxes, radio buttons, list boxes and dropdowns.  'Request' pointer must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "group_name"
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					},
																					{
																						"name": "flagweb",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_groups": {
																				"description": "Show a CR-LF list of web groups  for the current project.  FlagWeb default value is .F.  FlagWeb = .T. will output list in a format used in web components for checkboxes, radio buttons, list boxes and dropdowns.  'Request' pointer must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "localrequest",
																						"optional": true
																					},
																					{
																						"name": "flagweb",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_guid_from_group": {
																				"description": "Returns a group GUID from a group name.  'Request' must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "group_name"
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_guid_from_ulink": {
																				"description": "Returns a user GUID from a user ulink value if the ulink option is configured and a value is found.  'Request' is added automatically by the server when run from a web page.",
																				"arguments": [
																					{
																						"name": "ulink"
																					},
																					{
																						"name": "request",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_guid_from_user": {
																				"description": "Returns a user GUID from a userid.  ",
																				"arguments": [
																					{
																						"name": "userid"
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_lockedoutusers": {
																				"description": "Returns a crlf() delimited list of userid's currently locked out by the web security. Returns blank if no one is locked out.  If a format is specified, returns output in that format (U=userid,T=untiltime as character). ",
																				"arguments": [
																					{
																						"name": "format",
																						"optional": true
																					},
																					{
																						"name": "notused",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_page_list": {
																				"description": "Get a List of Pages Currently allowed by the Web Security settings.  Use in Web Dialog component",
																				"arguments": [
																					{
																						"name": "request",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_security_ques": {
																				"description": "Get Web Security Questions in CR-LF list. Use in Web Dialog component.",
																				"arguments": [
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_ulink_from_guid": {
																				"description": "Returns a users 'ulink' value from a user_guid in the current project.  If the user link field is not activated, an empty value is returned. 'Request' is added automatically by the server when run from a web page",
																				"arguments": [
																					{
																						"name": "user_guid"
																					},
																					{
																						"name": "request",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_user_assignments": {
																				"description": "Return a CR-LF delimited list of groups assigned to a particular web security user in the current project.  Accepts uservalue as 'ulink' or 'userid' ('userid' only for IIS and Active Directory)",
																				"arguments": [
																					{
																						"name": "uservalue"
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_user_count": {
																				"description": " Returns the total number of users in the security table for this web project."
																			},
																			"a5ws_get_user_from_guid": {
																				"description": "Returns a userid from a user_guid in the current project.  'Request' pointer must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "user_guid"
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_user_values": {
																				"description": "Return values from web user table as 'CurrentForm.Controls.<fieldname>.value' for each field in table.  Accepts user identification as 'request.variables.guid','request.variables.userid' or 'request.variables.ulink'.",
																				"arguments": [
																					{
																						"name": "currentform"
																					},
																					{
																						"name": "request",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_users": {
																				"description": "Show a CR-LF list of users for the current project.  FlagWeb default value is .F.  FlagWeb = .T. will output list in a format used in web components for checkboxes, radio buttons, list boxes and dropdowns.  'Request' pointer must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "nullrequest",
																						"optional": true
																					},
																					{
																						"name": "flagweb",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_users_paged": {
																				"description": "Show a CR-LF list of users for the current project.  FlagWeb default value is .F.  FlagWeb = .T. will output list in a format used in web components for checkboxes, radio buttons, list boxes and dropdowns.  'Request' pointer must be provided if run in web page.",
																				"arguments": [
																					{
																						"name": "pageindex"
																					},
																					{
																						"name": "pagesize"
																					},
																					{
																						"name": "flagweb",
																						"optional": true
																					}
																				]
																			},
																			"a5ws_get_webuser_values": {
																				"description": "Return values from web user table as 'CurrentForm.Controls.<fieldname>.value' for each field in table.  'UserValue' overrides values passed by the request system variable.  Accepts user identification as 'UserValue.guid','UserValue.userid' or 'UserValue.ulink'.",
																				"arguments": [
																					{
																						"name": "currentform"
																					},
																					{
																						"name": "uservalue",
																						"optional": true
																					},
																					{
																						"name": "localrequest",
																						"optional": true
																					}
																				]
																			}
																		},
																		"a": {
																			"a5ws_getaltloginlistforcurrentuser": {
																				"description": "Get a list of all alternative logins assigned to the curent user. 'ResourceProviders' will be used as the field name if one is not supplied.  Only used on applciation server",
																				"arguments": [
																					{
																						"name": "fieldname",
																						"optional": true
																					}
																				]
																			}
																		},
																		"c": {
																			"a5ws_getcurrentuser": {
																				"description": "Get the 'UserName (UserId) of the current logged in user."
																			},
																			"a5ws_getcurrentuserresourcevalues": {
																				"description": "Get an Access Token for the named resource for the current user, who may not be logged in",
																				"arguments": [
																					{
																						"name": "namedresource"
																					},
																					{
																						"name": "options",
																						"optional": true
																					}
																				]
																			}
																		},
																		"g": {
																			"a5ws_getgroupsdialog": {
																				"description": "Returns a list of security groups defined for the current web project. Used in UX server-side events"
																			}
																		},
																		"s": {
																			"a5ws_getsecurityproperty": {
																				"description": "Retries a property from the security framework",
																				"arguments": [
																					{
																						"name": "property"
																					}
																				]
																			},
																			"a5ws_getsecuritysettings": {
																				"description": "Gets security settings as a JSON string. ",
																				"arguments": [
																					{
																						"name": "tmpl"
																					}
																				]
																			}
																		},
																		"u": {
																			"a5ws_getuservaluesactivedirectory": {
																				"description": "Get user security values from Active Directory for the specified user.  If UserName is blank, data will be for current logged in user. AdditionalUserAttributeNames is a crlf() or comma delimited list of additional attributes. ",
																				"arguments": [
																					{
																						"name": "username",
																						"optional": true
																					},
																					{
																						"name": "additionalattributes",
																						"optional": true
																					}
																				]
																			}
																		}
																	}
																}
															}
														}
													}
												},
												"i": {
													"a5ws_importusers": {
														"description": "Import selected User records from an external table into the current project web security users table"
													},
													"a5ws_importusersdbf": {
														"description": "Import selected User records from an external table into the current project web security users table"
													}
												},
												"l": {
													"a5ws_lockoutuserrelease": {
														"description": "Web Security - Release the User Value if it is currently locked",
														"arguments": [
															{
																"name": "uservalue"
															},
															{
																"name": "notused",
																"optional": true
															}
														]
													},
													"a5ws_lockoutuserset": {
														"description": "Web Security - Lockout the User Value until the set time / date. If 'UntilTime' is not entered, the User Value is locked out indefinitely until manually released",
														"arguments": [
															{
																"name": "uservalue"
															},
															{
																"name": "untiltime",
																"optional": true
															},
															{
																"name": "notused",
																"optional": true
															}
														]
													},
													"a5ws_lockoutuserstatus": {
														"description": "Determine if a specific UserValue is locked out. Returns blank if UserValue not locked out, and returns 'locked out until time' as character if locked out.",
														"arguments": [
															{
																"name": "uservalue"
															},
															{
																"name": "notused",
																"optional": true
															}
														]
													},
													"a5ws_logged_in_user_values": {
														"description": "Show available field values for current logged in user.  All values will return as character.",
														"arguments": [
															{
																"name": "preturn",
																"optional": true
															},
															{
																"name": "request",
																"optional": true
															},
															{
																"name": "session",
																"optional": true
															}
														]
													},
													"a5ws_login_user": {
														"description": "Log in user on a web page using supplied values. Returns <pointer>.error, <pointer>.RedirectURL.  If error = .F. , RedirectURL will contain the target page.  If error = .T., it will return the login redirect page.",
														"arguments": [
															{
																"name": "userid"
															},
															{
																"name": "password"
															},
															{
																"name": "targetpage",
																"optional": true
															},
															{
																"name": "localrequest",
																"optional": true
															},
															{
																"name": "localsession",
																"optional": true
															},
															{
																"name": "localresponse",
																"optional": true
															}
														]
													},
													"a5ws_logoutuser": {
														"description": "Log out the current user and remove the remember me cookie.  This can only be used on a web page.",
														"arguments": [
															{
																"name": "localsession",
																"optional": true
															},
															{
																"name": "localrequest",
																"optional": true
															},
															{
																"name": "localresponse",
																"optional": true
															}
														]
													}
												},
												"o": {
													"a5ws_openwebsecurity": {
														"description": "Display the Web Security options available for this project",
														"arguments": [
															{
																"name": "project",
																"optional": true
															},
															{
																"name": "flagshowasmenu",
																"optional": true
															}
														]
													}
												},
												"p": {
													"a5ws_pagesecurity": {
														"description": "Assign security permissions for web pages",
														"arguments": [
															{
																"name": "pagename",
																"optional": true
															}
														]
													},
													"a5ws_promptduration": {
														"description": " Get a duration ",
														"arguments": [
															{
																"name": "duration"
															},
															{
																"name": "title"
															}
														]
													}
												},
												"r": {
													"a5ws_randompassword": {
														"description": "Generate a new random password that meets the current security settings.  Will only return a password when running on the Application Server"
													},
													"a5ws_refreshpasswordencryptionutility": {
														"description": "Utility to convert encrypted stored passwords to the latest methods.  This should only be run once.",
														"arguments": [
															{
																"name": "uselegacy",
																"optional": true
															}
														]
													},
													"a5ws_reloadwebsecurity": {
														"description": " Reload  the web security data for the current application - Must be run from web page or component"
													},
													"a5ws_revalidatepassword": {
														"description": "Web Security - Verify the currently logged in user's password ONLY. This can only be run from the Application Server",
														"arguments": [
															{
																"name": "password"
															},
															{
																"name": "localrequest",
																"optional": true
															}
														]
													}
												},
												"s": {
													"a5ws_save_user_values": {
														"description": "Save values in the 'CurrentForm' controls that match fields in the user table for the current project.  Used in Web Dialog component. ",
														"arguments": [
															{
																"name": "currentform"
															},
															{
																"name": "request",
																"optional": true
															}
														]
													},
													"a5ws_save_webuser_values": {
														"description": "Validate & Save values in the 'CurrentForm' controls that match fields in the user table for the current project. 'UserValue' overrides values passed by the request system variable. Accepts values as 'UserValue.Email', 'UserValue.Ulink', etc",
														"arguments": [
															{
																"name": "currentform"
															},
															{
																"name": "uservalue",
																"optional": true
															},
															{
																"name": "request",
																"optional": true
															}
														]
													},
													"a5ws_saveuserswithdialog": {
														"description": "Save web security values in dialog2 component.  Normally placed in 'afterDialogValidate' server side event.",
														"arguments": [
															{
																"name": "e"
															},
															{
																"name": "rtc"
															}
														]
													},
													"a5ws_securityactive": {
														"description": "Determine if web security is active. Used only in web pages and components",
														"arguments": [
															{
																"name": "localrequest",
																"optional": true
															},
															{
																"name": "r",
																"optional": true
															}
														]
													},
													"a5ws_securityques": {
														"description": "Deprecated - use a5ws_SecurityQuestions()"
													},
													"a5ws_securityquestions": {
														"description": "Web Security - Enter / Edit the list of security questions used for user validation"
													},
													"a5ws_securitysettings": {
														"description": "Enter / Edit web security properties for current project",
														"arguments": [
															{
																"name": "project",
																"optional": true
															}
														]
													}
												},
												"u": {
													"a5ws_user_file_field_list": {
														"description": "Retrieve a list of active fields in CR-LF list for web user table in the current project. Format - n - fieldnames, t - simple field type, w - field width.  ",
														"arguments": [
															{
																"name": "format",
																"optional": true
															},
															{
																"name": "request",
																"optional": true
															}
														]
													},
													"a5ws_user_groups_dialog": {
														"description": "Displays the add user and groups dialog for the current Web project",
														"arguments": [
															{
																"name": "project",
																"optional": true
															},
															{
																"name": "mode",
																"optional": true
															}
														]
													}
												},
												"v": {
													"a5ws_validate_webuser_values": {
														"description": "Validate values only in the 'CurrentForm' controls that match fields in the user table for the current project. a5ws_Validate_WebUser_Values.errors = .F. if validated 'UserValue' overrides values passed by the request system variable. Accepts values as 'UserValue.Email', 'UserValue.Ulink', etc ",
														"arguments": [
															{
																"name": "currentform"
															},
															{
																"name": "uservalue",
																"optional": true
															},
															{
																"name": "request",
																"optional": true
															}
														]
													},
													"a5ws_validateuserswithdialog": {
														"description": "Validate web security values in dialog2 component.  Normally placed in 'dialogValidate' server side event.",
														"arguments": [
															{
																"name": "e"
															},
															{
																"name": "rtc"
															}
														]
													},
													"a5ws_verifysqldataconfig": {
														"description": "Used by web security to verify if SQL tables are used by security and if they are valid and can be accessed. ",
														"arguments": [
															{
																"name": "project",
																"optional": true
															}
														]
													}
												},
												"w": {
													"a5ws_webuser_exists": {
														"description": "Will return .T. if a user with this userid exists in the Web Security",
														"arguments": [
															{
																"name": "userid"
															},
															{
																"name": "localrequest",
																"optional": true
															}
														]
													}
												}
											}
										}
									}
								},
								"t": {
									"a5wtester": {
										"description": "A basic test harness for A5W pages",
										"arguments": [
											{
												"name": "a5wcode"
											},
											{
												"name": "directory",
												"optional": true
											},
											{
												"name": "session_vars",
												"optional": true
											},
											{
												"name": "request_vars",
												"optional": true
											}
										]
									}
								}
							}
						}
					}
				},
				"b": {
					"abs": {
						"description": "Returns the absolute value of a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					}
				},
				"c": {
					"acos": {
						"description": "Returns the arc cosine of an angle expressed in radians.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					},
					"action_script_edit": {
						"description": "Launch Editor for editing an old A5 action script.",
						"arguments": [
							{
								"name": "script"
							}
						]
					}
				},
				"d": {
					"adb_color_load": {
						"description": "Reload user defined colors from the ADB file."
					},
					"add_branch_leaves": {
						"description": "Add a leaf for every branch in a tree.",
						"arguments": [
							{
								"name": "branches"
							},
							{
								"name": "separator",
								"optional": true
							}
						]
					},
					"add_bus_days": {
						"description": "Adds business days to a date, ignoring weekends. AddDays can be positive or negative. If flag is \"yes\", then holidays are also ignored. If holidayTable is not specified, then default holiday table (see View/Settings) is used.   To use a SQL datasource, 'holidayTable' can be a JSON string with these properties: connectionString, table, column. e.g. {connectionString: 'northwind', table: 'holidays', column: 'dates'}",
						"arguments": [
							{
								"name": "startdate"
							},
							{
								"name": "adddays"
							},
							{
								"name": "flag",
								"optional": true
							},
							{
								"name": "holidaytable",
								"optional": true
							}
						]
					},
					"addmonths": {
						"description": "Adds a number of months to a date.",
						"arguments": [
							{
								"name": "date"
							},
							{
								"name": "months"
							}
						]
					},
					"addyears": {
						"description": "Adds a number of years to a date.",
						"arguments": [
							{
								"name": "date"
							},
							{
								"name": "years"
							}
						]
					},
					"adhocview": {
						"description": "Displays two listboxes- available fields  and selected fields - to generate an ad-hoc browse.",
						"arguments": [
							{
								"name": "table_set_name",
								"optional": true
							},
							{
								"name": "readonly",
								"optional": true
							},
							{
								"name": "show_table_set_selector",
								"optional": true
							}
						]
					}
				},
				"g": {
					"age": {
						"description": "Computes a person's age. If AsOfDate is not supplied, then age as of today is computed. If AsOfDate is supplied, then age on the AsOfDate is computed.",
						"arguments": [
							{
								"name": "dob"
							},
							{
								"name": "asofdate",
								"optional": true
							}
						]
					}
				},
				"l": {
					"alert": {
						"description": "Displays a message box",
						"arguments": [
							{
								"name": "msg"
							}
						]
					},
					"all_variables": {
						"description": "Return all scoped variables in the context."
					},
					"allow_editing": {
						"description": "Reports if editing is allowed for a particular session (the current session if ommited).",
						"arguments": [
							{
								"name": "session_handle",
								"optional": true
							}
						]
					},
					"alltext": {
						"description": "Returns the text for the entire record for the specified table.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					},
					"alltrim": {
						"description": "Trims leading and trailing spaces.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"n": {
					"ansi_to_oem": {
						"description": "Interface to windows ansi_to_oem function",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "length"
							}
						]
					}
				},
				"p": {
					"api_getenvironmentvar": {
						"description": " Get a windows environment variable",
						"arguments": [
							{
								"name": "system_var"
							}
						]
					},
					"api_getmachinename": {
						"description": "Returns the name of the current computer."
					},
					"api_getprocesses": {
						"description": " Get Windows processes.",
						"arguments": [
							{
								"name": "format",
								"optional": true
							}
						]
					},
					"api_getusername": {
						"description": "Returns the name of Windows logon name of the current user"
					},
					"api_uuidcreate": {
						"description": " Return a 128 bit globally/universally unique identifier (GUID/UUID)"
					}
				},
				"r": {
					"argument_add_array_argument": {
						"description": "Adds or updates and array argument to an sql::arguments object. 'argValues' is a crlf delimited list of values.",
						"arguments": [
							{
								"name": "args"
							},
							{
								"name": "argname"
							},
							{
								"name": "argtype"
							},
							{
								"name": "argvalues"
							},
							{
								"name": "flagusefastmethod",
								"optional": true
							}
						]
					},
					"argumentsfromjson": {
						"description": "Appends arguments to an argument object from a JSON argument definition. To set a null value set the value property to null",
						"arguments": [
							{
								"name": "args"
							},
							{
								"name": "json"
							}
						]
					},
					"argumentstojson": {
						"description": "Serializes arguments to a JSON string",
						"arguments": [
							{
								"name": "argsorargsxml"
							},
							{
								"name": "flagcompact",
								"optional": true
							}
						]
					},
					"argval": {
						"description": "Returns a value from a sql::arguments object by name, or item id. Is a shortcut for this pattern: args[args.argumentNumber(ArgumentName)].data",
						"arguments": [
							{
								"name": "args"
							},
							{
								"name": "nameoritem"
							}
						]
					},
					"arraytype": {
						"description": "Returns the type of an array. E.g. Property, C, N, D, etc. If argument is not an array, returns null",
						"arguments": [
							{
								"name": "array"
							}
						]
					}
				},
				"s": {
					"asc": {
						"description": "Returns the ASCII value of a character.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "unsigned",
								"optional": true
							}
						]
					},
					"asin": {
						"description": "Returns the arc sine of an angle expressed in radians.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					}
				},
				"t": {
					"at": {
						"description": "Returns the position where one character string is found in another.",
						"arguments": [
							{
								"name": "search_string"
							},
							{
								"name": "string"
							},
							{
								"name": "occurrence",
								"optional": true
							}
						]
					},
					"at2": {
						"description": "Finds the position of one string within another, starting the search as the specified starting_position",
						"arguments": [
							{
								"name": "sub_string"
							},
							{
								"name": "string"
							},
							{
								"name": "starting_position",
								"optional": true
							}
						]
					},
					"at_u": {
						"description": "Returns the position where one character string is found in another, Honors UTF8 encoding.",
						"arguments": [
							{
								"name": "search_string"
							},
							{
								"name": "string"
							},
							{
								"name": "occurrence",
								"optional": true
							}
						]
					},
					"atan": {
						"description": "Returns the arc tangent of an angle expressed in radians.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					},
					"atan2": {
						"description": "Returns an arc tangent angle (in radians) for all four quadrants",
						"arguments": [
							{
								"name": "x"
							},
							{
								"name": "y"
							}
						]
					},
					"atc": {
						"description": "Returns the position where one string is found within another.",
						"arguments": [
							{
								"name": "search_string"
							},
							{
								"name": "string"
							},
							{
								"name": "occurrence",
								"optional": true
							}
						]
					},
					"atc_u": {
						"description": "Returns the position where one string is found within another, Honors UTF8 encoding.",
						"arguments": [
							{
								"name": "search_string"
							},
							{
								"name": "string"
							},
							{
								"name": "occurrence",
								"optional": true
							}
						]
					}
				},
				"v": {
					"average": {
						"description": "Get the average of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					}
				}
			}
		},
		"b": {
			"base64decode": {
				"description": "Decode (from string) binary data using BASE64.",
				"arguments": [
					{
						"name": "encode_string"
					}
				]
			},
			"base64encode": {
				"description": "Encode (to string) binary data using BASE64.",
				"arguments": [
					{
						"name": "blob"
					}
				]
			},
			"base64encode_file": {
				"description": "Encode (to string w/ CRLFs) binary data using BASE64.",
				"arguments": [
					{
						"name": "blob"
					}
				]
			},
			"base64encodedimage": {
				"description": "Returns a Data URI for an image file",
				"arguments": [
					{
						"name": "imagefilename"
					}
				]
			},
			"between": {
				"description": "Returns TRUE if the 1st expr is between the 2nd and 3rd expr, inclusive.",
				"arguments": [
					{
						"name": "expr_1"
					},
					{
						"name": "expr_2"
					},
					{
						"name": "expr_3"
					}
				]
			},
			"between_char": {
				"description": " Creates a string using the Between() function.",
				"arguments": [
					{
						"name": "field"
					},
					{
						"name": "char1"
					},
					{
						"name": "char2"
					}
				]
			},
			"between_date": {
				"description": " Creates a string using the Between() function",
				"arguments": [
					{
						"name": "field"
					},
					{
						"name": "date1"
					},
					{
						"name": "date2"
					}
				]
			},
			"between_num": {
				"description": " Creates a string using the Between() function",
				"arguments": [
					{
						"name": "field"
					},
					{
						"name": "num1"
					},
					{
						"name": "num2"
					}
				]
			},
			"between_record": {
				"description": " Creates a string using the Between() function to search for a range of records numbers.",
				"arguments": [
					{
						"name": "record1"
					},
					{
						"name": "record2"
					}
				]
			},
			"bitmap_colors_get": {
				"description": "Return the colors used by a bitmap - sorted by usage. (color format R=red G=Green B=Blue C=count I=pallette index -1 if source is RGB).",
				"arguments": [
					{
						"name": "bitmap_data"
					},
					{
						"name": "color_format"
					},
					{
						"name": "preserve_native_order",
						"optional": true
					}
				]
			},
			"bitmap_size": {
				"description": "Returns the height and width of a bitmap (as .height and .width properties) . Units are 'inches', 'pixels' or 'cm'. ",
				"arguments": [
					{
						"name": "filename"
					},
					{
						"name": "units",
						"optional": true
					}
				]
			},
			"bitmap_to_jpeg": {
				"description": "Convert a bitmap to a jpeg - quality 100-best quality, 0-smallest size.",
				"arguments": [
					{
						"name": "bitmap_data"
					},
					{
						"name": "quality",
						"optional": true
					}
				]
			},
			"bitmap_to_palette_png": {
				"description": "Convert bitmap to a palette based PNG bitmap.",
				"arguments": [
					{
						"name": "bitmap_data"
					},
					{
						"name": "pallette",
						"optional": true
					},
					{
						"name": "transparent_colors",
						"optional": true
					},
					{
						"name": "background_color",
						"optional": true
					}
				]
			},
			"bitmap_to_png": {
				"description": "Convert bitmap(s) to a PNG bitmap - flags 'G'ray, 'R'gb, 'A'lpha-rgb 'I'nterlaced.",
				"arguments": [
					{
						"name": "bitmap_data"
					},
					{
						"name": "flags",
						"optional": true
					},
					{
						"name": "backgroundcolor",
						"optional": true
					},
					{
						"name": "text",
						"optional": true
					},
					{
						"name": "alpha_bitmap_data",
						"optional": true
					}
				]
			},
			"blank_duplicate": {
				"description": "Blank any duplicates of subexpression over group 'over' sampled each group 'each'",
				"arguments": [
					{
						"name": "subexpr"
					},
					{
						"name": "over",
						"optional": true
					},
					{
						"name": "each",
						"optional": true
					}
				]
			},
			"blobcompare": {
				"description": "Performs a byte by byte comparison of the two blobs. Returns 0 if equal, 1 if the left is greater, -1 if the right is greater.",
				"arguments": [
					{
						"name": "blob1"
					},
					{
						"name": "blob2"
					}
				]
			},
			"blobequal": {
				"description": "Returns .t. if the binary objects are the same length and values.",
				"arguments": [
					{
						"name": "blob1"
					},
					{
						"name": "blob2"
					}
				]
			},
			"bof": {
				"description": "Returns TRUE if the record pointer is at the beginning of the file.",
				"arguments": [
					{
						"name": "tablename",
						"optional": true
					}
				]
			},
			"browse_objects_get": {
				"description": "Returns object hierarchy for a browse.",
				"arguments": [
					{
						"name": "browsename"
					},
					{
						"name": "library",
						"optional": true
					},
					{
						"name": "prefix",
						"optional": true
					},
					{
						"name": "classprefix",
						"optional": true
					}
				]
			},
			"bus_days_between": {
				"description": "Returns the number of business days between two dates, ignoring weekends and holidays. To use a SQL datasource, 'holidayTable' can be a JSON string with these properties: connectionString, table, column. e.g. {connectionString: 'northwind', table: 'holidays', column: 'dates'}",
				"arguments": [
					{
						"name": "startdate"
					},
					{
						"name": "enddate"
					},
					{
						"name": "flag",
						"optional": true
					},
					{
						"name": "holidaytable",
						"optional": true
					}
				]
			}
		},
		"c": {
			"__index__": {
				"a": {
					"calculated_field_delete": {
						"description": "Delete a calculated field.",
						"arguments": [
							{
								"name": "variables"
							},
							{
								"name": "name"
							}
						]
					},
					"calculated_field_enum": {
						"description": "Returns CR-LF serarated calculated field list (format N=name,E=expression,D=decimal,W=Width).",
						"arguments": [
							{
								"name": "variables"
							},
							{
								"name": "format",
								"optional": true
							},
							{
								"name": "local_only",
								"optional": true
							}
						]
					},
					"calculated_field_expand_names": {
						"description": "Visits calculated fields, expanding short calc field names to be fully qualified.",
						"arguments": [
							{
								"name": "variables"
							}
						]
					},
					"calculated_field_get": {
						"description": "Returns a pointer to a calculated field.",
						"arguments": [
							{
								"name": "variables"
							},
							{
								"name": "name"
							}
						]
					},
					"calculated_field_set": {
						"description": "Attempt to set or create a calculated field - returns error text if any error occured.",
						"arguments": [
							{
								"name": "variables"
							},
							{
								"name": "name"
							},
							{
								"name": "expression"
							}
						]
					},
					"calculated_fields_reset": {
						"description": "Replace all existing calculated fields in a frame with the 'name = expression' pairs in the calcFields cr-lf delimited list.",
						"arguments": [
							{
								"name": "variables"
							},
							{
								"name": "calcfields"
							}
						]
					},
					"can_application_exit": {
						"description": "Registers code to be executed before Alpha Five is closed",
						"arguments": [
							{
								"name": "code"
							}
						]
					},
					"can_database_exit": {
						"description": "Registers code to be executed before the current database is closed. If Cancel() is called, the database is not closed.",
						"arguments": [
							{
								"name": "code"
							}
						]
					},
					"cancel": {
						"description": "Cause script to cancel the calling operation (if supported by Trigger).",
						"arguments": [
							{
								"name": "no_error",
								"optional": true
							}
						]
					},
					"card_spawn_object": {
						"description": "Launch a hardcard and return a pointer to the hardcard object.",
						"arguments": [
							{
								"name": "cardname"
							},
							{
								"name": "parameters",
								"optional": true
							}
						]
					},
					"case": {
						"description": "Selects first TRUE clause and returns the appropriate value.",
						"arguments": [
							{
								"name": "condition_1"
							},
							{
								"name": "result_1"
							},
							{
								"name": "condition",
								"optional": true
							},
							{
								"name": "result",
								"optional": true
							}
						]
					},
					"case_preserve": {
						"description": "Returns a string + the case information.",
						"arguments": [
							{
								"name": "string"
							}
						]
					},
					"case_restore": {
						"description": "Restore a string from its case information.",
						"arguments": [
							{
								"name": "preserved_string"
							}
						]
					}
				},
				"c": {
					"ccvalid": {
						"description": "Returns TRUE if a field contains a valid credit card number.",
						"arguments": [
							{
								"name": "credit_card_number"
							},
							{
								"name": "option",
								"optional": true
							}
						]
					}
				},
				"d": {
					"cdate": {
						"description": "Converts a date to a character value in the form 'YYYYMMDD'.",
						"arguments": [
							{
								"name": "date"
							}
						]
					},
					"cdow": {
						"description": "Returns the name of the day of the week for a date, if optional localized flag is true, report the localized day name.",
						"arguments": [
							{
								"name": "date"
							},
							{
								"name": "localized",
								"optional": true
							}
						]
					}
				},
				"e": {
					"ceiling": {
						"description": "Returns the smallest integer that is greater than or equal to a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					}
				},
				"h": {
					"char_to_blob": {
						"description": "Public user defined function.",
						"arguments": [
							{
								"name": "str"
							}
						]
					},
					"check_indexes_for_table": {
						"description": "Checks the integrity of index tags for a specified table.",
						"arguments": [
							{
								"name": "tablename"
							}
						]
					},
					"chkdigit": {
						"description": "Returns a checksum digit for a string of numbers.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "option",
								"optional": true
							}
						]
					},
					"chr": {
						"description": "Converts a numeric expression to a character expression.",
						"arguments": [
							{
								"name": "ascii_value"
							}
						]
					},
					"chrtran": {
						"description": "Replaces a portion of one string with another.",
						"arguments": [
							{
								"name": "string_1"
							},
							{
								"name": "string_2"
							},
							{
								"name": "string_3"
							}
						]
					}
				},
				"l": {
					"class_drop": {
						"description": "Drop a class from the library.",
						"arguments": [
							{
								"name": "class_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"class_load": {
						"description": "Return class definition (optional password can be used to load protected classes).",
						"arguments": [
							{
								"name": "class_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"class_play": {
						"description": "Force a class to be registered.",
						"arguments": [
							{
								"name": "class_name"
							}
						]
					},
					"class_save": {
						"description": "Save a class definition (must include password if saving over a protected class).",
						"arguments": [
							{
								"name": "class_name"
							},
							{
								"name": "udf_code"
							},
							{
								"name": "password",
								"optional": true
							},
							{
								"name": "annotate",
								"optional": true
							}
						]
					}
				},
				"m": {
					"cmonth": {
						"description": "Returns the name of the month for the specified date, if optional localized flag is true, report the localized day name.",
						"arguments": [
							{
								"name": "date"
							},
							{
								"name": "localized",
								"optional": true
							}
						]
					}
				},
				"n": {
					"cn_open": {
						"arguments": [
							{
								"name": "cn"
							},
							{
								"name": "connectionstring"
							},
							{
								"name": "username",
								"optional": true
							},
							{
								"name": "password",
								"optional": true
							}
						]
					}
				},
				"o": {
					"__index__": {
						"l": {
							"color_name_from_rgb": {
								"description": "Returns the Alpha Five name for the color specified by the RGB values.",
								"arguments": [
									{
										"name": "r"
									},
									{
										"name": "g"
									},
									{
										"name": "b"
									},
									{
										"name": "dec_hex",
										"optional": true
									}
								]
							}
						},
						"m": {
							"combine_filters": {
								"description": "Combine two filter expressions into a single filter expression.",
								"arguments": [
									{
										"name": "filter1"
									},
									{
										"name": "filter2"
									},
									{
										"name": "andor",
										"optional": true
									},
									{
										"name": "flagsqlsyntax",
										"optional": true
									}
								]
							},
							"combine_library": {
								"description": "Combines .AEX libraries into one .AEX library, lib created is lib_num 0-255.",
								"arguments": [
									{
										"name": "library"
									},
									{
										"name": "libraries"
									},
									{
										"name": "lib_id",
										"optional": true
									}
								]
							},
							"combine_sql_arguments": {
								"description": "Add arguments from args2 to args1. If flagPreserveValuesInArgs1 is .t. then a duplicate argument in args2 will not overwrite the existing value in args1.",
								"arguments": [
									{
										"name": "args1"
									},
									{
										"name": "args2"
									},
									{
										"name": "flagpreservevaluesinargs1",
										"optional": true
									}
								]
							},
							"comma_to_crlf": {
								"description": "Converts a comma delimited list to a CrLf delimited list.",
								"arguments": [
									{
										"name": "source"
									}
								]
							},
							"compile_library": {
								"description": "Compile one or more libraries in a CRLF separated list from  .ALB to .AEX, lib created is lib_num 0-255, if optional smart flag is set to TRUE than compiles will occur only if needed, ddfilter is an optional expression to only put elements that match filter in the AEX.",
								"arguments": [
									{
										"name": "libraries"
									},
									{
										"name": "lib_id",
										"optional": true
									},
									{
										"name": "smart",
										"optional": true
									},
									{
										"name": "ddfilter",
										"optional": true
									}
								]
							},
							"compile_module": {
								"description": "Create a compiled xbasic code module (exports at the end).",
								"arguments": [
									{
										"name": "module"
									},
									{
										"name": "macro1",
										"optional": true
									},
									{
										"name": "macron",
										"optional": true
									}
								]
							},
							"compile_template": {
								"description": "Create a compiled xbasic code object.",
								"arguments": [
									{
										"name": "template"
									},
									{
										"name": "macro1",
										"optional": true
									},
									{
										"name": "macron",
										"optional": true
									}
								]
							},
							"compile_xbasic_function_library": {
								"description": "Used in a web application to compile an Xbasic Function Library so that functions defined in the library can be called. You can pass in an optional seachPath for the Function Library.",
								"arguments": [
									{
										"name": "functionlibraryname"
									},
									{
										"name": "searchpath",
										"optional": true
									}
								]
							},
							"compilestringtemplate": {
								"description": "Compile a string template that has expression enclosed in { }. Returns an object. Use <obj>.Output() to evaluate the string. ",
								"arguments": [
									{
										"name": "string"
									}
								]
							},
							"componentguid": {
								"description": "For use in Web applications only. Returns the GUID for the current component. Only for use in creating a filter to find records in the Repository that belong to the current component."
							},
							"compute_field_statistics": {
								"description": "Computes statistics for the field bound to the fully_qualified_object_name. ",
								"arguments": [
									{
										"name": "fully_qualified_object_name"
									}
								]
							}
						},
						"n": {
							"contains": {
								"description": "Returns TRUE if the string contains all the words (case sensitive).",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "words"
									}
								]
							},
							"containsanycharacter": {
								"description": "Public user defined function.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "characters"
									}
								]
							},
							"containsi": {
								"description": "Returns TRUE if the string contains all the words (case insensitive).",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "words"
									}
								]
							},
							"containsx": {
								"description": "Returns TRUE if the string contains words that sound like like all 'Words'.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "words"
									}
								]
							},
							"convert_a4_to_a5": {
								"description": "Convert a4 data files to a5 format, flags:  X- convert extended characters, M-convert memo files, D-DBT to FPT.",
								"arguments": [
									{
										"name": "source"
									},
									{
										"name": "destination"
									},
									{
										"name": "convert_flags"
									}
								]
							},
							"convert_a5_to_a4": {
								"description": "Convert a5 data files to a4 format, flags:  X- convert extended characters, M-convert memo files, D-DBT to FPT.",
								"arguments": [
									{
										"name": "source"
									},
									{
										"name": "destination"
									},
									{
										"name": "convert_flags"
									}
								]
							},
							"convert_acp_to_utf8": {
								"description": "Convert ascii encoded text to utf8.",
								"arguments": [
									{
										"name": "acptext"
									}
								]
							},
							"convert_dbt_to_fpt": {
								"description": "Convert memos for a file from DBT to FPT.",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"convert_expression": {
								"description": "Converts elements of an expression based on flags 'V'-expand vars 'C'-expand calcs, 'L' force longnames , 'S' force shortnames.",
								"arguments": [
									{
										"name": "expression"
									},
									{
										"name": "convert_expression_flags"
									},
									{
										"name": "tablename",
										"optional": true
									},
									{
										"name": "variable_frame",
										"optional": true
									}
								]
							},
							"convert_fpt_to_dbt": {
								"description": "Convert memos for a file from FPT to DBT.",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"convert_hexcolor_to_rgbcolor": {
								"description": "Convert a hex color to rgb",
								"arguments": [
									{
										"name": "color"
									},
									{
										"name": "delimiter",
										"optional": true
									}
								]
							},
							"convert_hslcolor_to_hexcolor": {
								"description": "Convert HSL color to HEX",
								"arguments": [
									{
										"name": "hc"
									},
									{
										"name": "sc",
										"optional": true
									},
									{
										"name": "lc",
										"optional": true
									}
								]
							},
							"convert_lf_to_crlf": {
								"description": "For long strings that use LF as a line delimiter, convert to CRLF",
								"arguments": [
									{
										"name": "txt"
									}
								]
							},
							"convert_type": {
								"description": "Converts the type of a value to the specified type.",
								"arguments": [
									{
										"name": "source"
									},
									{
										"name": "requestedtype"
									}
								]
							},
							"convert_utf8_to_acp": {
								"description": "Convert utf8 encoded text to ascii.",
								"arguments": [
									{
										"name": "utf8text"
									}
								]
							}
						},
						"p": {
							"copy_folder": {
								"description": "Copy all of the files in a folder from one folder to another. All sub-folders are copied as well.",
								"arguments": [
									{
										"name": "sourcefolder"
									},
									{
										"name": "targetfolder"
									},
									{
										"name": "only_copy_if_newer",
										"optional": true
									}
								]
							}
						},
						"s": {
							"cos": {
								"description": "Returns the cosine of an angle expressed in radians.",
								"arguments": [
									{
										"name": "radians"
									}
								]
							}
						},
						"u": {
							"count": {
								"description": "Get the count of subexpression over group 'over' sampled each group 'each'",
								"arguments": [
									{
										"name": "subexpr"
									},
									{
										"name": "over",
										"optional": true
									},
									{
										"name": "each",
										"optional": true
									}
								]
							},
							"count_textblocks": {
								"description": "Counts the number of occurrences of a sub-string starting with 'start_string' and ending with 'end_string'.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "start_string"
									},
									{
										"name": "end_string"
									},
									{
										"name": "case_sensitive",
										"optional": true
									},
									{
										"name": "regex_safe",
										"optional": true
									}
								]
							},
							"countriesofworld": {
								"description": "Create a CRLF delimited list of countries. Format string can contain 'Name','Code','ISO' and 'ISO3'. E.g. To get data in form 'code - country', specify a format of 'code - name'",
								"arguments": [
									{
										"name": "format",
										"optional": true
									}
								]
							}
						}
					}
				},
				"p": {
					"cpucount": {
						"description": "Get number of processors available on the system."
					}
				},
				"r": {
					"create_indexes": {
						"description": "Creates indexes for a table based on a CRLF definition string. Definition string is of format: tagname|OrderExpn|FilterExpn|Flags. Tip: The format string can be created using Get_Index_Definitions().",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "indexdef"
							},
							{
								"name": "showxbasic",
								"optional": true
							}
						]
					},
					"create_shadow": {
						"description": "Creates a shadow of an ADB file & opens it.",
						"arguments": [
							{
								"name": "newadbfilename"
							},
							{
								"name": "originaladbfilename"
							},
							{
								"name": "open_and_repopulate",
								"optional": true
							}
						]
					},
					"create_table": {
						"description": "Create a new table using a CR-LF delimited list of field names",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "field_list"
							}
						]
					},
					"create_table_sql": {
						"description": "Create a sql table from a simple field list definition or from an Excel file. Mode is 'skip' or 'overwrite' or 'createTableSQL' (does not actually create table, just shows SQL that would be needed). Field list is crlf list of fields like: id|N|6|0|AutoIncrement||PrimaryKey. Fieldlist can also be a json array of objects. Each object has these properties: name, id, type, size, decimals, autoIncrement (true/false)",
						"arguments": [
							{
								"name": "fieldlist"
							},
							{
								"name": "connectionstring"
							},
							{
								"name": "tablename"
							},
							{
								"name": "mode",
								"optional": true
							}
						]
					},
					"crlf": {
						"description": "Returns cr-lf(s).",
						"arguments": [
							{
								"name": "count",
								"optional": true
							}
						]
					},
					"crlf_to_comma": {
						"description": "Converts a CrLf delimited list to a comma delimited list.",
						"arguments": [
							{
								"name": "source"
							}
						]
					},
					"crlf_to_json": {
						"description": "Converts cr-lf delimited text to JSON. First row of text is assumed to be the field names. Default delimiter (character between fields) is |.",
						"arguments": [
							{
								"name": "txt"
							},
							{
								"name": "delimiter",
								"optional": true
							}
						]
					}
				},
				"s": {
					"cshorttime": {
						"description": "Converts a time value into a string. Format is 0h0m0s3.",
						"arguments": [
							{
								"name": "shorttime"
							}
						]
					},
					"css_editor": {
						"description": "CSS style builder. (selectors = class name, css = css code string, image_list = optional list of images for the user to pick from, relative_img_dir = optional location which the style builder should assume it is at, return_cancel = optional return text \"<CANCEL>\" when user cancels)",
						"arguments": [
							{
								"name": "selectors"
							},
							{
								"name": "css"
							},
							{
								"name": "image_list",
								"optional": true
							},
							{
								"name": "relative_img_dir",
								"optional": true
							},
							{
								"name": "return_cancel",
								"optional": true
							}
						]
					},
					"cstate": {
						"description": "Converts a two character state abbreviation to its full state name.",
						"arguments": [
							{
								"name": "state_abbreviation"
							}
						]
					},
					"cstate_abrevlookup": {
						"description": "Returns the 2 letter state abbreviation for a state name. Also works for Canadian provinces.",
						"arguments": [
							{
								"name": "state_name"
							}
						]
					},
					"cstates": {
						"description": "Return the US states with optional format S=state, A=Abbreviation.",
						"arguments": [
							{
								"name": "format",
								"optional": true
							}
						]
					},
					"csv_to_json": {
						"description": "Converts csv txt to json. Fields must be comma delimited. First row must be fields names. If a field contains a comma, enclose field in quotes. If a field contains quotes, escape quotes using quotequote. e.g. \"\". You can also escape quotes using \\\". In this case, set the escapeMethodForQuotes parameter to 'backslash'",
						"arguments": [
							{
								"name": "txt"
							},
							{
								"name": "escapemethodforquotes",
								"optional": true
							}
						]
					}
				},
				"t": {
					"ctime": {
						"description": "Converts a time value into a string. Format is YYYYMMDD0h0m0s3.",
						"arguments": [
							{
								"name": "timeval"
							}
						]
					},
					"ctod": {
						"description": "Converts a character string to a date value.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"ctodt": {
						"description": "Converts a character string to a time value (date + time).",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"ctot": {
						"description": "Converts a character string to a short time value.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"u": {
					"culturecodes": {
						"description": "Get a list of culture codes and corresponding language"
					},
					"curl_get": {
						"arguments": [
							{
								"name": "url"
							},
							{
								"name": "headers",
								"optional": true
							}
						]
					},
					"curl_get_binary": {
						"description": "Retrieve binary content from a remote URL. Uses CURL to retrieve the URL.",
						"arguments": [
							{
								"name": "url"
							}
						]
					},
					"curl_get_file": {
						"description": "Use CURL to fetch a remote file and store file locally",
						"arguments": [
							{
								"name": "url"
							},
							{
								"name": "filename"
							}
						]
					},
					"curl_post_data": {
						"description": "Post data using the CURL object. Optional headers can be supplied as a comma delimited list of values in format: headername : header value. e.g. header1: value of header1,header2: value of header2.",
						"arguments": [
							{
								"name": "url"
							},
							{
								"name": "data"
							},
							{
								"name": "headers",
								"optional": true
							}
						]
					},
					"current": {
						"description": "Returns 'current' value at beginning of print.",
						"arguments": [
							{
								"name": "expression",
								"optional": true
							}
						]
					},
					"current_filter_expn": {
						"description": "Returns the filter for the primary table of the current session"
					},
					"current_object": {
						"description": "Get the current object."
					},
					"current_order_expn": {
						"description": "Returns the order for the primary table of the current session"
					},
					"currentgridfilter": {
						"description": "For use only in Web applications. Represents the filter for the current grid component."
					},
					"currentgridorder": {
						"description": "For use only in Web applications. Represents the order for the current grid component."
					},
					"currentlistfilter": {
						"description": "For use only in Web applications. Represents the filter for the current list component.",
						"arguments": [
							{
								"name": "listname"
							}
						]
					},
					"currentlistorder": {
						"description": "For use only in Web applications. Represents the filter for the current list component.",
						"arguments": [
							{
								"name": "listname"
							}
						]
					}
				},
				"y": {
					"cyear": {
						"description": "Converts a date to a character value of the form 'YYYY'.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				}
			}
		},
		"d": {
			"__index__": {
				"a": {
					"__index__": {
						"t": {
							"__index__": {
								"e": {
									"__index__": {
										"_": {
											"__index__": {
												"f": {
													"date_firstdayofmonth": {
														"description": "Returns the first day of the month for a given date. If no argument is supplied, first day of current month.",
														"arguments": [
															{
																"name": "date",
																"optional": true
															}
														]
													},
													"date_firstdayofpreviousmonth": {
														"description": "Returns the first day of the previous month for a given date. If no argument is supplied, returns last day of the previous month for the current date.",
														"arguments": [
															{
																"name": "date",
																"optional": true
															}
														]
													},
													"date_format": {
														"description": "Formats a data value using a user defined format string",
														"arguments": [
															{
																"name": "date"
															},
															{
																"name": "custom_date_format"
															}
														]
													},
													"date_formats_built_in": {
														"description": "Date formats for the dtoc() function"
													},
													"date_from_utc_date": {
														"description": "Convert a UTC date-time to a date or time",
														"arguments": [
															{
																"name": "utcformat"
															},
															{
																"name": "returntype",
																"optional": true
															}
														]
													}
												},
												"i": {
													"date_is_anniversary": {
														"description": "Returns .t. if a date or time value has the same month and day as a ReferenceDate. If ReferenceDate is blank, then today's date is used as the ReferenceDate.",
														"arguments": [
															{
																"name": "date"
															},
															{
																"name": "referencedate",
																"optional": true
															}
														]
													},
													"date_is_in_last_month": {
														"description": "Takes a date or time value and returns .t. if the date is in the previous Month",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_previous_quarter": {
														"description": "Takes a date or time value and returns .t. if the date is in the previous Quarter",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_previous_week": {
														"description": "Takes a date or time value and returns .t. if the date is in the week",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_previous_year": {
														"description": "Takes a date or time value and returns .t. if the date is in the previous year",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_same_week": {
														"description": "Takes a date or time value and returns .t. if the date is in the same week as the week of the reference date",
														"arguments": [
															{
																"name": "date"
															},
															{
																"name": "referencedate"
															}
														]
													},
													"date_is_in_this_month": {
														"description": "Takes a date or time value and returns .t. if the date is in this Month",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_month_todate": {
														"description": "Takes a date or time value and returns .t. if the date is in this Month-to-date",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_quarter": {
														"description": "Takes a date or time value and returns .t. if the date is in this Quarter",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_quarter_todate": {
														"description": "Takes a date or time value and returns .t. if the date is in this Quarter",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_week": {
														"description": "Returns .t. if the date is in the current week.",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_week_todate": {
														"description": "Takes a date or time value and returns .t. if the date is in this week-to-date",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_year": {
														"description": "Takes a date or time value and returns .t. if the date is in this year",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_in_this_year_todate": {
														"description": "Takes a date or time value and returns .t. if the date is in this year-to-date",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_today": {
														"description": "Takes a date or time value and returns .t. if the date is today",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_is_yesterday": {
														"description": "Takes a date or time value and returns .t. if the date is yesterday",
														"arguments": [
															{
																"name": "date"
															}
														]
													}
												},
												"l": {
													"date_lastdayofmonth": {
														"description": "Returns the last day of the month for a given date. If no argument is supplied, last day of current month.",
														"arguments": [
															{
																"name": "date",
																"optional": true
															}
														]
													},
													"date_lastdayofpreviousmonth": {
														"description": "Returns the last day of the previous month for a given date. If no argument is supplied, returns last day of the previous month for the current date.",
														"arguments": [
															{
																"name": "date",
																"optional": true
															}
														]
													}
												},
												"q": {
													"date_quarternumber": {
														"description": "Takes as date or time value and returns the Quarter in which the date falls",
														"arguments": [
															{
																"name": "date"
															}
														]
													},
													"date_quarterstartend": {
														"description": "Returns two properties - .StartDate and .EndDate with the start and end date for the specified quarter.",
														"arguments": [
															{
																"name": "year"
															},
															{
																"name": "quarter"
															}
														]
													}
												},
												"t": {
													"date_to_intldate": {
														"description": "Converts a data or time value or string into internaltional format (yyyy-mm-dd) and the time part",
														"arguments": [
															{
																"name": "d"
															}
														]
													},
													"date_to_utc_date": {
														"description": "Convert a date or time to a UTC date-time",
														"arguments": [
															{
																"name": "datetime"
															}
														]
													}
												},
												"v": {
													"date_value": {
														"description": "Returns a date value.  Errors if date is out of range",
														"arguments": [
															{
																"name": "year"
															},
															{
																"name": "month"
															},
															{
																"name": "day"
															}
														]
													}
												}
											}
										}
									}
								}
							}
						},
						"y": {
							"day": {
								"description": "Returns the day of the month for a date.",
								"arguments": [
									{
										"name": "date"
									}
								]
							},
							"day_number": {
								"description": "Returns the day number for a given day name",
								"arguments": [
									{
										"name": "day_name"
									}
								]
							}
						}
					}
				},
				"b": {
					"dbavg": {
						"description": "Returns the average value for a field in records of a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "field"
							}
						]
					},
					"dbcount": {
						"description": "Returns the number of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							},
							{
								"name": "keyvalue"
							}
						]
					},
					"dbmax": {
						"description": "Returns the maximum value of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "field"
							}
						]
					},
					"dbmin": {
						"description": "Returns the minimum value of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "field"
							}
						]
					},
					"dbsum": {
						"description": "Returns the sum of fields of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "field"
							}
						]
					}
				},
				"d": {
					"dd_open": {
						"description": "Opens the data dictionary for the current table, returning the table handle for the data dictionary."
					},
					"dd_update": {
						"description": "Perform maintainance on a data dictionary.",
						"arguments": [
							{
								"name": "c"
							}
						]
					}
				},
				"e": {
					"debug": {
						"description": "Forces the application to break in the XBASIC debugger 1 debug next line of xbasic, -1 ask if debugger is on, -2 toggle debugger.",
						"arguments": [
							{
								"name": "switch"
							}
						]
					},
					"decrypt_string": {
						"description": "Decrypt a string given Encrypted string.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "key",
								"optional": true
							}
						]
					},
					"deleted": {
						"description": "Returns TRUE if the current record has been marked for deletion.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					},
					"delivery_code": {
						"description": "Computes the two digit delivery code for UPC codes",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "zipcode"
							}
						]
					}
				},
				"i": {
					"dial": {
						"description": "Dial the telephone - uses aplha fives dialer settings.",
						"arguments": [
							{
								"name": "phone_number"
							}
						]
					},
					"difference": {
						"description": "Returns a value showing the difference in the soundex values for two strings.",
						"arguments": [
							{
								"name": "string_1"
							},
							{
								"name": "string_2"
							}
						]
					},
					"dir_create": {
						"description": "Create a new directory.",
						"arguments": [
							{
								"name": "directory_name"
							}
						]
					},
					"dir_create_recurse": {
						"description": "Creates a folder, creating as many sub-folders as necessary.",
						"arguments": [
							{
								"name": "folder"
							}
						]
					},
					"dir_get": {
						"description": "Returns the current working directory"
					},
					"dir_put": {
						"description": "Changes the current directory (on the specified drive).",
						"arguments": [
							{
								"name": "directory_name"
							}
						]
					},
					"dir_remove": {
						"description": "Remove a directory.",
						"arguments": [
							{
								"name": "directory_name"
							}
						]
					},
					"dir_remove_recurse": {
						"description": "Removes a directory and all of its contents",
						"arguments": [
							{
								"name": "dir_name"
							},
							{
								"name": "suppress_dialogs",
								"optional": true
							}
						]
					},
					"diskspace": {
						"description": "Returns space of disk of current table file"
					}
				},
				"m": {
					"dmy": {
						"description": "Converts a date to a character string in the 'DD Month YYYY' format.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"o": {
					"dotnetpath": {
						"description": "Return the folder where the .net Framework v4 DLL files are installed."
					},
					"dotvarget": {
						"description": "Reads the value of a property in a dot variable. Use dotVarSet() to set a property",
						"arguments": [
							{
								"name": "dotvar"
							},
							{
								"name": "property"
							}
						]
					},
					"dotvarset": {
						"description": "Sets the value of a property in a dot variable. Use dotVarGet() to read a property",
						"arguments": [
							{
								"name": "dotvar"
							},
							{
								"name": "property"
							},
							{
								"name": "value"
							}
						]
					},
					"dow": {
						"description": "Returns a number indicating the day of the week for a date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"t": {
					"dtoc": {
						"description": "Converts a date into a character value in the form 'MM/DD/YYYY'.",
						"arguments": [
							{
								"name": "date"
							},
							{
								"name": "date_format",
								"optional": true
							},
							{
								"name": "localized",
								"optional": true
							}
						]
					},
					"dtor": {
						"description": "Converts an angle expressed in degrees to an angle expressed in radians.",
						"arguments": [
							{
								"name": "degrees"
							}
						]
					},
					"dtos": {
						"description": "Converts a date to a character value in the form 'YYYYMMDD'.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"u": {
					"duplicate": {
						"description": "Get the duplicates count of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					}
				}
			}
		},
		"e": {
			"__index__": {
				"m": {
					"email_client_auto": {
						"description": " Load the appropriate email client specified in the email profile.",
						"arguments": [
							{
								"name": "send_to",
								"optional": true
							},
							{
								"name": "subject",
								"optional": true
							},
							{
								"name": "message",
								"optional": true
							},
							{
								"name": "attachments",
								"optional": true
							},
							{
								"name": "cc",
								"optional": true
							},
							{
								"name": "bcc",
								"optional": true
							},
							{
								"name": "profile",
								"optional": true
							}
						]
					},
					"email_profile_add": {
						"description": "Add an email profile.",
						"arguments": [
							{
								"name": "em"
							},
							{
								"name": "name"
							}
						]
					},
					"email_profile_delete": {
						"description": "Delete an email profile.",
						"arguments": [
							{
								"name": "profiletodelete"
							}
						]
					},
					"email_reader_open": {
						"description": " Open the email reader client"
					},
					"email_send": {
						"description": "Sends an e-mail using the built-in, Alpha Five e-mail feature. Set text_type to \"html\" for HTML email.  If lSilent = .T., email_send will throw an error rather than show a message box.",
						"arguments": [
							{
								"name": "send_to"
							},
							{
								"name": "subject"
							},
							{
								"name": "message"
							},
							{
								"name": "attachments",
								"optional": true
							},
							{
								"name": "cc",
								"optional": true
							},
							{
								"name": "bcc",
								"optional": true
							},
							{
								"name": "store_in_outbox",
								"optional": true
							},
							{
								"name": "text_type",
								"optional": true
							},
							{
								"name": "html_message",
								"optional": true
							},
							{
								"name": "profile",
								"optional": true
							},
							{
								"name": "zip_attach",
								"optional": true
							},
							{
								"name": "lsilent",
								"optional": true
							},
							{
								"name": "returnreceipt",
								"optional": true
							}
						]
					},
					"email_send2": {
						"description": " Send an email message",
						"arguments": [
							{
								"name": "pmessage"
							},
							{
								"name": "profile",
								"optional": true
							},
							{
								"name": "lsilent",
								"optional": true
							},
							{
								"name": "store_in_mailbox",
								"optional": true
							},
							{
								"name": "autowrap",
								"optional": true
							}
						]
					},
					"email_send_gmail": {
						"description": "Send email using the Gmail SMTP server.",
						"arguments": [
							{
								"name": "gmail_email_address"
							},
							{
								"name": "gmail_email_password"
							},
							{
								"name": "to"
							},
							{
								"name": "from"
							},
							{
								"name": "subject"
							},
							{
								"name": "html_body"
							},
							{
								"name": "text_body"
							},
							{
								"name": "cc",
								"optional": true
							},
							{
								"name": "bcc",
								"optional": true
							},
							{
								"name": "attachments",
								"optional": true
							}
						]
					},
					"email_send_low": {
						"description": "Send an email message without using a pre-configured email profile.",
						"arguments": [
							{
								"name": "from_emailaddress"
							},
							{
								"name": "from_name"
							},
							{
								"name": "message_html"
							},
							{
								"name": "message_plaintext"
							},
							{
								"name": "message_subject"
							},
							{
								"name": "to_emailaddresses"
							},
							{
								"name": "user_name"
							},
							{
								"name": "password"
							},
							{
								"name": "smtp_address"
							},
							{
								"name": "port",
								"optional": true
							}
						]
					},
					"email_send_noprofile": {
						"description": "Sends an e-mail message. All e-mail settings are passed in. Does not use an Alpha Five e-mail profile. To see what properties must be set in pSmtpSettings, and pMessageSettings, run the a5_ShowEmailSettings() function from the Interactive Window.",
						"arguments": [
							{
								"name": "psmtpsettingsin"
							},
							{
								"name": "pmessagesettings"
							},
							{
								"name": "securemode",
								"optional": true
							},
							{
								"name": "autowrap",
								"optional": true
							},
							{
								"name": "flagusedotnetlibrary",
								"optional": true
							}
						]
					},
					"email_send_sendgrid": {
						"description": "Send email using the SendGrid service.",
						"arguments": [
							{
								"name": "key"
							},
							{
								"name": "message"
							}
						]
					},
					"email_send_sparkpost": {
						"description": "Send email using the SparkPost service.",
						"arguments": [
							{
								"name": "key"
							},
							{
								"name": "message"
							}
						]
					},
					"email_send_web": {
						"description": "Send email in a web application. Uses settings defined in Web project properties. Attachments is a crlf delimited list of files. to, cc and bcc are comma delimited lists. Returns an object with 'error' (t/f) and 'errorText'",
						"arguments": [
							{
								"name": "from"
							},
							{
								"name": "from_alias"
							},
							{
								"name": "to"
							},
							{
								"name": "cc"
							},
							{
								"name": "bcc"
							},
							{
								"name": "subject"
							},
							{
								"name": "message"
							},
							{
								"name": "attachments",
								"optional": true
							}
						]
					},
					"email_smtp_close": {
						"description": " Close an SMTP connection",
						"arguments": [
							{
								"name": "psocket"
							}
						]
					},
					"email_smtp_open": {
						"description": " Open an SMTP connection",
						"arguments": [
							{
								"name": "psocket"
							},
							{
								"name": "smtp_server"
							},
							{
								"name": "port",
								"optional": true
							},
							{
								"name": "username",
								"optional": true
							},
							{
								"name": "password",
								"optional": true
							},
							{
								"name": "mode",
								"optional": true
							}
						]
					},
					"email_smtp_send": {
						"description": " Send an SMTP email message",
						"arguments": [
							{
								"name": "pmessage"
							},
							{
								"name": "psocket"
							},
							{
								"name": "lstatus",
								"optional": true
							},
							{
								"name": "autowrap",
								"optional": true
							}
						]
					},
					"emailsendcdo": {
						"description": "Send email using ActiveX",
						"arguments": [
							{
								"name": "smtpserver"
							},
							{
								"name": "smtpport"
							},
							{
								"name": "smtpusername"
							},
							{
								"name": "smtppassword"
							},
							{
								"name": "smtpauthenticate"
							},
							{
								"name": "smtpusessl"
							},
							{
								"name": "to"
							},
							{
								"name": "from"
							},
							{
								"name": "subject"
							},
							{
								"name": "htmlbody"
							},
							{
								"name": "txtbody"
							},
							{
								"name": "cc",
								"optional": true
							},
							{
								"name": "bcc",
								"optional": true
							},
							{
								"name": "attachments",
								"optional": true
							},
							{
								"name": "sender",
								"optional": true
							}
						]
					}
				},
				"n": {
					"encrypt_string": {
						"description": "Encrypt a string given Plaintext.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "key",
								"optional": true
							}
						]
					},
					"enum_drop": {
						"description": "Drop an enumeration from the library.",
						"arguments": [
							{
								"name": "class_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"enumeration_load": {
						"description": "Return enumeration definition.",
						"arguments": [
							{
								"name": "enumeration_name"
							}
						]
					},
					"enumeration_play": {
						"description": "Force an enumeration to be registered.",
						"arguments": [
							{
								"name": "enumeration_name"
							}
						]
					},
					"enumeration_save": {
						"description": "Save a enumeration definition.",
						"arguments": [
							{
								"name": "enumeration_name"
							},
							{
								"name": "enumeration_code"
							}
						]
					}
				},
				"o": {
					"eof": {
						"description": "Returns TRUE if the record pointer is at the end of the file.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					}
				},
				"r": {
					"error_code_get": {
						"description": "Retreive the last error code."
					},
					"error_generate": {
						"description": "Generate a user defined error in xbasic script or udf.",
						"arguments": [
							{
								"name": "user_error_text"
							}
						]
					},
					"error_line_number_get": {
						"description": "Report the line that the error occured on.",
						"arguments": [
							{
								"name": "session",
								"optional": true
							}
						]
					},
					"error_registered_generate": {
						"description": "Generate a system or user defined error in xbasic script or udf.",
						"arguments": [
							{
								"name": "error_name"
							},
							{
								"name": "params",
								"optional": true
							}
						]
					},
					"error_reporting": {
						"description": "If there is no error handler, should xbasic errors be reported?  default is TRUE.",
						"arguments": [
							{
								"name": "reporting_on"
							}
						]
					},
					"error_script_get": {
						"description": "Report the script that the error occured in.",
						"arguments": [
							{
								"name": "session",
								"optional": true
							}
						]
					},
					"error_text_get": {
						"description": "Retreive the error text for an error code (last error code if ommitted).",
						"arguments": [
							{
								"name": "error_code",
								"optional": true
							}
						]
					}
				},
				"v": {
					"eval": {
						"description": "Return the result of the expression (parses an expression stored in a string, and evaluates it).",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "eval_context",
								"optional": true
							},
							{
								"name": "eval_cursorstate",
								"optional": true
							}
						]
					},
					"eval_cursorstate": {
						"description": "Return the fetch state (if any) for the eval_context - provide optional context(s) with modifiers to navigate.",
						"arguments": [
							{
								"name": "eval_context"
							},
							{
								"name": "eval_cursorstate",
								"optional": true
							}
						]
					},
					"eval_initial": {
						"description": "Return the result of the expression (parses an expression stored in a string, and evaluates it) for initial values in table.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "eval_context",
								"optional": true
							}
						]
					},
					"eval_keylength": {
						"description": "Return the maximum length of the data an expression can return.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "eval_context",
								"optional": true
							}
						]
					},
					"eval_mode_get": {
						"description": "Return the mode we are evaluating in - can be used to short circuit a key test."
					},
					"eval_valid": {
						"description": "Return True if the expression can be parsed (expression is properly formed), session context is optional.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "eval_context",
								"optional": true
							},
							{
								"name": "session",
								"optional": true
							}
						]
					},
					"eval_variables": {
						"description": "Return the result of the expression (parses an expression stored in a string, and evaluates it).",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "variables"
							},
							{
								"name": "eval_context"
							},
							{
								"name": "eval_cursorstate",
								"optional": true
							}
						]
					},
					"eval_variables_valid": {
						"description": "Returns if the expression is valid (i.e. all the fields are defined).",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "variables"
							},
							{
								"name": "eval_context"
							}
						]
					},
					"evaluate_a5w": {
						"description": "Evaluate an A5W page returning a CallResult object. inherits the callers session, so if session is not overrided, page will be able to see shared varaibles in callers session. \nIf successful, the output will be contained in CallResult.ReturnDataValue.  \nSettings can contain error_prefix, error_suffix, global , shared , local .",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "pagename",
								"optional": true
							},
							{
								"name": "settings",
								"optional": true
							},
							{
								"name": "timeoutinseconds",
								"optional": true
							},
							{
								"name": "a5wincludepath",
								"optional": true
							}
						]
					},
					"evaluate_a5w_private": {
						"description": "Evaluate an A5W page returning a CallResult object.   A5W creates its own session for execution. ",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "pagename",
								"optional": true
							},
							{
								"name": "settings",
								"optional": true
							},
							{
								"name": "timeoutinseconds",
								"optional": true
							},
							{
								"name": "a5wincludepath",
								"optional": true
							}
						]
					},
					"evaluate_a5w_to_response": {
						"description": "Evaluate an A5W page writing the output to the response object passed in. \nSettings can contain error_prefix, error_suffix, global , shared , local .",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "responseobject"
							},
							{
								"name": "pagename",
								"optional": true
							},
							{
								"name": "settings",
								"optional": true
							},
							{
								"name": "timeoutinseconds",
								"optional": true
							},
							{
								"name": "a5wincludepath",
								"optional": true
							}
						]
					},
					"evaluate_a5w_to_response_private": {
						"description": "Evaluate an A5W page writing the output to the response object passed in. A5W creates its own session for execution. \nSettings can contain error_prefix, error_suffix, global , shared , local .",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "responseobject"
							},
							{
								"name": "pagename",
								"optional": true
							},
							{
								"name": "settings",
								"optional": true
							},
							{
								"name": "timeoutinseconds",
								"optional": true
							},
							{
								"name": "a5wincludepath",
								"optional": true
							}
						]
					},
					"evaluate_for_debug": {
						"description": "Evaluate for debug (an unsaved script).",
						"arguments": [
							{
								"name": "name"
							},
							{
								"name": "code"
							},
							{
								"name": "debuginto",
								"optional": true
							}
						]
					},
					"evaluate_for_object": {
						"description": "Evaluate xbasic in the context of an object - returns error if any occur.",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "object"
							}
						]
					},
					"evaluate_for_output": {
						"description": "Evaluate xbasic, returning the output (print command) as a string, options- N means no cr-lf between printed commands ('?').",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "options",
								"optional": true
							}
						]
					},
					"evaluate_shared_private": {
						"description": "Evaluate code in its own session, but with shared variables (passed in).",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "vars"
							}
						]
					},
					"evaluate_template": {
						"description": "Evaluate code with optional macros.",
						"arguments": [
							{
								"name": "template"
							},
							{
								"name": "macro1",
								"optional": true
							},
							{
								"name": "macron",
								"optional": true
							}
						]
					},
					"evaluate_template_private": {
						"description": "Evaluate code with optional macros in its own variable namespace.",
						"arguments": [
							{
								"name": "template"
							},
							{
								"name": "macro1",
								"optional": true
							},
							{
								"name": "macron",
								"optional": true
							}
						]
					},
					"evaluate_with": {
						"description": "Evaluate xbasic 'with' a variable frame , and optional override parent - makes it easy to build a context to evaluate in.",
						"arguments": [
							{
								"name": "code"
							},
							{
								"name": "vars"
							},
							{
								"name": "parent",
								"optional": true
							}
						]
					}
				},
				"x": {
					"excel_to_json": {
						"description": "Takes an Excel file and generates JSON data. filter is a SQL where clause. All data is character type. Sheetname can be a specific sheetname, a comma delimited list of sheetnames or \"*\". If you specify more than one sheetname or * you cannot specify a filter or order and the result is a json array with data for each specified sheetname.",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "filter",
								"optional": true
							},
							{
								"name": "order",
								"optional": true
							},
							{
								"name": "argumentsxml",
								"optional": true
							},
							{
								"name": "sheetname",
								"optional": true
							},
							{
								"name": "flagreturnarray",
								"optional": true
							},
							{
								"name": "flaghtmlencode",
								"optional": true
							}
						]
					},
					"excel_to_resultset": {
						"description": "Takes an Excel file and creates a SQL::Resultset object. Used the libXL library (not Microsoft ODBC drivers)",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "sheetname",
								"optional": true
							}
						]
					},
					"excel_to_sqlite": {
						"description": "Creates a SQLite database file from an Excel file. Each sheet in the Excel file is a table. First column in each sheet is the Primary Key if data in column is numeric and is unique.",
						"arguments": [
							{
								"name": "excelfn"
							},
							{
								"name": "sqlitefn"
							}
						]
					},
					"exist": {
						"description": "Returns TRUE if the specified file exists.",
						"arguments": [
							{
								"name": "keyvalue"
							},
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							}
						]
					},
					"exp": {
						"description": "Returns the number e raised to a power.",
						"arguments": [
							{
								"name": "number"
							}
						]
					},
					"expand_tabs": {
						"description": "Expand tabs into spaces.",
						"arguments": [
							{
								"name": "inputtext"
							},
							{
								"name": "tabwidth"
							}
						]
					},
					"expand_template": {
						"description": "Replace template with optional macros, don't evaluate.",
						"arguments": [
							{
								"name": "template"
							},
							{
								"name": "macro1",
								"optional": true
							},
							{
								"name": "macron",
								"optional": true
							}
						]
					},
					"expandtablefiletypes": {
						"description": "Takes a CRLF delimited list of .dbf and .set filenames and returns all files associated with each table/set. E.g. .ddd, .ddm, .ddx, .fpt, .cdx, .set, .sem and .sex.",
						"arguments": [
							{
								"name": "files"
							}
						]
					},
					"export_scripts_and_udfs": {
						"description": "Exports global scripts and functions",
						"arguments": [
							{
								"name": "filename",
								"optional": true
							}
						]
					},
					"export_scripts_udfs": {
						"description": "Exports global scripts and functions ",
						"arguments": [
							{
								"name": "filename",
								"optional": true
							}
						]
					},
					"export_to_quickbooks": {
						"description": "Export a table from Alpha Five to QuickBooks.",
						"arguments": [
							{
								"name": "tablename_fully_qualified"
							},
							{
								"name": "fromtbl"
							},
							{
								"name": "qbtbl"
							},
							{
								"name": "sqlstatement"
							},
							{
								"name": "quickbooks_field_map"
							},
							{
								"name": "a5_field_map"
							}
						]
					},
					"expression_common_filter_eliminate": {
						"description": "Simplify the filter expression if possible.",
						"arguments": [
							{
								"name": "expression"
							}
						]
					},
					"expression_common_order_eliminate": {
						"description": "Simplify the order expression if possible.",
						"arguments": [
							{
								"name": "expression"
							}
						]
					},
					"expression_demote_unique_keys": {
						"description": "Demotes unique key for current table, or given a structure, the last table in the CR-LF delimited list of tables.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "table_structure",
								"optional": true
							}
						]
					},
					"expression_encode": {
						"description": "Encodes an exression that contains parameter placeholders.",
						"arguments": [
							{
								"name": "input_expression"
							}
						]
					},
					"expression_info": {
						"description": "Takes an expression and gets information about it.\ntype             - expression type\nref_tabl         - 'T' if references any table\neref_children     - 'T' if references children\nref_one_to_manys - 'T' if references one-to-many children\ntable_names      - tables referenced\nfield_names      - field referencedleaves           - leaf expression (conditional)",
						"arguments": [
							{
								"name": "expr"
							},
							{
								"name": "property"
							}
						]
					},
					"expression_reduce_filter": {
						"description": "Reduce a filter to only those sub-expressions that relate to a named table.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "tablename"
							}
						]
					},
					"expression_subexpression_eliminate": {
						"description": "Remove any occurence of the subexpression from an expression - removes any intervening operators as well.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "subexpression"
							}
						]
					},
					"extract_all_strings": {
						"description": "Extracts the all occurrences of a sub-string starting with start_string and ending with end_string.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "start_string"
							},
							{
								"name": "end_string"
							},
							{
								"name": "delimiter",
								"optional": true
							},
							{
								"name": "include_tags",
								"optional": true
							},
							{
								"name": "case_sensitive",
								"optional": true
							},
							{
								"name": "regex_safe",
								"optional": true
							}
						]
					},
					"extract_string": {
						"description": "Extracts the nth occurrences of a sub-string starting with 'start_string' and ending with 'end_string'.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "start_string"
							},
							{
								"name": "end_string"
							},
							{
								"name": "occurrence",
								"optional": true
							},
							{
								"name": "include_tags",
								"optional": true
							},
							{
								"name": "case_sensitive",
								"optional": true
							},
							{
								"name": "regex_safe",
								"optional": true
							}
						]
					}
				}
			}
		},
		"f": {
			"__index__": {
				"_": {
					"f_upper": {
						"description": "Capitalizes the first letter of a string.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"e": {
					"fedex_delivery_status": {
						"description": "Contacts the FedEx web site and looks up the status of the specified tracking number",
						"arguments": [
							{
								"name": "tracking_num"
							},
							{
								"name": "apikey",
								"optional": true
							},
							{
								"name": "secretkey",
								"optional": true
							}
						]
					},
					"fetch_count": {
						"description": "Returns the current fetch count.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					}
				},
				"i": {
					"__index__": {
						"e": {
							"field": {
								"description": "Returns the name of a numerically specified field in the given table.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "fieldno"
									}
								]
							}
						},
						"l": {
							"file_add_to_db": {
								"description": " Add the specified table(s) or set(s) to the current database. Can take a CRLF delimited list.",
								"arguments": [
									{
										"name": "table_or_set_to_add"
									}
								]
							},
							"file_add_to_db_low": {
								"description": "Add the specified table(s) or set(s) to the current database."
							},
							"file_drop_from_db_low": {
								"description": "Drop the specified table(s) or set(s) from the current database."
							},
							"file_is_open": {
								"description": "Returns .t. if the file is currently open.",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"filename_absolute": {
								"description": "Converts a relative filename into an absolute filename. If reference_path is blank, assume current database path.",
								"arguments": [
									{
										"name": "filename"
									},
									{
										"name": "reference_path",
										"optional": true
									}
								]
							},
							"filename_decode": {
								"description": "Converts aliased, relative filename to real filename",
								"arguments": [
									{
										"name": "filename"
									},
									{
										"name": "reference_path",
										"optional": true
									}
								]
							},
							"filename_encode": {
								"description": "Converts filename to use aliases and converts to relative filename.",
								"arguments": [
									{
										"name": "filename"
									},
									{
										"name": "reference_path",
										"optional": true
									}
								]
							},
							"filename_from_alias": {
								"description": "Converts an aliased filename to a real filename",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"filename_relative": {
								"description": "Converts a filename into a relative filename. If reference_path is blank, assume current database path.",
								"arguments": [
									{
										"name": "filename"
									},
									{
										"name": "reference_path",
										"optional": true
									}
								]
							},
							"filename_to_alias": {
								"description": "Converts a filename to an aliased filename",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"files_in_set": {
								"description": "Returns a crlf delimited string of files in a set. Options \"d\" - include Dictionary, \"x\" - include Indexes",
								"arguments": [
									{
										"name": "setname"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"files_in_table": {
								"description": "Returns a crlf delimited string of files in a table. Options \"d\" - include Dictionary, \"x\" - include Indexes",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"filter_library_by_tags": {
								"description": "Filter AEX file, using list of tags with +- prefix (+ means only include tags that have one of these, - means exclude tags that include these).",
								"arguments": [
									{
										"name": "library"
									},
									{
										"name": "src_library"
									},
									{
										"name": "tagfilter",
										"optional": true
									},
									{
										"name": "lib_id",
										"optional": true
									}
								]
							},
							"filter_string": {
								"description": "Filter in/out words that contain case insensitive sub_string from a list, default delimiter is CR-LF.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "sub_string"
									},
									{
										"name": "delimiter",
										"optional": true
									},
									{
										"name": "exclude",
										"optional": true
									}
								]
							},
							"filter_string_multi": {
								"description": " Filter in/out words that contain any case insensitive words in delimiter delimited sub_strings from a list, default delimiter is CR-LF.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "sub_strings"
									},
									{
										"name": "delimiter",
										"optional": true
									},
									{
										"name": "exclude",
										"optional": true
									}
								]
							},
							"filter_string_smatch": {
								"description": "Filter in/out words that match (using smatch) the pattern, default delimiter is CR-LF.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "pattern"
									},
									{
										"name": "delimiter",
										"optional": true
									},
									{
										"name": "exclude",
										"optional": true
									}
								]
							},
							"filter_string_smatch_change": {
								"description": "Change words (lines) of text that match a pattern.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "pattern"
									},
									{
										"name": "changes"
									},
									{
										"name": "delimiter",
										"optional": true
									}
								]
							},
							"filter_stringc": {
								"description": "Filter in/out words that contain case sensitive sub_string from a list, default delimiter is CR-LF.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "sub_string"
									},
									{
										"name": "delimiter",
										"optional": true
									},
									{
										"name": "exclude",
										"optional": true
									}
								]
							}
						},
						"n": {
							"find_duplicate_lines": {
								"description": "Finds duplicate entries in a crlf-delimited list of values.",
								"arguments": [
									{
										"name": "list"
									},
									{
										"name": "flagcasesensitive",
										"optional": true
									}
								]
							}
						},
						"r": {
							"firestore_adddocument": {
								"description": "Adds a new document to a Firestore collection. If the document key is not supplied a key is auto generated.",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "json"
									},
									{
										"name": "key",
										"optional": true
									}
								]
							},
							"firestore_bulkimportdocuments": {
								"description": "Imports documents into a Firestore collection. You can specify a new collection name or an existing collection. JSON is an array of JSON documents. You can optionally specify which field in the JSON should be the document ID. Returns a JSON array (in the return property called 'result') with the id of each document that was imported.",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "json"
									},
									{
										"name": "idpropertyname",
										"optional": true
									}
								]
							},
							"firestore_createuser": {
								"description": "Creates a new Firestore user",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "email"
									},
									{
										"name": "password"
									},
									{
										"name": "displayname",
										"optional": true
									}
								]
							},
							"firestore_deletedocument": {
								"description": "Deletes a Firestore document from a collection",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "key"
									}
								]
							},
							"firestore_deleteuser": {
								"description": "Deletes a Firestore user",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "uid"
									},
									{
										"name": "email",
										"optional": true
									}
								]
							},
							"firestore_getdocument": {
								"description": "Gets the data in a specified Firestore collection",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "key"
									}
								]
							},
							"firestore_getusers": {
								"description": "Gets a list of Firestore users. Returns an json array. Each item in the array has the user email and id (uid)",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									}
								]
							},
							"firestore_query": {
								"description": "Returns an array of JSON documents. If offset is 0, count is also returned",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "querydefinition",
										"optional": true
									},
									{
										"name": "offset",
										"optional": true
									},
									{
										"name": "limit",
										"optional": true
									}
								]
							},
							"firestore_updatedocument": {
								"description": "Updates a Firestore document. If flagMerge is .t. then existing properties in the document are preserved, else document is completely replaced by new JSON.",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "collection"
									},
									{
										"name": "json"
									},
									{
										"name": "key"
									},
									{
										"name": "flagmerge",
										"optional": true
									}
								]
							},
							"firestore_validateuser": {
								"description": "Returns an object with user information (error - .t./.f., validuser (.t./.f.), uid and email)",
								"arguments": [
									{
										"name": "serviceaccountconnectionstring"
									},
									{
										"name": "token"
									}
								]
							},
							"firestoreexplorer": {},
							"first": {
								"description": "Get the first of subexpression over group 'over' sampled each group 'each'",
								"arguments": [
									{
										"name": "subexpr"
									},
									{
										"name": "over",
										"optional": true
									},
									{
										"name": "each",
										"optional": true
									}
								]
							}
						},
						"x": {
							"fixdatestring": {
								"description": "Takes a date string and a date format and transforms the date string so that it matches the format that Alpha Five expects (based on the current Regional Settings configuration). The year portion MUST be the last part of the date format. I.e. Does not support formats like YYYY/mm/dd",
								"arguments": [
									{
										"name": "datestring"
									},
									{
										"name": "dateformat"
									}
								]
							}
						}
					}
				},
				"l": {
					"flattenquery": {
						"description": "Function passes data through, it is included to modify the behavior of query of child fields.",
						"arguments": [
							{
								"name": "result"
							}
						]
					},
					"floor": {
						"description": "Returns the largest integer that is less than or equal to a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					}
				},
				"o": {
					"form_objects_get": {
						"description": "Returns object hierarchy for a form.",
						"arguments": [
							{
								"name": "formname"
							},
							{
								"name": "library",
								"optional": true
							},
							{
								"name": "prefix",
								"optional": true
							},
							{
								"name": "classprefix",
								"optional": true
							},
							{
								"name": "filter",
								"optional": true
							}
						]
					},
					"form_qs_explicit": {
						"description": "Sorts the record in a window based on values in a field object",
						"arguments": [
							{
								"name": "objectname"
							},
							{
								"name": "direction"
							}
						]
					},
					"format_data": {
						"description": "Formats an input string using a format_code. Returns a character string.",
						"arguments": [
							{
								"name": "input_value"
							},
							{
								"name": "format_code"
							},
							{
								"name": "fld_width",
								"optional": true
							},
							{
								"name": "fld_dec",
								"optional": true
							}
						]
					}
				},
				"t": {
					"ftp_file_xfer": {
						"description": "Transfers a file using FTP",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "source_file"
							},
							{
								"name": "destination_file"
							},
							{
								"name": "getput"
							},
							{
								"name": "background",
								"optional": true
							},
							{
								"name": "title",
								"optional": true
							}
						]
					},
					"ftp_get_file": {
						"description": "Uploads a file using FTP",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "source_file"
							},
							{
								"name": "destination_file"
							},
							{
								"name": "modal",
								"optional": true
							},
							{
								"name": "title",
								"optional": true
							}
						]
					},
					"ftp_get_list": {
						"description": "Retrieves a directory listing from a FTP server",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "path",
								"optional": true
							},
							{
								"name": "nlist",
								"optional": true
							}
						]
					},
					"ftp_get_nlist": {
						"description": "Retrieves a directory listing from a FTP server",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "path",
								"optional": true
							}
						]
					},
					"ftp_put_file": {
						"description": "Uploads a file using FTP",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "source_file"
							},
							{
								"name": "destination_file"
							},
							{
								"name": "background",
								"optional": true
							},
							{
								"name": "title",
								"optional": true
							}
						]
					},
					"ftp_put_file_modal": {
						"description": "Transfers a file using FTP. Calling script pauses till tranfer is complete.",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "source_file"
							},
							{
								"name": "destination_file"
							}
						]
					},
					"ftp_put_file_multiple": {
						"description": "Upload a file to a FTP server",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "source_files"
							},
							{
								"name": "source_folder"
							},
							{
								"name": "destination_folder"
							},
							{
								"name": "background",
								"optional": true
							}
						]
					},
					"ftp_script_run": {
						"description": "Run an alpha five FTP script...",
						"arguments": [
							{
								"name": "title"
							},
							{
								"name": "ftp_script"
							},
							{
								"name": "background",
								"optional": true
							},
							{
								"name": "total_bytes",
								"optional": true
							}
						]
					},
					"ftp_script_run_silent": {
						"description": "Run an alpha five FTP script...",
						"arguments": [
							{
								"name": "ftp_script"
							},
							{
								"name": "modal",
								"optional": true
							},
							{
								"name": "ftpstatus",
								"optional": true
							}
						]
					},
					"ftp_test_connect": {
						"description": "Determine if FTP will connect with settings provided",
						"arguments": [
							{
								"name": "address"
							},
							{
								"name": "user"
							},
							{
								"name": "password"
							},
							{
								"name": "port"
							}
						]
					},
					"ftp_upload_curl": {
						"description": "FTP Upload using CURL.  If a source folder is not specified, each file in file list must have a full path and all files will be put in the target folder",
						"arguments": [
							{
								"name": "filelist"
							},
							{
								"name": "sourcefolder"
							},
							{
								"name": "address"
							},
							{
								"name": "targetfolder"
							},
							{
								"name": "username"
							},
							{
								"name": "password"
							},
							{
								"name": "options",
								"optional": true
							},
							{
								"name": "flagnoui",
								"optional": true
							}
						]
					}
				},
				"u": {
					"function_description_get": {
						"description": "Get the description for a named function.",
						"arguments": [
							{
								"name": "function"
							}
						]
					},
					"function_limitations_get": {
						"description": "Get the limitations for a named function.",
						"arguments": [
							{
								"name": "function"
							}
						]
					},
					"function_prototype_get": {
						"description": "Get the prototype for a named function.",
						"arguments": [
							{
								"name": "function"
							}
						]
					},
					"function_tags_get": {
						"description": "Get the tags for a named function (useful for determining what edition they are available in).",
						"arguments": [
							{
								"name": "function"
							}
						]
					},
					"functions_get": {
						"description": "Returns a list of function prototypes - types of '*' means all types, Limitations F=functions,X=xbasic,G=graphic.",
						"arguments": [
							{
								"name": "types"
							},
							{
								"name": "limitations"
							}
						]
					}
				},
				"v": {
					"fv": {
						"description": "Returns the future value of a stream of equal investments over a specified integer term.",
						"arguments": [
							{
								"name": "investments"
							},
							{
								"name": "interest_rate"
							},
							{
								"name": "time_periods"
							}
						]
					},
					"fv2": {
						"description": "Returns the future value of a stream of equal investments over over a specified fractional term.",
						"arguments": [
							{
								"name": "investments"
							},
							{
								"name": "interest_rate"
							},
							{
								"name": "time_periods"
							}
						]
					}
				}
			}
		},
		"g": {
			"generate_mime_boundary": {
				"description": "Create a MIME boundary sring that adheres to RFC 2046"
			},
			"geocode_address": {
				"description": "Geocode an address. Returns .lat and .lon. Also returns .error_code and .error_text. Address must be entered with commas between each part. e.g. 123 Main St., Boston, MA, 02116, USA. Method can be 'Nominatim' or 'Google'. Default is 'Google'",
				"arguments": [
					{
						"name": "address"
					},
					{
						"name": "method",
						"optional": true
					},
					{
						"name": "apikey",
						"optional": true
					}
				]
			},
			"get_dictionary_for_obj": {
				"description": "Returns the dictionary name where a Control Panel object is stored.",
				"arguments": [
					{
						"name": "object_type"
					},
					{
						"name": "object_name"
					}
				]
			},
			"get_from_file": {
				"description": "Returns the contents of a file.",
				"arguments": [
					{
						"name": "filename"
					},
					{
						"name": "flagbase64encode",
						"optional": true
					}
				]
			},
			"get_index_definitions": {
				"description": "Gets the definitions of all index tags in a table's index file. Format is: tagname|OrderExpn|FilterExpn|Flags. Returns a CRLF delimited string. Use create_indexes() to rebuild indexes using this definition string.",
				"arguments": [
					{
						"name": "tablename"
					}
				]
			},
			"get_loaded_library": {
				"description": "Returns the name of library loaded at the specified level - returns NULL if none.",
				"arguments": [
					{
						"name": "library_level"
					}
				]
			},
			"getchartobjectname": {
				"description": "Returns the name of the Graph ActiveX control installed by Microsoft Office. This component has a different name, depending on which version of Office is installed."
			},
			"getcomputername": {
				"description": "Returns the Windows name assigned to this computer."
			},
			"getcultureinfo": {
				"description": "Returns culture information",
				"arguments": [
					{
						"name": "culture",
						"optional": true
					}
				]
			},
			"getenvironmentvariable": {
				"description": "Returns the value of the requested environment variable or \"\" if not set.",
				"arguments": [
					{
						"name": "variablename"
					}
				]
			},
			"getfieldsinexpression": {
				"description": "Returns a CRLF delimited list of fieldnames in an expression",
				"arguments": [
					{
						"name": "expn"
					}
				]
			},
			"getfromapplicationdatafile": {
				"description": " Get data from an application data file.  String is passed by reference",
				"arguments": [
					{
						"name": "filename"
					},
					{
						"name": "string"
					}
				]
			},
			"getsecurityintegritylevel": {
				"description": "Returns the level of integrity of the process. \n0 - Not Vista or later (Untrusted)\n1 - Low (protected)\n2 - Medium (default on Vista)\n3 - High\n4 - System (running as a system account)"
			},
			"getstringfromfile": {
				"description": " Gets a string from a filename, returns a callresult",
				"arguments": [
					{
						"name": "filename"
					},
					{
						"name": "string"
					},
					{
						"name": "silent",
						"optional": true
					}
				]
			},
			"gettabledata": {
				"description": "Extracts data from a native Alpha Five table (.dbf file)",
				"arguments": [
					{
						"name": "tablename"
					},
					{
						"name": "contentexpression"
					},
					{
						"name": "order",
						"optional": true
					},
					{
						"name": "filter",
						"optional": true
					}
				]
			},
			"gettimezoneoffset": {
				"description": " Returns the number of hours the current timezone is offset from GMT."
			},
			"getusername": {
				"description": "Returns the name of the currently logged on Windows user."
			},
			"global_variables": {
				"description": "Gets the global variable frame."
			},
			"gmt": {
				"description": "Returns the current GTM time on the system clock in the format 'HH:MM:SS'.",
				"arguments": [
					{
						"name": "time_format",
						"optional": true
					}
				]
			}
		},
		"h": {
			"__index__": {
				"a": {
					"handlebars_template_merge": {
						"description": "Public user defined function.",
						"arguments": [
							{
								"name": "template"
							},
							{
								"name": "jsondata"
							}
						]
					},
					"haschildrecords": {
						"description": "Returns true if for the current parent record in a set there are linked child records in the specified table alias.",
						"arguments": [
							{
								"name": "tablealias"
							}
						]
					}
				},
				"m": {
					"hmac_hash": {
						"description": "Generates a digital signature of the data using the key and HMACSHA1, HMACSHA256, or any other signing method supported by the .NET Framework",
						"arguments": [
							{
								"name": "data"
							},
							{
								"name": "key"
							},
							{
								"name": "algorithm",
								"optional": true
							},
							{
								"name": "tohex",
								"optional": true
							}
						]
					}
				},
				"o": {
					"hostavailable": {
						"description": "Returns .t. if a host site is available. If no parameters are specified, can be used to tell if there is an active Internet connection.",
						"arguments": [
							{
								"name": "host",
								"optional": true
							},
							{
								"name": "port",
								"optional": true
							}
						]
					},
					"hourglass_cursor": {
						"description": "Show hourglass cursor, or restore normal cursor.",
						"arguments": [
							{
								"name": "show"
							}
						]
					}
				},
				"t": {
					"__index__": {
						"m": {
							"html_stritran": {
								"description": "Perform stritran on the plaintext of html.",
								"arguments": [
									{
										"name": "html"
									},
									{
										"name": "search"
									},
									{
										"name": "replace",
										"optional": true
									}
								]
							},
							"html_strtran": {
								"description": "Perform strtran on the plaintext of html.",
								"arguments": [
									{
										"name": "html"
									},
									{
										"name": "search"
									},
									{
										"name": "replace",
										"optional": true
									}
								]
							},
							"html_to_pdf": {
								"description": "Convert an html file (or an HTML string), with any links to contents in the same folder, into a PDF file.",
								"arguments": [
									{
										"name": "html_file_or_text"
									},
									{
										"name": "pdf_file",
										"optional": true
									},
									{
										"name": "objin",
										"optional": true
									},
									{
										"name": "flagphantojs",
										"optional": true
									}
								]
							},
							"htmlencode": {
								"description": "Apply HTML encoding to the input",
								"arguments": [
									{
										"name": "input"
									},
									{
										"name": "strict",
										"optional": true
									}
								]
							}
						},
						"t": {
							"__index__": {
								"p": {
									"__index__": {
										"_": {
											"http_delete": {
												"description": "Use the HTTP method DELETE to retrieve the specified URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "cookie",
														"optional": true
													},
													{
														"name": "port",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "show_before_send",
														"optional": true
													},
													{
														"name": "validate_ssl_cert",
														"optional": true
													}
												]
											},
											"http_download": {
												"description": "Download a file via the HTTP protocol and display a progress dialog",
												"arguments": [
													{
														"name": "source_url",
														"optional": true
													},
													{
														"name": "target_file",
														"optional": true
													},
													{
														"name": "modal",
														"optional": true
													},
													{
														"name": "pdialogsettings",
														"optional": true
													}
												]
											},
											"http_download_bg": {
												"description": "Creates a background thread which uses the HTTP protocol to download from source_url and save the data to target_file",
												"arguments": [
													{
														"name": "source_url"
													},
													{
														"name": "target_file"
													}
												]
											},
											"http_fetch": {
												"description": "Sends an HTTP request to a server and retrieves the response",
												"arguments": [
													{
														"name": "settings"
													},
													{
														"name": "show_before_send",
														"optional": true
													},
													{
														"name": "sslcipherlist",
														"optional": true
													},
													{
														"name": "mintlslevel",
														"optional": true
													}
												]
											},
											"http_fetch_page2": {
												"description": "Use HTTP GET or POST to retrieve the specified URL.",
												"arguments": [
													{
														"name": "method"
													},
													{
														"name": "url"
													},
													{
														"name": "body",
														"optional": true
													},
													{
														"name": "include_headers",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "userid",
														"optional": true
													},
													{
														"name": "password",
														"optional": true
													}
												]
											},
											"http_get": {
												"description": "Use the HTTP method GET to retrieve the specified URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "cookie",
														"optional": true
													},
													{
														"name": "port",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "show_before_send",
														"optional": true
													},
													{
														"name": "validate_ssl_cert",
														"optional": true
													},
													{
														"name": "sslcipherlist",
														"optional": true
													}
												]
											},
											"http_get_page": {
												"description": "Gets the contents of a web page.",
												"arguments": [
													{
														"name": "host"
													},
													{
														"name": "page",
														"optional": true
													},
													{
														"name": "port",
														"optional": true
													}
												]
											},
											"http_get_page2": {
												"description": "Use the HTTP method GET to retrieve the specified URL.",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "include_headers",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "userid",
														"optional": true
													},
													{
														"name": "password",
														"optional": true
													}
												]
											},
											"http_post": {
												"description": "Use the HTTP method POST to retrieve the specified URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "body",
														"optional": true
													},
													{
														"name": "cookie",
														"optional": true
													},
													{
														"name": "port",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "show_before_send",
														"optional": true
													},
													{
														"name": "validate_ssl_cert",
														"optional": true
													},
													{
														"name": "sslcipherlist",
														"optional": true
													}
												]
											},
											"http_post_page2": {
												"description": "Use the HTTP method POST to retrieve the specified URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "post_body",
														"optional": true
													},
													{
														"name": "include_headers",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													}
												]
											},
											"http_put": {
												"description": "Use the HTTP method PUT to retrieve the specified URL",
												"arguments": [
													{
														"name": "url"
													},
													{
														"name": "body",
														"optional": true
													},
													{
														"name": "cookie",
														"optional": true
													},
													{
														"name": "port",
														"optional": true
													},
													{
														"name": "timeout",
														"optional": true
													},
													{
														"name": "show_before_send",
														"optional": true
													},
													{
														"name": "validate_ssl_cert",
														"optional": true
													},
													{
														"name": "sslcipherlist",
														"optional": true
													}
												]
											},
											"http_unchunk": {
												"description": "Unchunk an HTTP message body that has had a chunked transfer encoding applied",
												"arguments": [
													{
														"name": "chunked_body"
													}
												]
											}
										},
										"d": {
											"httpd_adminalert": {
												"description": "Starts the Application Server",
												"arguments": [
													{
														"name": "logtext"
													},
													{
														"name": "serversettings"
													},
													{
														"name": "loglevel",
														"optional": true
													}
												]
											},
											"httpd_alpha_logo": {
												"description": "Returns a bitmap of the Alpha Software logo"
											},
											"httpd_autoactivate": {
												"description": "automatically install and activate server licenses",
												"arguments": [
													{
														"name": "show_errors",
														"optional": true
													}
												]
											},
											"httpd_checkfortlsenabled": {
												"description": "Check to see if TLS/SSL is enabled for the server, and prompt to enable it if not",
												"arguments": [
													{
														"name": "ss"
													}
												]
											},
											"httpd_defaultcipherlist": {
												"description": "Returns the default cipher listed used by the Application Server"
											},
											"httpd_gettimeskewinminutes": {
												"description": "Get time skew compared to NIST in minutes. Returns 0 if NIST cannot be contacted."
											},
											"httpd_gettimeskewinseconds": {
												"description": "Get time skew compared to NIST in seconds. Returns 0 if NIST cannot be contacted."
											},
											"httpd_license_activate": {
												"description": "Activates the specified Application Server license",
												"arguments": [
													{
														"name": "license"
													},
													{
														"name": "show_ui",
														"optional": true
													}
												]
											},
											"httpd_license_deactivate": {
												"description": "Deactivates the specified Application Server license",
												"arguments": [
													{
														"name": "license"
													}
												]
											},
											"httpd_logtoeventlog": {
												"description": "Log to the Windows event log",
												"arguments": [
													{
														"name": "errortext"
													},
													{
														"name": "errortype",
														"optional": true
													},
													{
														"name": "eventid",
														"optional": true
													},
													{
														"name": "sourcename",
														"optional": true
													}
												]
											},
											"httpd_server_is_running": {
												"description": "Returns true if thr Application Server is running",
												"arguments": [
													{
														"name": "server_name",
														"optional": true
													}
												]
											},
											"httpd_server_restart": {
												"description": "Restart the Application Server",
												"arguments": [
													{
														"name": "confirm",
														"optional": true
													},
													{
														"name": "raise_errors",
														"optional": true
													},
													{
														"name": "use_registry_settings",
														"optional": true
													},
													{
														"name": "flagsuppressrestartmessage",
														"optional": true
													}
												]
											},
											"httpd_server_start": {
												"description": "Starts the Application Server",
												"arguments": [
													{
														"name": "confirm",
														"optional": true
													},
													{
														"name": "raise_errors",
														"optional": true
													},
													{
														"name": "use_config_settings",
														"optional": true
													},
													{
														"name": "server_name",
														"optional": true
													}
												]
											},
											"httpd_server_stop": {
												"description": "Stop server",
												"arguments": [
													{
														"name": "confirm",
														"optional": true
													},
													{
														"name": "raise_errors",
														"optional": true
													},
													{
														"name": "use_registry_settings",
														"optional": true
													},
													{
														"name": "server_name",
														"optional": true
													}
												]
											},
											"httpd_server_toggle": {
												"description": "Toggles the state of the Application Server (e.g. starts a stopped server, stops a running server)",
												"arguments": [
													{
														"name": "confirm",
														"optional": true
													},
													{
														"name": "raise_errors",
														"optional": true
													},
													{
														"name": "use_registry_settings",
														"optional": true
													}
												]
											},
											"httpd_settings_get": {
												"description": "Loads the Application Server settings",
												"arguments": [
													{
														"name": "from_memory",
														"optional": true
													},
													{
														"name": "createmissingconfigfile",
														"optional": true
													}
												]
											},
											"httpd_verifysessionstorageconnectionstring": {
												"description": "Verifies that the A5Storage connection string used for the App Server's session storage is fully writeable",
												"arguments": [
													{
														"name": "sessionstorage"
													}
												]
											},
											"httpdate": {
												"description": "Creates an HTTP compliant date/time string",
												"arguments": [
													{
														"name": "date"
													}
												]
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"i": {
			"__index__": {
				"f": {
					"if": {
						"description": "Tests an expression and returns one of two expressions.",
						"arguments": [
							{
								"name": "condition"
							},
							{
								"name": "result_true"
							},
							{
								"name": "result_false"
							}
						]
					}
				},
				"i": {
					"iif": {
						"description": "Tests an expression and returns one of two expressions.",
						"arguments": [
							{
								"name": "condition"
							},
							{
								"name": "result_true"
							},
							{
								"name": "result_false"
							}
						]
					}
				},
				"m": {
					"image_filename_encode": {
						"description": "Used to encode an image filename with an alias. Called by routines that set the image filename",
						"arguments": [
							{
								"name": "filename"
							}
						]
					},
					"import_from_quickbooks": {
						"description": "Imports a table from QuickBooks to an Alpha Five table.",
						"arguments": [
							{
								"name": "type"
							},
							{
								"name": "source_filename_or_dsn"
							},
							{
								"name": "table_to_create"
							},
							{
								"name": "sql_statement"
							},
							{
								"name": "password",
								"optional": true
							},
							{
								"name": "user_name",
								"optional": true
							}
						]
					},
					"import_scripts_udfs": {
						"description": "Imports Global Scripts and Functions from a Text File",
						"arguments": [
							{
								"name": "filename",
								"optional": true
							},
							{
								"name": "silent",
								"optional": true
							},
							{
								"name": "automatic_overwrite",
								"optional": true
							}
						]
					}
				},
				"n": {
					"increment_value": {
						"description": "Increments a value of any type. Character fields can be incremented. e.g. \"AZ-9\" becomes \"BA-0\"",
						"arguments": [
							{
								"name": "input"
							}
						]
					},
					"indexes_match_defstring": {
						"description": "Checks if a table's indexes match a Definition string (a crlf string of form Tagname|OrderExpn|FilterExpn|Flags). The definition string is typically created using Get_Index_Definitions(). Returns a pointer with these properties: Error (.t. or .f.), AdditionalIndexTags (tags in the table not in the index def), MissingIndexTags (tags in the index def, but not in the table).",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "indexdefstring"
							}
						]
					},
					"inlist": {
						"description": "Returns TRUE if first expr matches any remaining exp's in the parameter list.",
						"arguments": [
							{
								"name": "lookfor"
							},
							{
								"name": "value_1"
							},
							{
								"name": "value",
								"optional": true
							}
						]
					},
					"inlist2": {
						"description": "Case insensitive. Returns .t. if a string is found in a list of comma delimited values. Differs from inlist() in that the list to search is a single argument, rather than multiple arguments.",
						"arguments": [
							{
								"name": "lookfor"
							},
							{
								"name": "comma_delimited_list"
							}
						]
					},
					"inlistn": {
						"description": "Returns which value (if in list) or 0 if not.",
						"arguments": [
							{
								"name": "lookfor"
							},
							{
								"name": "value_1"
							},
							{
								"name": "value",
								"optional": true
							}
						]
					},
					"insert_text_in_rtf_memo": {
						"description": "Inserts text into an RTF memo field. To insert at end, set position to -1, Fontname_size is of form: \"Arial,12,B\".",
						"arguments": [
							{
								"name": "table_pointer"
							},
							{
								"name": "rtf_memo_fieldname"
							},
							{
								"name": "text"
							},
							{
								"name": "position",
								"optional": true
							},
							{
								"name": "fontname_size",
								"optional": true
							},
							{
								"name": "fontname_color",
								"optional": true
							}
						]
					},
					"int": {
						"description": "Returns the integer part of a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					},
					"intelligent_mail_barcode": {
						"description": "Function returns codes to use with the intelligent mail barcode font. ",
						"arguments": [
							{
								"name": "code"
							}
						]
					},
					"invert": {
						"description": "Used in index expressions to create an order from highest to lowest.",
						"arguments": [
							{
								"name": "value"
							}
						]
					},
					"invert_lines": {
						"description": "Invert rows in a CRLF delimited string",
						"arguments": [
							{
								"name": "string"
							}
						]
					}
				},
				"s": {
					"is_dict_required": {
						"description": "Returns .t. if it is necessary to fully qualify an Object name with its dictionary in order to uniquely identify it. Is .t. if Database contains duplicate object names stored in different dictionaries.",
						"arguments": [
							{
								"name": "object_name"
							},
							{
								"name": "dictionary_name"
							},
							{
								"name": "object_type"
							}
						]
					},
					"is_guid_format": {
						"description": "Returns .t. if a string is in the format of a GUID.",
						"arguments": [
							{
								"name": "guid"
							}
						]
					},
					"is_object": {
						"description": "Tests whether the object named by the pointer or string exists.",
						"arguments": [
							{
								"name": "object"
							}
						]
					},
					"is_one_of": {
						"description": "Returns .t. if a value is contained in a crlf delimited list of values",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "list_of_values"
							}
						]
					},
					"is_recno_in": {
						"description": "Returns TRUE if record number is in list of record numbers provided.",
						"arguments": [
							{
								"name": "record_number_list"
							}
						]
					},
					"isalpha": {
						"description": "Returns TRUE if the first character of a string is a letter.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"isarray": {
						"description": "Returns .t. if an object is an array",
						"arguments": [
							{
								"name": "obj"
							}
						]
					},
					"isblank": {
						"description": "Returns TRUE if the field is blank.",
						"arguments": [
							{
								"name": "fieldname"
							}
						]
					},
					"isdate": {
						"description": "Returns .T. if Date is a valid date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					},
					"isdigit": {
						"description": "Returns TRUE if the first character of a string is a digit.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"islower": {
						"description": "Returns TRUE if the first character of a string is lowercase.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"isnonnullguid": {
						"description": "Returns .T. if a string is in the format of a GUID and a valid GUID value (not NULL).",
						"arguments": [
							{
								"name": "guid"
							}
						]
					},
					"isnotblank": {
						"description": "Returns TRUE if the field is not blank.",
						"arguments": [
							{
								"name": "fieldname"
							}
						]
					},
					"isnull": {
						"description": "Returns .T. if String is empty.",
						"arguments": [
							{
								"name": "string"
							}
						]
					},
					"isnumber": {
						"description": "Returns .t. if a text string contains only numbers",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "allow_decimal_separator",
								"optional": true
							},
							{
								"name": "allow_thousands_separator",
								"optional": true
							}
						]
					},
					"ispropertyarray": {
						"description": "Returns .t. if an object is an array",
						"arguments": [
							{
								"name": "obj"
							}
						]
					},
					"isshorttime": {
						"description": "Returns true is the string value is a valid short time.",
						"arguments": [
							{
								"name": "source"
							}
						]
					},
					"istime": {
						"description": "Returns true is the string value is a valid datetime.",
						"arguments": [
							{
								"name": "source"
							}
						]
					},
					"isupper": {
						"description": "Returns TRUE if the first character of a string is uppercase.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				}
			}
		},
		"j": {
			"__index__": {
				"d": {
					"jdate": {
						"description": "Returns a number which is the Julian equivalent to a specified date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"o": {
					"join_lists": {
						"description": "Joins two CR-LF delimited lists into a single list. Result has same number of rows as 'list1'.",
						"arguments": [
							{
								"name": "list1"
							},
							{
								"name": "list2"
							},
							{
								"name": "separator",
								"optional": true
							}
						]
					}
				},
				"p": {
					"jpeg_to_bitmap": {
						"description": "Convert a jpeg to a bitmap.",
						"arguments": [
							{
								"name": "jpeg_data"
							}
						]
					}
				},
				"s": {
					"__index__": {
						"_": {
							"js_escape": {
								"description": "Escape a string to embed in emitted javascript.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "flags",
										"optional": true
									}
								]
							},
							"js_list_to_array": {
								"description": "Takes a CR-LF delimited list of values and turns it into a Javascript array.",
								"arguments": [
									{
										"name": "list"
									},
									{
										"name": "listiscommadelimited",
										"optional": true
									},
									{
										"name": "flagcheckifnumeric",
										"optional": true
									},
									{
										"name": "flagarrayofarrays",
										"optional": true
									}
								]
							},
							"js_unescape": {
								"description": "Parse a javascript string.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "flags",
										"optional": true
									}
								]
							}
						},
						"e": {
							"jsescapequotes": {
								"description": "Escape single and double quotes within an string for use within JavaScript",
								"arguments": [
									{
										"name": "unsafestring"
									}
								]
							}
						},
						"o": {
							"__index__": {
								"n": {
									"__index__": {
										"_": {
											"__index__": {
												"c": {
													"json_combineproperties": {
														"description": "Combines properties in two json strings into a single json string",
														"arguments": [
															{
																"name": "json1"
															},
															{
																"name": "json2"
															}
														]
													},
													"json_compare": {
														"description": "Compares to JSON string and returns .t. if they are equal",
														"arguments": [
															{
																"name": "json1"
															},
															{
																"name": "json2"
															}
														]
													},
													"json_composite": {
														"description": "Composite flat JSON into a tree using a reference example relation structure. Mode can be 'sparse' to eliminate child keys from output.  limits is optional 'table' : 'limit' pairs, optional 'views' to extract groups from flattened tables included in text section.",
														"arguments": [
															{
																"name": "parent"
															},
															{
																"name": "relations"
															},
															{
																"name": "jsontext"
															},
															{
																"name": "mode",
																"optional": true
															},
															{
																"name": "limits",
																"optional": true
															},
															{
																"name": "views",
																"optional": true
															},
															{
																"name": "calcs",
																"optional": true
															}
														]
													}
												},
												"d": {
													"json_delete": {
														"description": "Remove any nested array member that match pattern.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "pattern"
															}
														]
													}
												},
												"e": {
													"json_enumerate": {
														"description": "Enumerate top level of enumerate.",
														"arguments": [
															{
																"name": "jsontext"
															}
														]
													},
													"json_extract": {
														"description": "Find and extract a single tag from json.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "tag"
															}
														]
													}
												},
												"f": {
													"json_filter": {
														"description": "Filter in (or out) tags in a json object.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "tags"
															},
															{
																"name": "exclude",
																"optional": true
															}
														]
													},
													"json_flatten": {
														"description": "Parse and flatten comma separated 'patterns' - with optional '=prefix'.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "patterns"
															}
														]
													},
													"json_flatten_default": {
														"description": "Flattens hiearchical JSON using a default template.",
														"arguments": [
															{
																"name": "json"
															}
														]
													},
													"json_flatten_singlerow": {
														"description": "Flattens hierarchical JSON into a single row with nested arrays shown as repeating sets of fields.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "depth",
																"optional": true
															}
														]
													},
													"json_from_bson": {
														"description": "Convert bson data into json.",
														"arguments": [
															{
																"name": "bson"
															}
														]
													},
													"json_from_xml": {
														"description": "Convert XML to JSON.",
														"arguments": [
															{
																"name": "xmltext"
															},
															{
																"name": "toptag",
																"optional": true
															},
															{
																"name": "options",
																"optional": true
															}
														]
													},
													"json_from_xml_odata": {
														"description": "Convert XML ODATA to JSON (removes after layers so that v2 odata matches results of newer v3 and above services).",
														"arguments": [
															{
																"name": "xmltext"
															},
															{
																"name": "toptag",
																"optional": true
															},
															{
																"name": "options",
																"optional": true
															}
														]
													},
													"json_from_yaml": {
														"description": "Converts a YAML string to JSON",
														"arguments": [
															{
																"name": "json"
															}
														]
													}
												},
												"g": {
													"json_generate": {
														"description": "Converts an Xbasic variable to a JSON representation. If flagSpecialTags is .t. then you can use {function} and optional {functionArguments:var1,var2} in a property value to encode as a function. You can also use {Javascript} for arbitrary Javascript. If flagHonorNulls = .f. then null values are returned as empty strings (e.g. ''), otherwise, the Javascript null value is returned.",
														"arguments": [
															{
																"name": "var"
															},
															{
																"name": "flagspecialtags",
																"optional": true
															},
															{
																"name": "flagcondense",
																"optional": true
															},
															{
																"name": "indent",
																"optional": true
															},
															{
																"name": "flaghonornulls",
																"optional": true
															},
															{
																"name": "opsin",
																"optional": true
															}
														]
													},
													"json_get_array_length": {
														"description": "Gets the length of a JSON array. Return 0 if an object is passed in. Faster than using json_parse() to parse the json string.",
														"arguments": [
															{
																"name": "json"
															}
														]
													}
												},
												"n": {
													"json_normalize": {
														"description": "Turn flat JSON into grouped JSON",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "groupings"
															}
														]
													}
												},
												"p": {
													"json_paginate": {
														"description": "Takes an json array and returns a single \"page\" of records",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "pagenumber"
															},
															{
																"name": "pagesize"
															}
														]
													},
													"json_parse": {
														"description": "Parses a string in the format of a JSON object and returns a dot variable. (Use json_generate() to create a JSON string from a dot variable).",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "flagjavascriptsyntax",
																"optional": true
															},
															{
																"name": "removecomments",
																"optional": true
															}
														]
													},
													"json_parse2": {
														"description": "Parses a string in the format of a JSON object and returns a dot variable. (Use json_generate() to create a JSON string from a dot variable).",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "flagjavascriptsyntax",
																"optional": true
															}
														]
													},
													"json_path": {
														"description": "Use JsonPath to extract a portion of a JSON file. For JSONPath syntax, see http://goessner.net/articles/JsonPath/ ",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "path"
															}
														]
													}
												},
												"r": {
													"json_reformat": {
														"description": "Reformat JSON data to either indented or compact (indented if second argument is true, otherwise compact).",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "indented",
																"optional": true
															}
														]
													},
													"json_reformat_safe": {
														"description": "Reformats a JSON string with line-breaks and optional indentation. Contrast with json_reformat() which only accepts JSON strings that double quote property names.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "indented",
																"optional": true
															}
														]
													}
												},
												"s": {
													"json_sample_array": {
														"description": "Enumerate top level properties in array entries and return name+count.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "format",
																"optional": true
															},
															{
																"name": "limit",
																"optional": true
															}
														]
													},
													"json_sanitize": {
														"description": "Convert javascript object data to JSON, if aggressive flag is set, it will stringize 'data' which is not quoted as well.",
														"arguments": [
															{
																"name": "javascript"
															},
															{
																"name": "aggressive",
																"optional": true
															}
														]
													},
													"json_select": {
														"description": "Select json columns into an array, include optional key template/ CRC.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "columns"
															},
															{
																"name": "primarykey",
																"optional": true
															},
															{
																"name": "crc",
																"optional": true
															},
															{
																"name": "flags",
																"optional": true
															}
														]
													},
													"json_shred": {
														"description": "Takes a JSON array of objects with nested arrays and converts into individual arrays with no nested arrays. If the passed in schema is blank a default schema is generated. Wraps the extension::json::jsonshred() method.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "schema",
																"optional": true
															},
															{
																"name": "toparrayname",
																"optional": true
															},
															{
																"name": "flagaddsurrogateprimarykey",
																"optional": true
															},
															{
																"name": "surrogatekeyname",
																"optional": true
															}
														]
													},
													"json_sqlquery": {
														"description": "Takes JSON data (in the form of an array of objects) and applies a SQL SELECT statement of the form \"Select <fieldlist> from JSONTABLE WHERE <where clause> ORDER BY <order by clause>",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "sqlstatement"
															},
															{
																"name": "argsin",
																"optional": true
															},
															{
																"name": "columntypes",
																"optional": true
															},
															{
																"name": "otheropsin",
																"optional": true
															}
														]
													},
													"json_standardize": {
														"description": "Turns non-standard JSON (i.e. uses single quotes for property values, and does not quote property names) into standard JSON. Also fixes trailing commas. For maximum speed set flagReformat to .f.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "flagreformat",
																"optional": true
															}
														]
													}
												},
												"t": {
													"json_to_bson": {
														"description": "Convert json data into bson.",
														"arguments": [
															{
																"name": "json"
															}
														]
													},
													"json_to_crlf": {
														"description": "Convert json to crlf data",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "flagsilent",
																"optional": true
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													},
													"json_to_excel": {
														"description": "Exports data in a JSON document to an Excel file. If the JSON is an object where each object is an array, the Excel file has multiple sheets (one for each property in the object). If the JSON is an array, the Excel file has a single sheet called 'Table1'.",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "filename"
															}
														]
													},
													"json_to_xml": {
														"description": "Convert JSON to XML.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "toptag",
																"optional": true
															},
															{
																"name": "options",
																"optional": true
															}
														]
													},
													"json_to_yaml": {
														"description": "Converts a JSON string to YAML",
														"arguments": [
															{
																"name": "json"
															}
														]
													}
												},
												"v": {
													"json_validate": {
														"description": "Peform a syntax check on the JSON.",
														"arguments": [
															{
																"name": "jsontext"
															},
															{
																"name": "showoffset",
																"optional": true
															}
														]
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"t": {
					"jtodate": {
						"description": "Returns a date value which is the equivelant to the supplied Julian number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					}
				},
				"w": {
					"jwt_create": {
						"description": "Creates a JWT. duration is the length in seconds that the JWT is valid for. notbefore is the delay in seconds before the JWT is valid. algorithm defaults to 'HS512'",
						"arguments": [
							{
								"name": "json"
							},
							{
								"name": "duration"
							},
							{
								"name": "secret"
							},
							{
								"name": "algorithm",
								"optional": true
							},
							{
								"name": "notbefore",
								"optional": true
							}
						]
					},
					"jwt_decode": {
						"description": "Decodes as JWT. algorithm defaults to 'Hs512'. Returns blank value if token has expired.",
						"arguments": [
							{
								"name": "jwt"
							},
							{
								"name": "secret"
							},
							{
								"name": "algorithm",
								"optional": true
							}
						]
					}
				}
			}
		},
		"k": {
			"key_exist": {
				"description": "Returns TRUE if a specified key value is found in a specified index.",
				"arguments": [
					{
						"name": "tagname"
					},
					{
						"name": "keyvalue"
					}
				]
			},
			"key_unique": {
				"description": "Determines if the keyvalue for the specified tag is unique.",
				"arguments": [
					{
						"name": "tagname"
					}
				]
			},
			"keylist_build": {
				"description": "Build a list of keys.",
				"arguments": [
					{
						"name": "keylist_format"
					},
					{
						"name": "return_value"
					},
					{
						"name": "column1"
					},
					{
						"name": "column2",
						"optional": true
					}
				]
			},
			"keylist_filtered_build": {
				"description": "Build a list of keys that is pre-filter.",
				"arguments": [
					{
						"name": "keylist_format"
					},
					{
						"name": "filter_return_value_list"
					},
					{
						"name": "return_value"
					},
					{
						"name": "column1"
					},
					{
						"name": "column2",
						"optional": true
					}
				]
			},
			"keywords": {
				"description": "Returns a sorted list of all unique words in a string, when used in with index, will generate a keyword index.",
				"arguments": [
					{
						"name": "string"
					}
				]
			},
			"keywordsi": {
				"description": "Returns a sorted list of all unique case-insensitive words in a string, when used in with index, will generate a keyword index.",
				"arguments": [
					{
						"name": "string"
					}
				]
			},
			"keywordsx": {
				"description": "Returns a sorted list of all unique soundex words in a string.",
				"arguments": [
					{
						"name": "string"
					}
				]
			}
		},
		"l": {
			"__index__": {
				"a": {
					"last": {
						"description": "Get the last of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"lastword": {
						"description": " returns the last \"word\" in a string",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "separator",
								"optional": true
							}
						]
					},
					"layout_delete": {
						"description": "Deletes a Form, Browse, Label, Letter, or Report Layout ",
						"arguments": [
							{
								"name": "layout_name"
							},
							{
								"name": "layout_type"
							},
							{
								"name": "flagrefreshcontrolpanel",
								"optional": true
							}
						]
					},
					"layout_rename": {
						"description": "Renames a Form, Browse, Label, Letter, or Report Layout ",
						"arguments": [
							{
								"name": "layout_name"
							},
							{
								"name": "layout_type"
							},
							{
								"name": "new_name"
							},
							{
								"name": "duplicate",
								"optional": true
							},
							{
								"name": "flagrefreshcontrolpanel",
								"optional": true
							}
						]
					}
				},
				"e": {
					"leading": {
						"description": "Returns the non-word characters preceding the specified word.",
						"arguments": [
							{
								"name": "strings"
							},
							{
								"name": "word_number"
							}
						]
					},
					"left": {
						"description": "Returns a portion of a string, starting with the leftmost character.",
						"arguments": [
							{
								"name": "text"
							},
							{
								"name": "number_of_characters"
							}
						]
					},
					"left_u": {
						"description": "Returns a portion of a string, starting with the leftmost character, honors UTF8 encoding.",
						"arguments": [
							{
								"name": "text"
							},
							{
								"name": "number_of_characters"
							}
						]
					},
					"len": {
						"description": "Returns the number of characters in a string.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"len_u": {
						"description": "Returns the number of characters in a string, honors UTF8 encoding.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"i": {
					"library_binary_get": {
						"description": "Return library object content as binary data.",
						"arguments": [
							{
								"name": "name"
							},
							{
								"name": "type"
							}
						]
					},
					"library_object_exists": {
						"description": "Return True if the library object exists.",
						"arguments": [
							{
								"name": "name"
							},
							{
								"name": "type"
							}
						]
					},
					"library_text_get": {
						"description": "Return library object content as text.",
						"arguments": [
							{
								"name": "name"
							},
							{
								"name": "type"
							}
						]
					},
					"like": {
						"description": "Returns TRUE if all or part of the first string is found in the second string.",
						"arguments": [
							{
								"name": "string_1"
							},
							{
								"name": "character_string_2"
							}
						]
					},
					"line_count": {
						"description": "Counts the number of lines in a string.",
						"arguments": [
							{
								"name": "source"
							}
						]
					},
					"line_insert": {
						"description": "Inserts a CRLF delimited string into another string at the specified position. Position can either be a line number or a string found in an existing line. Position can include wildcard characters. If before is .t. then insertion is made before position.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "string_to_insert"
							},
							{
								"name": "position"
							},
							{
								"name": "before",
								"optional": true
							}
						]
					},
					"line_reverseorder": {
						"description": "Reverse the order of the entries in a crlf delimited list.",
						"arguments": [
							{
								"name": "lines"
							}
						]
					},
					"link": {
						"description": "Returns the linking key given the name of a child table.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					},
					"list_files_in_database": {
						"description": "Returns a CRLF delimited list of all physical files in a database.",
						"arguments": [
							{
								"name": "include_webproj_files",
								"optional": true
							}
						]
					},
					"list_files_in_set": {
						"description": "Returns a CRLF delimited list of all physical files in a set.",
						"arguments": [
							{
								"name": "setname"
							}
						]
					}
				},
				"o": {
					"load_adb_def": {
						"description": "Returns contents of an ADB file in a readable format mode=1 for load all contents, 0 for just tables and sets.",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "mode",
								"optional": true
							}
						]
					},
					"load_compiled_script": {
						"description": "Loads a compiled script so that it can be referenced through a code pointer.",
						"arguments": [
							{
								"name": "name"
							},
							{
								"name": "code"
							}
						]
					},
					"load_external_udfs": {
						"description": "Load UDF's from an .ALB file into memory - permission can be Application,Addin or System.",
						"arguments": [
							{
								"name": "library"
							},
							{
								"name": "permission_level",
								"optional": true
							}
						]
					},
					"load_library": {
						"description": "Load an AEX file so that a5 can use it, returns a level handle 0-255, run_autoexec is assumed TRUE if not specified - any script named autoexec is run when the AEX file is opened.",
						"arguments": [
							{
								"name": "library"
							},
							{
								"name": "run_autoexec",
								"optional": true
							}
						]
					},
					"loadclass": {
						"arguments": [
							{
								"name": "classname"
							},
							{
								"name": "searchpath",
								"optional": true
							}
						]
					},
					"local_variables": {
						"description": "Gets the local variable frame, used to pass local script variables down to other functions."
					},
					"log": {
						"description": "Returns the natural log (base e) of a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					},
					"log10": {
						"description": "Returns the natural log (base 10) of a number.",
						"arguments": [
							{
								"name": "number"
							}
						]
					},
					"lookup": {
						"description": "Returns the value of an expression in an external table for first match of filter.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							},
							{
								"name": "result_expression"
							}
						]
					},
					"lookup_expression_to_related_fields": {
						"description": "Undoes conversion of a lookup expression that was generated from a set-based expression.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "tablename",
								"optional": true
							}
						]
					},
					"lookupc": {
						"description": "Returns the value of a character expression in an external table.",
						"arguments": [
							{
								"name": "matchtype"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "result_expression"
							},
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							}
						]
					},
					"lookupd": {
						"description": "Returns the value of a date expression in an external table.",
						"arguments": [
							{
								"name": "matchtype"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "result_expression"
							},
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							}
						]
					},
					"lookupl": {
						"description": "Returns the value of a logical expression in an external table.",
						"arguments": [
							{
								"name": "matchtype"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "result_expression"
							},
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							}
						]
					},
					"lookupn": {
						"description": "Returns the value of a numeric expression in an external table.",
						"arguments": [
							{
								"name": "matchtype"
							},
							{
								"name": "keyvalue"
							},
							{
								"name": "result_expression"
							},
							{
								"name": "tablename"
							},
							{
								"name": "tagname"
							}
						]
					},
					"lower": {
						"description": "Converts a character string to lowercase.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"t": {
					"lt": {
						"description": "Converts a string to lower case and trims trailing/leading blanks. ",
						"arguments": [
							{
								"name": "string"
							}
						]
					},
					"ltrim": {
						"description": "Removes any leading blanks (or optional other characters) in a character string.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "other_chars",
								"optional": true
							}
						]
					}
				}
			}
		},
		"m": {
			"__index__": {
				"a": {
					"marked": {
						"description": "Returns TRUE if the current record has been marked.",
						"arguments": [
							{
								"name": "tablename",
								"optional": true
							}
						]
					},
					"mask": {
						"description": "Replace spaces in template with characters of string.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "template"
							}
						]
					},
					"max": {
						"description": "Returns the larger of two numbers.",
						"arguments": [
							{
								"name": "number_1"
							},
							{
								"name": "number_2"
							}
						]
					},
					"maximum": {
						"description": "Get the maximum of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					}
				},
				"d": {
					"md5": {
						"description": "Generates an MD5 checksum of the text_to_sum",
						"arguments": [
							{
								"name": "input_to_sum"
							}
						]
					},
					"mdy": {
						"description": "Returns a formatted character string in the 'Month DD, YYYY' format.",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"e": {
					"menu_edit": {
						"description": "Launches the menu editor.",
						"arguments": [
							{
								"name": "menuname"
							},
							{
								"name": "style",
								"optional": true
							}
						]
					},
					"merge_variable_frames": {
						"description": "Merges the variables from one variable frame into another variable frame.",
						"arguments": [
							{
								"name": "dominantframe"
							},
							{
								"name": "otherframe"
							}
						]
					}
				},
				"i": {
					"mid": {
						"description": " Wrapper for VB's Mid() function",
						"arguments": [
							{
								"name": "str"
							},
							{
								"name": "start"
							},
							{
								"name": "length",
								"optional": true
							}
						]
					},
					"min": {
						"description": "Returns the lesser of two numbers.",
						"arguments": [
							{
								"name": "number_1"
							},
							{
								"name": "number_2"
							}
						]
					},
					"minimum": {
						"description": "Get the minumum of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					}
				},
				"o": {
					"mod": {
						"description": "Returns the integer remainder of one number divided by another.",
						"arguments": [
							{
								"name": "numerator"
							},
							{
								"name": "denominator"
							}
						]
					},
					"mongo_createdocument": {
						"description": "Creates a new document in a MongoDB collection. Returns the _id of the new document if success. Else, returns error",
						"arguments": [
							{
								"name": "mongourl_or_connectionstring"
							},
							{
								"name": "databasename"
							},
							{
								"name": "collection"
							},
							{
								"name": "json"
							}
						]
					},
					"mongo_deletedocument": {
						"description": "Deletes a document in a MongoDB collection. ",
						"arguments": [
							{
								"name": "mongourl_or_connectionstring"
							},
							{
								"name": "databasename"
							},
							{
								"name": "collection"
							},
							{
								"name": "id"
							}
						]
					},
					"mongo_getdocument": {
						"description": "Retrieves a document by its id",
						"arguments": [
							{
								"name": "mongourl_or_connectionstring"
							},
							{
								"name": "databasename"
							},
							{
								"name": "collection"
							},
							{
								"name": "id"
							},
							{
								"name": "fields",
								"optional": true
							}
						]
					},
					"mongo_query": {
						"description": "Retrieves a document by its id. Filter and Order can either be Mongo syntax or SQL syntax. If the optional pIn argument is supplied then pIn.count is the count of the number of documents in the query.",
						"arguments": [
							{
								"name": "mongourl_or_connectionstring"
							},
							{
								"name": "databasename"
							},
							{
								"name": "collection"
							},
							{
								"name": "filter",
								"optional": true
							},
							{
								"name": "order",
								"optional": true
							},
							{
								"name": "offset",
								"optional": true
							},
							{
								"name": "limit",
								"optional": true
							},
							{
								"name": "fields",
								"optional": true
							}
						]
					},
					"mongo_updatedocument": {
						"description": "Updates a document in a MongoDB collection",
						"arguments": [
							{
								"name": "mongourl_or_connectionstring"
							},
							{
								"name": "databasename"
							},
							{
								"name": "collection"
							},
							{
								"name": "id"
							},
							{
								"name": "json"
							},
							{
								"name": "mode",
								"optional": true
							}
						]
					},
					"month": {
						"description": "Returns the number of the month in a date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					},
					"month_end": {
						"description": "Computes the date on which a month ends for any given date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					},
					"month_number": {
						"description": "Returns the month number for a given month name",
						"arguments": [
							{
								"name": "month"
							}
						]
					},
					"month_start": {
						"description": "Computes the date on which a month starts for any given date.",
						"arguments": [
							{
								"name": "date"
							}
						]
					},
					"most_recently_used_database_enum": {
						"description": "Return the most recently loaded databases."
					}
				},
				"r": {
					"mrec_eof": {
						"description": "Returns true if object is at end of the group.",
						"arguments": [
							{
								"name": "group",
								"optional": true
							}
						]
					},
					"mrecno": {
						"description": "Returns composite record number when printed."
					},
					"mru_query": {
						"description": "Returns the current or most recently used query for the specified table/set",
						"arguments": [
							{
								"name": "table_set"
							}
						]
					}
				},
				"s": {
					"msgbox": {
						"description": "An alternative to the intrinsic ui_msg_box() function that allows you to specify just a single argument - the message body.",
						"arguments": [
							{
								"name": "title_or_message"
							},
							{
								"name": "message",
								"optional": true
							},
							{
								"name": "box_style",
								"optional": true
							}
						]
					},
					"msxml_classname": {
						"description": "Return the correct MSXML class name based on what is installed in the current operating system",
						"arguments": [
							{
								"name": "object",
								"optional": true
							},
							{
								"name": "freethreaded",
								"optional": true
							}
						]
					}
				}
			}
		},
		"n": {
			"nf_lower": {
				"description": "Returns a string that is lowercased except for the first letter.",
				"arguments": [
					{
						"name": "string"
					}
				]
			},
			"node_request": {
				"description": "Call a node service from Xbasic",
				"arguments": [
					{
						"name": "nodeservice"
					},
					{
						"name": "pdata"
					},
					{
						"name": "flagrestartnode",
						"optional": true
					},
					{
						"name": "flagshowcommandwindow",
						"optional": true
					},
					{
						"name": "flagallowdebug",
						"optional": true
					},
					{
						"name": "opsin",
						"optional": true
					}
				]
			},
			"node_request_result": {
				"description": "Call a node service from Xbasic. Same as node_request() except returned JSON is parsed and .error and .result properties are returned",
				"arguments": [
					{
						"name": "nodeservice"
					},
					{
						"name": "pdata"
					},
					{
						"name": "flagrestartnode",
						"optional": true
					},
					{
						"name": "flagshowcommandwindow",
						"optional": true
					},
					{
						"name": "flagallowdebug",
						"optional": true
					},
					{
						"name": "opsin",
						"optional": true
					}
				]
			},
			"normalize_html": {
				"description": "Adds HTML, HEAD and BODY tags if necessary. Moves <styles> into the head",
				"arguments": [
					{
						"name": "html"
					}
				]
			},
			"now": {
				"description": "Return time as type 'Time'.",
				"arguments": [
					{
						"name": "gmt_time",
						"optional": true
					}
				]
			},
			"nth_dow": {
				"description": "Finds the date for the 'n'th day in a month. e.g. the 4th Thursday for November in 2005",
				"arguments": [
					{
						"name": "dayname"
					},
					{
						"name": "month"
					},
					{
						"name": "year"
					},
					{
						"name": "occurrence"
					}
				]
			},
			"null_value": {
				"description": "Assign a null value to any type."
			},
			"nw_lower": {
				"description": "Returns a string that is lowercased except for the first letter of each word.",
				"arguments": [
					{
						"name": "string"
					}
				]
			}
		},
		"o": {
			"obj": {
				"description": "Resolves an string into the object it names.",
				"arguments": [
					{
						"name": "object_name"
					}
				]
			},
			"object_name_expand": {
				"description": "Expand an object name (in the current database) from <object name> to <object name>@<data dictionary>",
				"arguments": [
					{
						"name": "object_name"
					},
					{
						"name": "object_class"
					}
				]
			},
			"object_name_expand_ext": {
				"description": "Expand an object name (in an external data dictionary) from <object name> to <object name>@<data dictionary>",
				"arguments": [
					{
						"name": "object_name"
					},
					{
						"name": "object_class"
					}
				]
			},
			"object_name_normalize": {
				"description": "Normalize an object name.",
				"arguments": [
					{
						"name": "name"
					}
				]
			},
			"occurs": {
				"description": "Returns the number of times one string is found in another.",
				"arguments": [
					{
						"name": "searchfor"
					},
					{
						"name": "searchin"
					}
				]
			},
			"occurs_words": {
				"description": "Returns the number of times word occurs in string.",
				"arguments": [
					{
						"name": "word"
					},
					{
						"name": "string"
					},
					{
						"name": "delimiter",
						"optional": true
					}
				]
			},
			"occursi": {
				"description": "Returns the number of times one Case Insensitive string is found in another.",
				"arguments": [
					{
						"name": "searchfor"
					},
					{
						"name": "searchin"
					}
				]
			},
			"odbc_dt_to_d": {
				"description": "Converts a character field containing a Date-Time value in format \"YYYY-MM-DD HH:MM:SS.SSS\" to a date field.",
				"arguments": [
					{
						"name": "odbc_datetime"
					}
				]
			},
			"odbc_import_table": {
				"description": "Imports a table from an external ODBC source, or an Access, Excel, or Outlook file, to an Alpha Five table.",
				"arguments": [
					{
						"name": "type"
					},
					{
						"name": "source_filename_or_dsn"
					},
					{
						"name": "table_to_create"
					},
					{
						"name": "sql_statement"
					},
					{
						"name": "password",
						"optional": true
					},
					{
						"name": "user_name",
						"optional": true
					}
				]
			},
			"oem_to_ansi": {
				"description": "Interface to windows oem_to_ansi function",
				"arguments": [
					{
						"name": "string"
					},
					{
						"name": "length"
					}
				]
			},
			"ole_external_methods": {
				"description": "Get external Ole functions based on passed in class.",
				"arguments": [
					{
						"name": "classname"
					}
				]
			},
			"on_application_exit": {
				"description": "Registers code to be executed when Alpha Five is closed",
				"arguments": [
					{
						"name": "code"
					}
				]
			},
			"on_condition": {
				"description": "Run code (once) when condition is met.",
				"arguments": [
					{
						"name": "expression"
					},
					{
						"name": "code"
					}
				]
			},
			"on_database_exit": {
				"description": "Registers code to be executed when the current database is closed",
				"arguments": [
					{
						"name": "code"
					}
				]
			},
			"on_database_init": {
				"description": "Registers code to be executed when an Alpha Five database is opened",
				"arguments": [
					{
						"name": "code"
					}
				]
			},
			"on_xbasic_idle": {
				"description": "Run code next time xbasic is not busy executing - flags R-eapeat suppress,N-ested idles. the supress repeats flag doesn't add the code if the exact same code is already scheduled.",
				"arguments": [
					{
						"name": "code"
					},
					{
						"name": "flags",
						"optional": true
					}
				]
			},
			"operation_startup": {
				"description": "Create a new operation.",
				"arguments": [
					{
						"name": "type_of_operation"
					},
					{
						"name": "table_or_set"
					},
					{
						"name": "use_genie"
					}
				]
			},
			"osname": {
				"description": "The name of the current operating system."
			},
			"osplatform": {
				"description": "The platform of the current operating system."
			},
			"osversion": {
				"description": "The version number of the current operating system."
			}
		},
		"p": {
			"__index__": {
				"a": {
					"padc": {
						"description": "Pads both sides of a string with another string.",
						"arguments": [
							{
								"name": "c"
							},
							{
								"name": "length"
							},
							{
								"name": "pad_string"
							}
						]
					},
					"padl": {
						"description": "Pads the left side of a string with another string.",
						"arguments": [
							{
								"name": "c"
							},
							{
								"name": "length"
							},
							{
								"name": "pad_string"
							}
						]
					},
					"padr": {
						"description": "Pads the right side of a string with another string.",
						"arguments": [
							{
								"name": "c"
							},
							{
								"name": "length"
							},
							{
								"name": "pad_string"
							}
						]
					},
					"page_records_get": {
						"description": "Return a cr-lf delimited list of the records displayed on a page.",
						"arguments": [
							{
								"name": "table",
								"optional": true
							}
						]
					},
					"pagecount": {
						"description": "Returns number of pages in the report.",
						"arguments": [
							{
								"name": "group",
								"optional": true
							}
						]
					},
					"pageno": {
						"description": "Get the page number within a group",
						"arguments": [
							{
								"name": "group",
								"optional": true
							}
						]
					},
					"payment": {
						"description": "Returns the payments for a fixed interest rate loan over a specified integer term.",
						"arguments": [
							{
								"name": "loan_amount"
							},
							{
								"name": "periodic_interest_rate"
							},
							{
								"name": "payment_periods"
							}
						]
					},
					"payment2": {
						"description": "Returns the payments for a fixed interest rate loan over a specified fractional term.",
						"arguments": [
							{
								"name": "loan_amount"
							},
							{
								"name": "periodic_interest_rate"
							},
							{
								"name": "payment_periods"
							}
						]
					}
				},
				"d": {
					"pdf_append": {
						"description": "Append File2 to File1, creating Result_file. If Result_File is blank, then File2 is appended to File1.",
						"arguments": [
							{
								"name": "file1"
							},
							{
								"name": "file2"
							},
							{
								"name": "result_file",
								"optional": true
							}
						]
					},
					"pdf_append_list": {
						"description": "Append files in a list in order, creating ResultFile. ResultFile is required and can not be in the FileList.",
						"arguments": [
							{
								"name": "filelist"
							},
							{
								"name": "resultfile"
							}
						]
					},
					"pdf_encrypt": {
						"description": "Password protect a PDF file. User_password is optional.",
						"arguments": [
							{
								"name": "source_file"
							},
							{
								"name": "result_file"
							},
							{
								"name": "owner_password"
							},
							{
								"name": "user_password"
							},
							{
								"name": "canprint"
							},
							{
								"name": "canmodifydocument"
							},
							{
								"name": "cancopy"
							},
							{
								"name": "canaddnotes"
							},
							{
								"name": "use128bitkey",
								"optional": true
							}
						]
					},
					"pdf_exportexcel": {
						"description": "Converts a PDF file to Excel.",
						"arguments": [
							{
								"name": "pdf_filename"
							},
							{
								"name": "excel_filename"
							}
						]
					},
					"pdf_exporthtml": {
						"description": "Exports a PDF file as a HTML document. HTMLOption choices: 'Layers' - single file with layers, 'Single' - single file, 'Multiple' - multiple files. OptimizationMethod choices are: 'No optimization', 'Line optimization' (Recommended), 'Paragraph optimization' and 'Table optimization'",
						"arguments": [
							{
								"name": "file"
							},
							{
								"name": "result_file"
							},
							{
								"name": "htmloption",
								"optional": true
							},
							{
								"name": "optimizationmethod",
								"optional": true
							}
						]
					},
					"pdf_exportjpg": {
						"description": "Exports a PDF file as a JPG file. Resolution is 'default', 'low', 'medium', 'high'",
						"arguments": [
							{
								"name": "file"
							},
							{
								"name": "result_file"
							},
							{
								"name": "resolution",
								"optional": true
							}
						]
					},
					"pdf_exportrtf": {
						"description": "Exports a PDF file as a RTF document. RTFOption choices: 'Advanced RTF' - Text and Graphics. Use frames to position objects, 'Full RTF' - Text and Graphics. No Frames. 'Formatted Text' - Text only, 'Simple Text' - Unformatted ASCII text. OptimizationMethod choices are: 'No optimization', 'Line optimization' (Recommended), 'Paragraph optimization' and 'Table optimization'. VersionToUse = -1 means use the Amyuni DLLs for current version of A5.",
						"arguments": [
							{
								"name": "file"
							},
							{
								"name": "result_file"
							},
							{
								"name": "rtfoption",
								"optional": true
							},
							{
								"name": "optimizationmethod",
								"optional": true
							},
							{
								"name": "versiontouse",
								"optional": true
							}
						]
					},
					"pdf_fillinfields_get": {
						"description": "Gets the names of the fillin fields in a PDF file. If flagExtendedMode is .t. returns info about each fields.   IMPORTANT: Before you use this function, you must first install third party software from: https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-win-setup.exe",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "flagextendedmode",
								"optional": true
							}
						]
					},
					"pdf_fillinfields_merge": {
						"description": "Merges data into a PDF file that has fillin fields and produces a new PDF file. In data is passed in as a JSON string.   IMPORTANT: Before you use this function, you must first install third party software from: https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-win-setup.exe. pdfFileIn can be a URL for a remote file. pdfFileOut can be set to \"AmazonS3\". The resulting PDF will be uploaded to an S3 bucket.",
						"arguments": [
							{
								"name": "pdffilein"
							},
							{
								"name": "pdffileout"
							},
							{
								"name": "jsondata"
							},
							{
								"name": "storageconnectionstring",
								"optional": true
							},
							{
								"name": "s3objectname",
								"optional": true
							}
						]
					},
					"pdf_frombitmap": {
						"description": "Creates a PDF file from a bitmap. Typically this function is used to create a PDF file that will be used as a Watermark for another PDF file. Returns the name of the PDF file.",
						"arguments": [
							{
								"name": "p"
							}
						]
					},
					"pdf_linearize": {
						"description": "Linearize a PDF document so that it can be viewed one page at a time without the need to completely download the document. If Result_file is null, then the result is stored to the same file as the input file.",
						"arguments": [
							{
								"name": "file"
							},
							{
								"name": "result_file",
								"optional": true
							}
						]
					},
					"pdf_merge": {
						"description": "Merge content of Merge_File with Base_File, creating Result_file. Result_file has same number of pages as Base_file. If Merge_file has fewer pages than Base_File, 'flagMergeAllPages' controls whether Merge_file pages are repeated so that content is merged onto all pages in Base_file. If Result_File is blank, then content is merged with Base_File. Note: The 'logo' or 'watermark' file is the 'Merge_File'. ",
						"arguments": [
							{
								"name": "base_file"
							},
							{
								"name": "merge_file"
							},
							{
								"name": "result_file",
								"optional": true
							},
							{
								"name": "flagmergeallpages",
								"optional": true
							},
							{
								"name": "flagmergefileontop",
								"optional": true
							},
							{
								"name": "flagnested",
								"optional": true
							}
						]
					},
					"pdf_merge_amyuni": {
						"description": "Merge content of Merge_File with Base_File, creating Result_file. Result_file has same number of pages as Base_file. If Merge_file has fewer pages than Base_File, 'flagMergeAllPages' controls whether Merge_file pages are repeated so that content is merged onto all pages in Base_file. If Result_File is blank, then content is merged with Base_File. Note: The 'logo' or 'watermark' file is the 'Merge_File'. ",
						"arguments": [
							{
								"name": "base_file"
							},
							{
								"name": "merge_file"
							},
							{
								"name": "result_file",
								"optional": true
							},
							{
								"name": "flagmergeallpages",
								"optional": true
							},
							{
								"name": "flagmergefileontop",
								"optional": true
							}
						]
					},
					"pdf_optimize": {
						"description": "Optimize a PDF document to make it smaller. If Result_file is null, then the result is stored to the same file as the input file.",
						"arguments": [
							{
								"name": "file"
							},
							{
								"name": "result_file",
								"optional": true
							}
						]
					},
					"pdf_pagecount": {
						"description": "Returns the number of pages in a PDF file.",
						"arguments": [
							{
								"name": "file"
							}
						]
					},
					"pdf_split_pages": {
						"description": "Split pdf document into single file per page.  If Result_file is blank, Source_file name will be used.  Result files will have page number appended to name as 'Result_File_page1.pdf', 'Result_File_page2.pdf', etc",
						"arguments": [
							{
								"name": "source_file"
							},
							{
								"name": "result_file",
								"optional": true
							}
						]
					}
				},
				"h": {
					"phrase_normalize": {
						"description": "Normalize a phrase using replacements and transposition.",
						"arguments": [
							{
								"name": "phrase"
							},
							{
								"name": "rules"
							}
						]
					}
				},
				"i": {
					"ping": {
						"description": "Allows you to ping a network address.",
						"arguments": [
							{
								"name": "target"
							},
							{
								"name": "presult",
								"optional": true
							}
						]
					}
				},
				"l": {
					"play_sound": {
						"description": "Play a sound from a .WAV file.",
						"arguments": [
							{
								"name": "wave"
							},
							{
								"name": "setting",
								"optional": true
							}
						]
					}
				},
				"n": {
					"png_to_bitmap": {
						"description": "Convert a png to a bitmap, optiona channel is default of (C)ombined, (R)gb only, (A)lpha blend only.",
						"arguments": [
							{
								"name": "png_data"
							},
							{
								"name": "channel",
								"optional": true
							}
						]
					}
				},
				"o": {
					"pop_stddev": {
						"description": "Get the population standard deviation of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"pop_variance": {
						"description": "Get the population variance of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"pos_from_word_number": {
						"description": "Returns the starting character position of word_number in string.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "word_number"
							},
							{
								"name": "separator",
								"optional": true
							}
						]
					}
				},
				"r": {
					"__index__": {
						"e": {
							"preprocess_a5w": {
								"description": "Preprocess an A5W page - return the result.",
								"arguments": [
									{
										"name": "code"
									}
								]
							},
							"preprocess_a5w_file": {
								"description": "Preprocess A5W page - output generated A5SCR or JS/MAP files to same location.",
								"arguments": [
									{
										"name": "filename"
									}
								]
							},
							"preview_layout": {
								"description": " Preview a layout",
								"arguments": [
									{
										"name": "name"
									},
									{
										"name": "class"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									}
								]
							},
							"previous": {
								"description": "Returns a value from a field in the previous record.",
								"arguments": [
									{
										"name": "fieldname"
									},
									{
										"name": "tagname",
										"optional": true
									}
								]
							}
						},
						"i": {
							"primaryprocessor": {
								"description": "Get the index of the primary CPU for the process."
							},
							"print_browse": {
								"description": "print a browse",
								"arguments": [
									{
										"name": "browse_name"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_browse_open": {
								"description": "Open a browse for printing.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "layout_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							},
							"print_form": {
								"description": "print a form",
								"arguments": [
									{
										"name": "form_name"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_form_open": {
								"description": "Open a browse for printing.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "layout_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							},
							"print_label": {
								"description": "print a label",
								"arguments": [
									{
										"name": "label_name"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_label_open": {
								"description": "Open a label for printing.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "layout_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							},
							"print_layout": {
								"description": " Print a layout",
								"arguments": [
									{
										"name": "name"
									},
									{
										"name": "class"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_letter": {
								"description": "print a letter",
								"arguments": [
									{
										"name": "letter_name"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_letter_open": {
								"description": "Open a letter for printing.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "layout_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							},
							"print_report": {
								"description": "print a report",
								"arguments": [
									{
										"name": "report_name"
									},
									{
										"name": "filter",
										"optional": true
									},
									{
										"name": "order",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"print_report_open": {
								"description": "Open a report for printing.",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "layout_name"
									},
									{
										"name": "arguments",
										"optional": true
									}
								]
							},
							"printcurrency": {
								"description": "Used in a report to print an international currency symbol. If you print to PDF be sure to set PDF options to allow 'Multilingual support'.",
								"arguments": [
									{
										"name": "number"
									},
									{
										"name": "currencysymbol"
									},
									{
										"name": "decimal_places"
									},
									{
										"name": "thousands_separator",
										"optional": true
									},
									{
										"name": "decimal_separator",
										"optional": true
									},
									{
										"name": "trailingcurrencysymbol",
										"optional": true
									},
									{
										"name": "blankifzero",
										"optional": true
									},
									{
										"name": "cssstyle",
										"optional": true
									}
								]
							},
							"printhtml": {
								"description": "Used in a report to print an international currency symbol. If you print to PDF be sure to set PDF options to allow 'Multilingual support'. Set 'UTF8' = .T. if data contains UTF8 characters",
								"arguments": [
									{
										"name": "htmltext"
									},
									{
										"name": "utf8",
										"optional": true
									}
								]
							}
						},
						"o": {
							"__index__": {
								"c": {
									"process_list": {
										"description": "use WMI to return a list of Windows processes",
										"arguments": [
											{
												"name": "sorted",
												"optional": true
											},
											{
												"name": "delimiter",
												"optional": true
											},
											{
												"name": "computer",
												"optional": true
											}
										]
									}
								},
								"f": {
									"profiler_begin": {
										"description": "Start profiling code after the command."
									},
									"profiler_dump": {
										"description": "Format and write a summary of the profiling data collected.\nIf WriteToFile is false the data is written to a trace window pane.",
										"arguments": [
											{
												"name": "output"
											},
											{
												"name": "writetofile"
											}
										]
									},
									"profiler_end": {
										"description": "End code profiling after the command.",
										"arguments": [
											{
												"name": "outputname",
												"optional": true
											},
											{
												"name": "writetofile",
												"optional": true
											}
										]
									},
									"profiler_format": {
										"description": "Format and return a string with summaries of the profiling data collected so far.",
										"arguments": [
											{
												"name": "htmlformat",
												"optional": true
											}
										]
									},
									"profiler_pause": {
										"description": "Suspend profiling temporarily."
									},
									"profiler_reset": {
										"description": "Clear out the data collected by the profiler so far."
									},
									"profiler_resume": {
										"description": "Continue profiling after pausing."
									}
								},
								"g": {
									"progressauto": {
										"description": "Displays a wait dialog with a repeating progress bar. Execute progressPercent(100) to close."
									},
									"progresspercent": {
										"description": "Sets the percentage of wait dialog. Set pct to 100 to close.",
										"arguments": [
											{
												"name": "pct"
											}
										]
									},
									"progresstimed": {
										"description": "Displays a progress bar for the specified number of seconds.",
										"arguments": [
											{
												"name": "seconds"
											}
										]
									}
								},
								"p": {
									"prop_valid": {
										"description": "Tests whether a dot variable has a specified property",
										"arguments": [
											{
												"name": "dot_variable"
											},
											{
												"name": "property"
											},
											{
												"name": "recursive",
												"optional": true
											}
										]
									},
									"properties_enum": {
										"description": "Returns CR-LF serarated property list.",
										"arguments": [
											{
												"name": "variables"
											},
											{
												"name": "variable_enum_flags",
												"optional": true
											},
											{
												"name": "typemap",
												"optional": true
											}
										]
									},
									"property_from_blob": {
										"description": "Property read from blob data that was orginally created with PROPERTY_TO_BLOB()",
										"arguments": [
											{
												"name": "destination"
											},
											{
												"name": "source"
											}
										]
									},
									"property_from_blob_const": {
										"description": "Creates a readonly property from blob - used to store read-only definitions.",
										"arguments": [
											{
												"name": "source"
											}
										]
									},
									"property_from_json": {
										"description": "Populate a variable or property from JSON.",
										"arguments": [
											{
												"name": "prop"
											},
											{
												"name": "jsontext"
											},
											{
												"name": "stringize_fields",
												"optional": true
											}
										]
									},
									"property_from_string": {
										"description": "Recover previously dumped contents back into a pointer, format allows for optional user spec.",
										"arguments": [
											{
												"name": "destination"
											},
											{
												"name": "source"
											},
											{
												"name": "format",
												"optional": true
											}
										]
									},
									"property_from_string_multi": {
										"description": "Apply previously dumped contents back into sub fields (specified in a list).",
										"arguments": [
											{
												"name": "destination"
											},
											{
												"name": "source"
											},
											{
												"name": "subproperties_list"
											},
											{
												"name": "format",
												"optional": true
											}
										]
									},
									"property_from_url": {
										"description": "Populate a variable or property from a url.",
										"arguments": [
											{
												"name": "prop"
											},
											{
												"name": "urltext"
											}
										]
									},
									"property_recurse_assign": {
										"description": "Recursive property assignment (for propagating properties instead of referencing them).",
										"arguments": [
											{
												"name": "destination"
											},
											{
												"name": "source"
											}
										]
									},
									"property_string_to_json": {
										"description": "Convert alpha anywhere legacy property_to_string format to json",
										"arguments": [
											{
												"name": "str"
											}
										]
									},
									"property_to_blob": {
										"description": "Dump pointer contents (can be variable frame) to a blob - optional limit to 'fields'.",
										"arguments": [
											{
												"name": "source"
											},
											{
												"name": "fields",
												"optional": true
											}
										]
									},
									"property_to_json": {
										"description": "Dump a property variable or object to JSON, optionally convert fields listed in comma separate Un_Stringfy_fields into embedded JSON if they are valid json strings.",
										"arguments": [
											{
												"name": "prop"
											},
											{
												"name": "changesonly",
												"optional": true
											},
											{
												"name": "un_stringfy_fields",
												"optional": true
											}
										]
									},
									"property_to_string": {
										"description": "Dump pointer contents (can be variable frame) to a string - (impose optional limit on length of leaf data).",
										"arguments": [
											{
												"name": "source"
											},
											{
												"name": "limit",
												"optional": true
											}
										]
									},
									"property_to_url": {
										"description": "Dump a property variable or object to url parameters - current option  of 'S' for sorted (normalized) arguments.",
										"arguments": [
											{
												"name": "prop"
											},
											{
												"name": "options",
												"optional": true
											}
										]
									},
									"propertyfromquerystring": {
										"description": "Converts a query string to a dot variable. Example: name=Jim&city=Boston&age=23",
										"arguments": [
											{
												"name": "property"
											},
											{
												"name": "string"
											}
										]
									}
								}
							}
						}
					}
				},
				"u": {
					"pusher_sendmessage": {
						"description": "Send a message using the Pusher service library",
						"arguments": [
							{
								"name": "appid"
							},
							{
								"name": "key"
							},
							{
								"name": "secret"
							},
							{
								"name": "cluster"
							},
							{
								"name": "channel"
							},
							{
								"name": "message"
							},
							{
								"name": "eventname",
								"optional": true
							},
							{
								"name": "componentconfigjson",
								"optional": true
							}
						]
					}
				},
				"v": {
					"pv": {
						"description": "Returns the present value of a stream of periodic investments over a specified integer term.",
						"arguments": [
							{
								"name": "periodic_investment"
							},
							{
								"name": "periodic_interest_rate"
							},
							{
								"name": "time_periods"
							}
						]
					},
					"pv2": {
						"description": "Returns the present value of a stream of periodic investments over a specified fractional term.",
						"arguments": [
							{
								"name": "periodic_investment"
							},
							{
								"name": "periodic_interest_rate"
							},
							{
								"name": "time_periods"
							}
						]
					}
				}
			}
		},
		"q": {
			"qrcode_bitmap": {
				"description": "Generates a qrcode image. Return either binary PNG data or base64 encoded string with 'data:image/png;base64,' prefix",
				"arguments": [
					{
						"name": "text"
					},
					{
						"name": "flag",
						"optional": true
					},
					{
						"name": "width",
						"optional": true
					},
					{
						"name": "height",
						"optional": true
					},
					{
						"name": "flagbase64encodedwithprefix",
						"optional": true
					}
				]
			},
			"query_filter_get": {
				"description": "Extracts the filter expression from a saved query.",
				"arguments": [
					{
						"name": "query_name"
					}
				]
			},
			"query_load": {
				"description": "Load settings from a saved query.",
				"arguments": [
					{
						"name": "query_name"
					},
					{
						"name": "settings"
					}
				]
			},
			"query_order_get": {
				"description": "Extracts the order expression from a saved query.",
				"arguments": [
					{
						"name": "query_name"
					}
				]
			},
			"query_save": {
				"description": "Save settings into a saved query.",
				"arguments": [
					{
						"name": "query_name"
					},
					{
						"name": "settings"
					}
				]
			},
			"quote": {
				"description": "Returns the quoted value - useful for expressions generating other expressions.",
				"arguments": [
					{
						"name": "string"
					},
					{
						"name": "quotechar",
						"optional": true
					}
				]
			}
		},
		"r": {
			"__index__": {
				"a": {
					"rand": {
						"description": "Returns a random number between 0 and 1."
					},
					"rand_string": {
						"description": "Returns a random character string of Length characters.",
						"arguments": [
							{
								"name": "length"
							}
						]
					},
					"rat": {
						"description": "Returns the position of one string found in another, relative from the end of the string.",
						"arguments": [
							{
								"name": "substring"
							},
							{
								"name": "string"
							},
							{
								"name": "occurance",
								"optional": true
							}
						]
					},
					"rat_u": {
						"description": "Returns the position of one string found in another, relative from the end of the string, honors UTF8 encoding.",
						"arguments": [
							{
								"name": "substring"
							},
							{
								"name": "string"
							},
							{
								"name": "occurance",
								"optional": true
							}
						]
					},
					"raw_key_value": {
						"description": "For index keys, don't do any translation of characters.",
						"arguments": [
							{
								"name": "key_value"
							}
						]
					}
				},
				"e": {
					"__index__": {
						"c": {
							"reccount": {
								"description": "Returns the number of records in the current table.",
								"arguments": [
									{
										"name": "tablename",
										"optional": true
									}
								]
							},
							"recdeleted": {
								"description": "Returns the number of deleted records in the current table.",
								"arguments": [
									{
										"name": "tablename",
										"optional": true
									}
								]
							},
							"recno": {
								"description": "Returns the record number of the current record.",
								"arguments": [
									{
										"name": "tablename",
										"optional": true
									}
								]
							},
							"record_add": {
								"description": "Adds a new record to a table. Data is CRLF delimited list. Style 1 - data is fieldname=fieldvalue pairs, Style 2 data is just fieldvalues in same order as fieldnames",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "data"
									},
									{
										"name": "style",
										"optional": true
									}
								]
							},
							"record_delete": {
								"description": "Deletes one or more record(s) in a table that match the filter condition",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "filter"
									}
								]
							},
							"record_update": {
								"description": "Updates a record in a table. Data is CRLF delimited list. Style 1 - data is fieldname=fieldvalue pairs, Style 2 data is just fieldvalues in same order as fieldnames",
								"arguments": [
									{
										"name": "tablename"
									},
									{
										"name": "filter"
									},
									{
										"name": "data"
									},
									{
										"name": "style",
										"optional": true
									}
								]
							},
							"recsize": {
								"description": "Returns the number of characters reserved for each record.",
								"arguments": [
									{
										"name": "tablename",
										"optional": true
									}
								]
							}
						},
						"g": {
							"regex_escape": {
								"description": "Escapes characters that have special meaning in Regular Expressions",
								"arguments": [
									{
										"name": "text"
									}
								]
							},
							"regex_grep": {
								"description": "Performs a regex grep on text. format takes \\0 for all text \\N for tagged expression. options same as regex_match with additional options:\n\tN  No copy of unmatched text.\n\tF  Only process first match.\nAdditional format options:\n\t$(OFFSET) - Return the offset of the match.\n\t$(LENGTH) - Return the length of the match.\n\t$(END) - Return the ending offset of the match.\n\t$(LINE) - Return the line the match started on.\n\t$(ENDLINE) - Return the line the match ended on.\n\t$(LINES) - Return the number of lines the match crosses.\n\t$(LINETEXT) - Return the complete line(s) of text the match(es) occurred on.\n\t$(LINEOFFSET) - Return the offset of the beggining of the match line.\n\t$(ENDLINEOFFSET) - Return the offset of the end of the line the match ended on.\n\t$(COUNT) - Return the number of matches encountered so far.\n\t$(NEXTLINE) - Advance the search pointer to the next line.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regexp"
									},
									{
										"name": "format"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_legacy_template_convert": {
								"description": "Convert old A5 style templates to regular expressions.",
								"arguments": [
									{
										"name": "mask"
									},
									{
										"name": "templatex",
										"optional": true
									},
									{
										"name": "mask_placeholder",
										"optional": true
									}
								]
							},
							"regex_literal_extract": {
								"description": "Extract the literal characters from a decorated string.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regex"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_literal_insert": {
								"description": "Insert the literal characters into an undecorated string.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regex"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_literal_mask_get": {
								"description": "Get the literal characters from a regular expression - puts in optional placeholder for characters.",
								"arguments": [
									{
										"name": "regex"
									},
									{
										"name": "placeholder",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_match": {
								"description": "Return TRUE if regular expression tags match.\n\tI  Ignore case\n\tE  follows Emacs conventions\n\tA  follows Awk conventions\n\tG  follows Grep conventions\n\tEG follows Egrep conventions\n\tS  follows Sed conventions\n\tX  Extended (similar to Awk but no need to escape '\\' inside of [])",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regexp"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_match_length": {
								"description": "Return the number of characters that match the pattern.\n",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regexp"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_merge": {
								"description": "Performs a regex merge on text. options same as regex_match with additional options:\n\tN  No copy of unmatched text.\n\tF  Only process first match.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regexp"
									},
									{
										"name": "format"
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_split": {
								"description": "Extract regular expression tags. options same as regex_match.",
								"arguments": [
									{
										"name": "text"
									},
									{
										"name": "regexp"
									},
									{
										"name": "format",
										"optional": true
									},
									{
										"name": "options",
										"optional": true
									}
								]
							},
							"regex_valid": {
								"description": "Return TRUE if RegEx is a valid regular expression.",
								"arguments": [
									{
										"name": "regex"
									}
								]
							},
							"region_from_areacode": {
								"description": "Returns the region for the specified telephone area code as defined by the North American Numbering Plan Administration (https://www.nanpa.com/).",
								"arguments": [
									{
										"name": "areacode"
									}
								]
							}
						},
						"l": {
							"related_fields_to_lookup_expression": {
								"description": "Returns the lookup expression that is equivalent to the set-based expression passed in.",
								"arguments": [
									{
										"name": "expression"
									},
									{
										"name": "tablename",
										"optional": true
									}
								]
							}
						},
						"m": {
							"remove_blank_lines": {
								"description": "Removes blank lines from the string.",
								"arguments": [
									{
										"name": "source"
									}
								]
							},
							"remove_last_word": {
								"description": "removes words from the end of a string",
								"arguments": [
									{
										"name": "words"
									},
									{
										"name": "delim",
										"optional": true
									},
									{
										"name": "count",
										"optional": true
									}
								]
							},
							"remspecial": {
								"description": "Strips all non-alphabetic and non-numeric characters and spaces from a string.",
								"arguments": [
									{
										"name": "c"
									}
								]
							}
						},
						"p": {
							"replace_arguments_in_string": {
								"description": "Takes a string that contains SQL::Arguments in it and replaces the arguments with actual values. If mode = 2, then Date and Time fields use SQL Date syntax (e.g. {2011-09-11 12:23 pm}. mode = 3 uses single quotes for character arguments and a string for dates.",
								"arguments": [
									{
										"name": "filter"
									},
									{
										"name": "argsin"
									},
									{
										"name": "mode",
										"optional": true
									}
								]
							},
							"replace_parameters": {
								"description": "Replaces the parameters in an expression. Set 'vars' to local_variables()",
								"arguments": [
									{
										"name": "input_expression"
									},
									{
										"name": "vars"
									}
								]
							},
							"replace_placeholders_with_argument_values": {
								"description": "Replaces placeholders (enclosed in curly parens, e.g. {arg1}, {arg2}) in a string with values in a SQL::Arguments object.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "args"
									},
									{
										"name": "flagcorrectbackticks",
										"optional": true
									}
								]
							},
							"replace_variables_in_string": {
								"description": "Replaces variables in a string with their actual values. If expression_mode = .t. then creates valid Xbasic expression. E.g. mydate = {12/12/2005}",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "var_pointer"
									},
									{
										"name": "var_prefix"
									},
									{
										"name": "expression_mode",
										"optional": true
									},
									{
										"name": "flagsqlsyntaxforexpressionmode",
										"optional": true
									},
									{
										"name": "flagnested",
										"optional": true
									}
								]
							},
							"replicate": {
								"description": "Duplicates a character a specified number of times.",
								"arguments": [
									{
										"name": "substring"
									},
									{
										"name": "repeat_value"
									}
								]
							},
							"report_datasource_to_json": {
								"description": "Convert alpha anywhere report legacy datasource format to json",
								"arguments": [
									{
										"name": "str"
									}
								]
							}
						},
						"q": {
							"require": {
								"description": "Used in a web application to load an Xbasic Module so that functions defined in the module can be called. You can pass in an optional seachPath. By default, the searchPath includes [exepath]\\xbasic_modules",
								"arguments": [
									{
										"name": "modulename"
									},
									{
										"name": "searchpath",
										"optional": true
									},
									{
										"name": "type",
										"optional": true
									}
								]
							}
						},
						"s": {
							"resolve_mapped_drive": {
								"description": "Resolved the actuall path for a mapped drive",
								"arguments": [
									{
										"name": "driveletter"
									}
								]
							},
							"resolve_mime_type": {
								"description": " Returns a properly formatted and legal mime type suitable for use in a page header or response header",
								"arguments": [
									{
										"name": "file_extension"
									}
								]
							},
							"restore_database": {
								"description": "Display the Restore Database dialog box"
							}
						},
						"v": {
							"reversearray": {
								"description": "Reverse the items in an array",
								"arguments": [
									{
										"name": "p"
									}
								]
							}
						}
					}
				},
				"i": {
					"right": {
						"description": "Returns a portion of a string starting with the rightmost character.",
						"arguments": [
							{
								"name": "c"
							},
							{
								"name": "number_of_characters"
							}
						]
					},
					"right_u": {
						"description": "Returns a portion of a string starting with the rightmost character, honoring UTF8 encoding.",
						"arguments": [
							{
								"name": "c"
							},
							{
								"name": "number_of_characters"
							}
						]
					}
				},
				"o": {
					"round": {
						"description": "Rounds off a number to a specified number of decimal places.",
						"arguments": [
							{
								"name": "number"
							},
							{
								"name": "decimal_places"
							}
						]
					},
					"round_down": {
						"description": "Rounds a number down to the specified number of decimal places",
						"arguments": [
							{
								"name": "number"
							},
							{
								"name": "decimal_places",
								"optional": true
							}
						]
					},
					"round_up": {
						"description": "Rounds a decimal number up to the specified number of decimal places.",
						"arguments": [
							{
								"name": "number"
							},
							{
								"name": "decimal_places"
							}
						]
					}
				},
				"s": {
					"rsa_hash": {
						"description": "Generates an RSA digital signature of the data using the key and SHA1, or any other signing method supported by the .NET Framework",
						"arguments": [
							{
								"name": "data"
							},
							{
								"name": "key"
							},
							{
								"name": "algorithm",
								"optional": true
							}
						]
					}
				},
				"t": {
					"rtfmemo_openeditor": {
						"description": "For use on a Form Layout. Opens the RTF Memo editor for the specified object. objName must be bound to a RTF Memo field.",
						"arguments": [
							{
								"name": "objname"
							}
						]
					},
					"rtod": {
						"description": "Converts an angle expressed in radians to an angle expressed in degrees.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					},
					"rtrim": {
						"description": "Remove trailing blanks (or optional other characters) from a character string.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "other_chars",
								"optional": true
							}
						]
					},
					"rtrim_count": {
						"description": "Removes the specified number of occurrences of string from the end of inputText",
						"arguments": [
							{
								"name": "inputtext"
							},
							{
								"name": "string"
							},
							{
								"name": "count"
							}
						]
					}
				},
				"u": {
					"run": {
						"description": "Runs an application.\n\nTimeOut\n 0 = Don't Wait\n-1 = INFINITE\n Any positive integer will wait that number of milliseconds.\n\nTerminateOnTimeOut - if true, safely terminates the process.",
						"arguments": [
							{
								"name": "commandline"
							},
							{
								"name": "showwindow",
								"optional": true
							},
							{
								"name": "timeoutinmilliseconds",
								"optional": true
							},
							{
								"name": "terminateontimeout",
								"optional": true
							}
						]
					},
					"run_average": {
						"description": "Get the running average of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_count": {
						"description": "Get the running count of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_maximum": {
						"description": "Get the running maximum of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_minimum": {
						"description": "Get the running minimum of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_stddev": {
						"description": "Get the running standard deviation of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_total": {
						"description": "Get the running total of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"run_variance": {
						"description": "Get the running variance of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"runasadministrator": {
						"description": "Runs an application with elevated privileges.\n\nShowOptions\n 0 = Hide\t\t\t\t\t\t- Hides the window and activates another window.\n 1 = ShowNormal\t\t\t\t\t- Activates and displays the window.\n 2 = ShowMinimized\t\t\t\t- Activates the window and displays it as a minimized window.\n 3 = ShowMaximized\t\t\t\t- Activates the window and displays it as a maximized window\n 4 = ShowNoActivate\t\t\t\t- Display the window in its most recent size and position.  The active window remains active.\n 5 = Show\t\t\t\t\t\t- Activates the window and displays in its current size and position.\n 6 = Minimize\t\t\t\t\t- Minimizes the window and activates the next top-level window in the z-order.\n 7 = ShowMinimizedNoActiveate\t- Displays the window as a minimized window.  The active Window remains active.\n 8 = ShowNA\t\t\t\t\t\t- Display the window in its current state.  The active window remains active.\n 9 = Restore\t\t\t\t\t\t- Activates and restores the window.\n10 = ShowDefault\t\t\t\t\t- Show with default behavior.\n\nTimeOut\n 0 = Don't Wait\n-1 = INFINITE\n Any positive integer will",
						"arguments": [
							{
								"name": "executable"
							},
							{
								"name": "parameters",
								"optional": true
							},
							{
								"name": "directory",
								"optional": true
							},
							{
								"name": "showoptions",
								"optional": true
							},
							{
								"name": "timeoutinmilliseconds",
								"optional": true
							}
						]
					}
				}
			}
		},
		"s": {
			"__index__": {
				"_": {
					"s_quote": {
						"description": "Special quote. Quotes char values, makes logical values into \".T.\" or \".F.\", puts date values in curly braces.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "uselongstring",
								"optional": true
							},
							{
								"name": "longstringdelimiter",
								"optional": true
							}
						]
					}
				},
				"a": {
					"salesforceapirequest": {
						"description": "Make a REST API request to the Salesforce API",
						"arguments": [
							{
								"name": "namedresource"
							},
							{
								"name": "endpoint",
								"optional": true
							},
							{
								"name": "query",
								"optional": true
							},
							{
								"name": "apiversion",
								"optional": true
							},
							{
								"name": "verb",
								"optional": true
							},
							{
								"name": "body",
								"optional": true
							},
							{
								"name": "accesstoken",
								"optional": true
							},
							{
								"name": "refreshtoken",
								"optional": true
							},
							{
								"name": "resourceurl",
								"optional": true
							}
						]
					},
					"save_to_file": {
						"description": "Save a string to a file",
						"arguments": [
							{
								"name": "data"
							},
							{
								"name": "filename"
							},
							{
								"name": "append",
								"optional": true
							},
							{
								"name": "silent",
								"optional": true
							}
						]
					},
					"savestringtofile": {
						"description": " Save a string to a file.  Return a callresult",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "string"
							},
							{
								"name": "append",
								"optional": true
							},
							{
								"name": "silent",
								"optional": true
							}
						]
					},
					"savetoapplicationdatafile": {
						"description": " Save a file to the application data folder.  Used for settings that don't go in the registry.",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "string"
							},
							{
								"name": "append",
								"optional": true
							},
							{
								"name": "silent",
								"optional": true
							}
						]
					}
				},
				"c": {
					"scanning": {
						"description": "Returns TRUE if the supplied child table is being fetched through.",
						"arguments": [
							{
								"name": "tablename"
							}
						]
					},
					"scantime": {
						"description": "Converts time string to time - uses format to parse the time - optional third parameter is old time to get non-specified values from.",
						"arguments": [
							{
								"name": "time_str"
							},
							{
								"name": "format"
							},
							{
								"name": "oldtime",
								"optional": true
							}
						]
					},
					"script_drop": {
						"description": "Drop a script (must include password if dropping a protected script).",
						"arguments": [
							{
								"name": "script_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"script_exists": {
						"description": "Return True if the script exists.",
						"arguments": [
							{
								"name": "script_name"
							}
						]
					},
					"script_load": {
						"description": "Return script contents (optional password can be used to load protected scripts).",
						"arguments": [
							{
								"name": "script_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"script_load_compiled": {
						"description": "Load the compiled form of a script into memory.",
						"arguments": [
							{
								"name": "script_name"
							}
						]
					},
					"script_play": {
						"description": "Returns TRUE if script was played.",
						"arguments": [
							{
								"name": "script_name"
							}
						]
					},
					"script_play_local": {
						"description": "Returns TRUE if script was played.",
						"arguments": [
							{
								"name": "script_name"
							}
						]
					},
					"script_rename": {
						"description": "Rename a script (must include password if renaming a protected script).",
						"arguments": [
							{
								"name": "script_name"
							},
							{
								"name": "new_name"
							},
							{
								"name": "password",
								"optional": true
							},
							{
								"name": "annotate",
								"optional": true
							}
						]
					},
					"script_save": {
						"description": "Save a script (must include password if saving over a protected script).",
						"arguments": [
							{
								"name": "script_name"
							},
							{
								"name": "script_code"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"script_schedule": {
						"description": "Schedule a script for playback at a specific time.",
						"arguments": [
							{
								"name": "script"
							},
							{
								"name": "time"
							},
							{
								"name": "slot",
								"optional": true
							}
						]
					},
					"script_schedule_name_get": {
						"description": "Return the scripts name (if one is scheduled for the slot).",
						"arguments": [
							{
								"name": "slot"
							}
						]
					},
					"script_schedule_time_get": {
						"description": "Return the scripts time (if one is scheduled for the slot).",
						"arguments": [
							{
								"name": "slot"
							}
						]
					},
					"script_spawn": {
						"description": "Runs a script in a new session.",
						"arguments": [
							{
								"name": "script_name"
							}
						]
					},
					"scripteditor_open": {
						"description": "Opens the multi-pane script editor.",
						"arguments": [
							{
								"name": "scriptname"
							},
							{
								"name": "type",
								"optional": true
							},
							{
								"name": "action_script_prompt",
								"optional": true
							},
							{
								"name": "forcereloadofopencleanscript",
								"optional": true
							}
						]
					}
				},
				"e": {
					"searchtables": {
						"description": "Allows you to search for a value in all tables."
					},
					"security_enable": {
						"description": "Turn on security.",
						"arguments": [
							{
								"name": "enabled"
							}
						]
					},
					"security_enabled": {
						"description": "Returns true if security is enabled ."
					},
					"security_execution_level": {
						"description": "Set the level at which security is implemented (SYSTEM/APPLICATION).",
						"arguments": [
							{
								"name": "level"
							}
						]
					},
					"security_expression_set": {
						"description": "Set the system security expression.",
						"arguments": [
							{
								"name": "expression"
							}
						]
					},
					"security_variables": {
						"description": "Get pointer to the system security variables."
					},
					"selectbestprocessor": {
						"description": "Select the most appropriate CPU (on a multi-processor system) for the process."
					},
					"selectlist": {
						"description": "Selects value from list of parameters based on index (1 for first value,2 for second etc). Values can be mixed types, a NIL is returned if none match.",
						"arguments": [
							{
								"name": "index"
							},
							{
								"name": "value_1"
							},
							{
								"name": "value",
								"optional": true
							}
						]
					},
					"session_enum": {
						"description": "Get List of open session numbers - optional format flags are N-session number, C-creator, D-primary data source, L-links to session,S-session status."
					},
					"session_get": {
						"description": "Get a session handle , current or session with window name.",
						"arguments": [
							{
								"name": "windowname",
								"optional": true
							}
						]
					},
					"session_variables": {
						"description": "Gets a sessions variable frame.",
						"arguments": [
							{
								"name": "session",
								"optional": true
							}
						]
					},
					"setprimaryprocessor": {
						"description": "Set the index of the primary CPU for the process.",
						"arguments": [
							{
								"name": "cpuindex"
							}
						]
					}
				},
				"h": {
					"sha512": {
						"description": "Create a hash using the SHA512 algorithm",
						"arguments": [
							{
								"name": "text"
							},
							{
								"name": "flagbinary",
								"optional": true
							}
						]
					},
					"shellexplorer_url": {
						"description": "Converts as URL from ACP to UTF8 if the code page for the current thread is UTF8",
						"arguments": [
							{
								"name": "url"
							}
						]
					},
					"shorttime_extract": {
						"description": "Extracts hours, minutes, or seconds from a Short time value. TimePart is 'h', 'm', or 's'",
						"arguments": [
							{
								"name": "shorttime"
							},
							{
								"name": "timepart"
							}
						]
					},
					"showdiff": {
						"description": "Display diff between two files",
						"arguments": [
							{
								"name": "text1"
							},
							{
								"name": "text2"
							},
							{
								"name": "dlg_title",
								"optional": true
							}
						]
					},
					"showprocessorassignments": {
						"description": "Show which CPU is assigned as the primary CPU for each running Alpha Anywhere process."
					},
					"showresultset": {
						"description": "Quick preview of records in an AlphaDAO resultset. (Shows a max of 100 records).",
						"arguments": [
							{
								"name": "rs"
							}
						]
					},
					"showvar": {
						"description": "Display the contents of a variable",
						"arguments": [
							{
								"name": "variable"
							},
							{
								"name": "title",
								"optional": true
							},
							{
								"name": "directive",
								"optional": true
							},
							{
								"name": "monacotype",
								"optional": true
							}
						]
					},
					"showvarcompare": {
						"description": "Compare two variables in side-by-side windows",
						"arguments": [
							{
								"name": "txt1"
							},
							{
								"name": "txt2"
							},
							{
								"name": "title1",
								"optional": true
							},
							{
								"name": "title2",
								"optional": true
							},
							{
								"name": "lefthandpanewidth",
								"optional": true
							}
						]
					},
					"showvarhtml": {
						"description": "Display the contents of a string that contains HTML. The HTML is formatted for readability.",
						"arguments": [
							{
								"name": "variable"
							},
							{
								"name": "title",
								"optional": true
							}
						]
					},
					"showvarjson": {
						"description": "Displays a JSON string. JSON is formatted before display",
						"arguments": [
							{
								"name": "json"
							},
							{
								"name": "title",
								"optional": true
							},
							{
								"name": "flagusemonaco",
								"optional": true
							}
						]
					},
					"showvarscript": {
						"description": "Show the contents of a dot variable as an Xbasic script.",
						"arguments": [
							{
								"name": "var"
							},
							{
								"name": "title",
								"optional": true
							},
							{
								"name": "flags",
								"optional": true
							}
						]
					},
					"showxml": {
						"description": "Show an XML document and parse into an Xbasic dot variable.",
						"arguments": [
							{
								"name": "xml"
							},
							{
								"name": "flagparseelementsandattributes",
								"optional": true
							}
						]
					}
				},
				"i": {
					"sign": {
						"description": "Returns 1 if a number is positive, 0 if it is zero and -1 if it is negative.",
						"arguments": [
							{
								"name": "number"
							}
						]
					},
					"sin": {
						"description": "Returns the sine of an angle expressed in radians.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					}
				},
				"l": {
					"sleep": {
						"description": "Sleep for specified number of seconds.",
						"arguments": [
							{
								"name": "seconds"
							}
						]
					}
				},
				"m": {
					"smatch": {
						"description": "Returns TRUE if the string matches the pattern (which can include wildcards).",
						"arguments": [
							{
								"name": "string_1"
							},
							{
								"name": "pattern"
							}
						]
					},
					"smatch_memo": {
						"description": "Returns TRUE if the specified pattern is found in the entire memo.",
						"arguments": [
							{
								"name": "memofield"
							},
							{
								"name": "pattern"
							}
						]
					},
					"smatch_to": {
						"description": "Returns the matched portion of a string.",
						"arguments": [
							{
								"name": "string_1"
							},
							{
								"name": "pattern"
							}
						]
					},
					"smatch_to_regex": {
						"description": "Converts a smatch pattern into an equivalent regex expression.",
						"arguments": [
							{
								"name": "pattern"
							}
						]
					}
				},
				"o": {
					"socketreadafterwrite": {
						"description": " Do a read after a write.  Data is the data to write, buffer is the read buffer",
						"arguments": [
							{
								"name": "s"
							},
							{
								"name": "data"
							},
							{
								"name": "buffer"
							},
							{
								"name": "timeout",
								"optional": true
							}
						]
					},
					"socketreadafterwritewithcheck": {
						"description": " Do a read after a write and check that RequireResponse is in the read text. Data is the data to write, buffer is the read buffer",
						"arguments": [
							{
								"name": "s"
							},
							{
								"name": "data"
							},
							{
								"name": "buffer"
							},
							{
								"name": "requiredresponse"
							},
							{
								"name": "timeout",
								"optional": true
							}
						]
					},
					"sockets_writewithstatus": {
						"description": " Write to a socket and show a progress meter.",
						"arguments": [
							{
								"name": "s"
							},
							{
								"name": "data"
							},
							{
								"name": "nchunksize",
								"optional": true
							}
						]
					},
					"sort_array": {
						"description": "Sort the elements of an array.",
						"arguments": [
							{
								"name": "array_name"
							},
							{
								"name": "sort_options",
								"optional": true
							}
						]
					},
					"sortlist_on_referencelist": {
						"description": "Sorts a CRLF delimited list so that the entries are in the same order as the entries in a reference list",
						"arguments": [
							{
								"name": "list"
							},
							{
								"name": "reference_list"
							}
						]
					},
					"sortstring_by_length": {
						"description": "Sort a CRLF delimited string from shortest entries to longest entries",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "direction",
								"optional": true
							}
						]
					},
					"sortsubstr": {
						"description": "Returns a string of sorted tokens from a character string - token type 'N'-numeric 'X'-length.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "delimiter"
							},
							{
								"name": "direction",
								"optional": true
							},
							{
								"name": "token",
								"optional": true
							}
						]
					},
					"soundex": {
						"description": "Returns the soundex value of a string.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"p": {
					"space": {
						"description": "Returns a character string containing a specified number of spaces.",
						"arguments": [
							{
								"name": "number_of_spaces"
							}
						]
					},
					"split": {
						"description": "Takes delimited string and populates an array with.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "delimiter"
							},
							{
								"name": "array"
							}
						]
					}
				},
				"q": {
					"__index__": {
						"l": {
							"__index__": {
								"_": {
									"__index__": {
										"a": {
											"sql_argumentsdialog": {
												"description": " Edit the primary key columns for a SQL table definition.",
												"arguments": [
													{
														"name": "originalvalues",
														"optional": true
													}
												]
											},
											"sql_avg": {
												"description": "Returns the avg of 'expression' for a SQL table.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "table"
													},
													{
														"name": "expression"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											}
										},
										"c": {
											"sql_cacheapplyupdates": {
												"description": " Send cache changes to the backend SQL database.",
												"arguments": [
													{
														"name": "inst"
													}
												]
											},
											"sql_cacheevents": {
												"description": " Define and assign the SQL cache event script.",
												"arguments": [
													{
														"name": "inst"
													}
												]
											},
											"sql_cachefetchpage": {
												"description": " Fetch a block of data rows into the cache from the SQL database result set.",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "rowtofetch"
													}
												]
											},
											"sql_cachefetchpageeventscript": {
												"description": " Get the script for Events related to the ResultSet::FetchPage function.",
												"arguments": [
													{
														"name": "inst"
													}
												]
											},
											"sql_cacheopen": {
												"description": " Open a local cache for a table linked to a SQL databases.",
												"arguments": [
													{
														"name": "localfilename"
													},
													{
														"name": "mode"
													},
													{
														"name": "inst"
													},
													{
														"name": "tablealias"
													},
													{
														"name": "informationalmode"
													},
													{
														"name": "childinset"
													},
													{
														"name": "delayinitialfetch"
													},
													{
														"name": "argumentvalues"
													},
													{
														"name": "parentequation"
													},
													{
														"name": "childequation"
													}
												]
											},
											"sql_cacherefresh": {
												"description": " Refresh the whole cache.",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "args"
													},
													{
														"name": "zaptable",
														"optional": true
													},
													{
														"name": "flagkeeplimit",
														"optional": true
													}
												]
											},
											"sql_cacherefreshinsertedrow": {
												"description": " Refresh a single row in the cache.",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "row"
													},
													{
														"name": "identitycolumnname"
													},
													{
														"name": "identitydata"
													}
												]
											},
											"sql_cacherefreshrow": {
												"description": " Refresh a single row in the cache.",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "row"
													},
													{
														"name": "args"
													}
												]
											},
											"sql_childrelationsadded": {
												"description": " Initialization of Optimize set navigation by doing prefresh from the parent level.",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "tbl"
													},
													{
														"name": "setname"
													}
												]
											},
											"sql_childrelationsclear": {
												"description": " Clear all the child tables we manage (called when the parent is cleared due to a requery)",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "tbl"
													}
												]
											},
											"sql_childrelationspopulate": {
												"description": " Populate child tables of set",
												"arguments": [
													{
														"name": "inst"
													},
													{
														"name": "tbl"
													}
												]
											},
											"sql_count": {
												"description": "Returns the count of 'expression' for a SQL table.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "table"
													},
													{
														"name": "expression"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											}
										},
										"d": {
											"sql_date": {
												"description": "Takes a date or time value and returns a character date or date-time string using the format for Alpha Portable SQL - {yyyy-mm-dd}",
												"arguments": [
													{
														"name": "date"
													},
													{
														"name": "option",
														"optional": true
													},
													{
														"name": "option2",
														"optional": true
													}
												]
											},
											"sql_delete": {
												"description": "Deletes a row in a SQL table. Conn is either an open connection or connection string. If primaryKey is multi-column use ||| to delimit column names and primaryKey value. If primaryKey is not specified, the table will be examined to determine the primary key.",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "tablename"
													},
													{
														"name": "primarykey",
														"optional": true
													},
													{
														"name": "primarykeyvalue",
														"optional": true
													},
													{
														"name": "flagexecute",
														"optional": true
													},
													{
														"name": "e",
														"optional": true
													}
												]
											}
										},
										"g": {
											"sql_get_values": {
												"description": "Returns a CRLF delimited string with data from a table in a remote database using AlphaDAO. Connection can be explicit, or a named connection (e.g. ::name::myconnection).",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "table"
													},
													{
														"name": "filter"
													},
													{
														"name": "result_expression"
													},
													{
														"name": "flagdistinct",
														"optional": true
													},
													{
														"name": "limit",
														"optional": true
													},
													{
														"name": "flagdescendingorder",
														"optional": true
													},
													{
														"name": "args",
														"optional": true
													}
												]
											}
										},
										"i": {
											"sql_import": {
												"description": "Imports csv or json data into a sql table. Can also import data in an Excel file. replicateIdentity - if .t. then indentity column values in the input data are inserted into the sql table as is. If field names in the input data do not match field names in the sql table, then set the inputfield_to_sql_table_column_map parameter. Format is a crlf delimited list of datafieldname=sqltablecolumn values. Action can either be 'insert' -- records are imported as new records, or 'upsert' - existing record are updated, new records are inserted. If 'action' is 'upsert' then primaryKey must be supplied. If the 'primaryKey' column in the data to import does not match the column name, use this format: primaryKeyData=primaryKeyTable",
												"arguments": [
													{
														"name": "connectionstring"
													},
													{
														"name": "tablename"
													},
													{
														"name": "tableowner"
													},
													{
														"name": "csv_or_json_data"
													},
													{
														"name": "replicateidentity",
														"optional": true
													},
													{
														"name": "inputfield_to_sql_table_column_map",
														"optional": true
													},
													{
														"name": "action",
														"optional": true
													},
													{
														"name": "primarykey",
														"optional": true
													}
												]
											},
											"sql_insert": {
												"description": "Inserts a record into a SQL table. Conn is either an open connection or connection string. 'fieldValuePairs' is a crlf delimited list of fields to update using format fieldname=value, or a JSON string. ",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "tablename"
													},
													{
														"name": "fieldsvaluepairs"
													},
													{
														"name": "flagexecute",
														"optional": true
													},
													{
														"name": "e",
														"optional": true
													}
												]
											},
											"sql_installoraclelitefunctions": {
												"description": " Install support for numeric portable functions in OracleLite",
												"arguments": [
													{
														"name": "as"
													}
												]
											}
										},
										"l": {
											"sql_linkcreate": {
												"description": " Add a link to a SQL table to the current database.",
												"arguments": [
													{
														"name": "def"
													},
													{
														"name": "linkeddictionary"
													},
													{
														"name": "resultstring"
													},
													{
														"name": "add_to_db",
														"optional": true
													}
												]
											},
											"sql_listoptionsdialog": {
												"description": " Edit the primary key columns for a SQL table definition.",
												"arguments": [
													{
														"name": "originalvalues",
														"optional": true
													},
													{
														"name": "dlg_title",
														"optional": true
													}
												]
											},
											"sql_lookup": {
												"description": "Does a lookup into a table in a remote database using AlphaDAO. Returns a field value or expression from the remote table. Connection can be explicit, or a named connection (e.g. ::name::myconnection).",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "table"
													},
													{
														"name": "filter"
													},
													{
														"name": "result_expression"
													},
													{
														"name": "args",
														"optional": true
													},
													{
														"name": "flagreturnallvalues",
														"optional": true
													},
													{
														"name": "columnseparator",
														"optional": true
													},
													{
														"name": "flagportablesql",
														"optional": true
													},
													{
														"name": "flagsilent",
														"optional": true
													}
												]
											},
											"sql_lookup_multi": {
												"description": "Does a lookup into a table in a remote database using AlphaDAO. Fields is a comma delimited list of fields. Returns an object with all field values. Connection can be explicit, or a named connection (e.g. ::name::myconnection).",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "table"
													},
													{
														"name": "filter"
													},
													{
														"name": "fields"
													},
													{
														"name": "args",
														"optional": true
													},
													{
														"name": "flagportablesql",
														"optional": true
													}
												]
											}
										},
										"m": {
											"sql_max": {
												"description": "Returns the max of 'expression' for a SQL table.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "table"
													},
													{
														"name": "expression"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											},
											"sql_min": {
												"description": "Returns the min of 'expression' for a SQL table.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "table"
													},
													{
														"name": "expression"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											}
										},
										"n": {
											"sql_namedinstanceget": {
												"description": " Start using a connection given a local file name...",
												"arguments": [
													{
														"name": "localfilename"
													},
													{
														"name": "tablealias"
													},
													{
														"name": "argumentvalues"
													}
												]
											},
											"sql_nameinstancegetsimple": {
												"description": "From just a table name, get the context information",
												"arguments": [
													{
														"name": "localtable"
													}
												]
											}
										},
										"p": {
											"sql_primarykeydialog": {
												"description": " Edit the primary key columns for a SQL table definition.",
												"arguments": [
													{
														"name": "tableinfo"
													}
												]
											}
										},
										"q": {
											"sql_query": {
												"description": "Does a query against a sql database and returns an array of data in JSON format.  Connection can be explicit, or a named connection (e.g. ::name::myconnection).",
												"arguments": [
													{
														"name": "cnin"
													},
													{
														"name": "sql"
													},
													{
														"name": "argsin",
														"optional": true
													},
													{
														"name": "flagportablesql",
														"optional": true
													},
													{
														"name": "formatjson",
														"optional": true
													}
												]
											},
											"sql_query_builder": {
												"description": "Displays the SQL Query Builder",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "sqlquery",
														"optional": true
													}
												]
											},
											"sql_queryimport": {
												"description": " Import a SQL query into a native Alpha Five (.dbf) table. Optionally adds the table to the current database.",
												"arguments": [
													{
														"name": "sqlconn"
													},
													{
														"name": "query"
													},
													{
														"name": "localfilename"
													},
													{
														"name": "tableinfo",
														"optional": true
													},
													{
														"name": "showprogress",
														"optional": true
													},
													{
														"name": "allowcancel",
														"optional": true
													},
													{
														"name": "addtabletodatabase",
														"optional": true
													},
													{
														"name": "argumentspassedin",
														"optional": true
													},
													{
														"name": "statusbarformatstring",
														"optional": true
													}
												]
											},
											"sql_queryrenamewhereclausearrayoperators2": {
												"description": "Called by Query Genie to give friendly names to the logical operators",
												"arguments": [
													{
														"name": "a"
													},
													{
														"name": "as"
													},
													{
														"name": "cn"
													}
												]
											},
											"sql_quote": {
												"description": "Formats a value for use in a Portable SQL expression.",
												"arguments": [
													{
														"name": "value"
													}
												]
											}
										},
										"r": {
											"sql_records_get": {
												"description": "Returns a CRLF delimited string with data from a table or query in a remote database using AlphaDAO. Connection can be explicit, or a named connection (e.g. ::name::myconnection).",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "table_or_sql_statement"
													},
													{
														"name": "filter"
													},
													{
														"name": "result_expression"
													},
													{
														"name": "args",
														"optional": true
													}
												]
											},
											"sql_resultset_preview": {
												"description": "Displays an Xdialog showing the data in an SQL Result set",
												"arguments": [
													{
														"name": "resultset"
													},
													{
														"name": "maximumnumerofrows",
														"optional": true
													},
													{
														"name": "dialog_title",
														"optional": true
													},
													{
														"name": "cn",
														"optional": true
													}
												]
											}
										},
										"s": {
											"sql_safeexecute": {
												"description": " Version of SQL execute that assumes portable syntax string literals are UTF8 encoded",
												"arguments": [
													{
														"name": "sqlconn"
													},
													{
														"name": "sqlselectstatement"
													},
													{
														"name": "args"
													}
												]
											},
											"sql_sum": {
												"description": "Returns the sum of 'expression' for a SQL table.",
												"arguments": [
													{
														"name": "cn"
													},
													{
														"name": "table"
													},
													{
														"name": "expression"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													}
												]
											}
										},
										"t": {
											"sql_tableexport": {
												"description": " Export a local table to a backend SQL database.",
												"arguments": [
													{
														"name": "sqlconn"
													},
													{
														"name": "createtable"
													},
													{
														"name": "sourcedbf_or_pointer"
													},
													{
														"name": "owner"
													},
													{
														"name": "table"
													},
													{
														"name": "resultmessage"
													},
													{
														"name": "filter",
														"optional": true
													},
													{
														"name": "order",
														"optional": true
													},
													{
														"name": "queryflags",
														"optional": true
													},
													{
														"name": "exportfieldlist",
														"optional": true
													},
													{
														"name": "arguments",
														"optional": true
													},
													{
														"name": "createstatement",
														"optional": true
													},
													{
														"name": "showprogress",
														"optional": true
													},
													{
														"name": "allowcancel",
														"optional": true
													},
													{
														"name": "statusbarformatstring",
														"optional": true
													},
													{
														"name": "argumentdefinitions",
														"optional": true
													},
													{
														"name": "autonumberfield",
														"optional": true
													},
													{
														"name": "identityfields",
														"optional": true
													},
													{
														"name": "opspassedin",
														"optional": true
													}
												]
											},
											"sql_tableexportdialog": {
												"description": " Display a dialog to export a local table to a SQL database."
											},
											"sql_tableimport": {
												"description": " Import a SQL table into a native Alpha Five (.dbf) table. Optionally adds the table to the current database.",
												"arguments": [
													{
														"name": "sqlconn"
													},
													{
														"name": "owner"
													},
													{
														"name": "tablename"
													},
													{
														"name": "localfilename"
													},
													{
														"name": "showprogress",
														"optional": true
													},
													{
														"name": "sizetofit",
														"optional": true
													},
													{
														"name": "allowcancel",
														"optional": true
													},
													{
														"name": "addtabletodatabase",
														"optional": true
													},
													{
														"name": "statusbarformatstring",
														"optional": true
													}
												]
											},
											"sql_tableimportdialog": {
												"description": " Display a dialog to import a SQL database to a local table."
											},
											"sql_tableinfoofdbf": {
												"description": " Create a SQL table definition from a DBF file, or an open table pointer.",
												"arguments": [
													{
														"name": "name_or_pointer"
													},
													{
														"name": "tableinforesult"
													}
												]
											},
											"sql_tableinfotodbf": {
												"description": " Create an empty database from a SQL::TableInfo.",
												"arguments": [
													{
														"name": "tableinfo"
													},
													{
														"name": "localfilename"
													}
												]
											},
											"sql_tableinfotostring": {
												"description": " Convert a SQL::TableInfo structure to a string.",
												"arguments": [
													{
														"name": "as"
													}
												]
											},
											"sql_time": {
												"description": "Converts a shor-time value in a format for SQL.",
												"arguments": [
													{
														"name": "shorttime"
													}
												]
											}
										},
										"u": {
											"sql_update": {
												"description": "Updates a SQL table. Conn is either an open connection or connection string. 'fieldValuePairs' is a crlf delimited list of fields to update using format fieldname=value, or a JSON string. If primaryKey is multi-column use ||| to delimit column names and primaryKey value. If primaryKey is not specified, the table will be examined to determine the primary key.",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "tablename"
													},
													{
														"name": "fieldsvaluepairs"
													},
													{
														"name": "primarykey",
														"optional": true
													},
													{
														"name": "primarykeyvalue",
														"optional": true
													},
													{
														"name": "flagexecute",
														"optional": true
													},
													{
														"name": "e",
														"optional": true
													}
												]
											},
											"sql_upsert": {
												"description": "Updates a SQL table. Conn is either an open connection or connection string. 'fieldValuePairs' is a crlf delimited list of fields to update using format fieldname=value, or a JSON string. If primaryKey is multi-column use ||| to delimit column names and primaryKey value. If primaryKey is not specified, the table will be examined to determine the primary key.",
												"arguments": [
													{
														"name": "conn"
													},
													{
														"name": "tablename"
													},
													{
														"name": "fieldsvaluepairs"
													},
													{
														"name": "primarykey",
														"optional": true
													},
													{
														"name": "primarykeyvaluein",
														"optional": true
													},
													{
														"name": "flagexecute",
														"optional": true
													},
													{
														"name": "e",
														"optional": true
													}
												]
											}
										}
									}
								}
							}
						},
						"r": {
							"sqrt": {
								"description": "Returns the square root of a number.",
								"arguments": [
									{
										"name": "number"
									}
								]
							}
						}
					}
				},
				"s": {
					"ssl_createcertificate": {
						"description": "Create an SSL certificate",
						"arguments": [
							{
								"name": "certfile"
							},
							{
								"name": "bits"
							},
							{
								"name": "keyfile"
							},
							{
								"name": "password"
							}
						]
					},
					"ssl_createcsr": {
						"description": "Create a Certificate Signing Request"
					},
					"ssl_createprivatekey": {
						"description": "Generate a new private key for an SSL certificate",
						"arguments": [
							{
								"name": "filename"
							},
							{
								"name": "bits",
								"optional": true
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"ssl_dialog_certdetails": {
						"description": "A dialog to collect detils to be used for an SSL certificate",
						"arguments": [
							{
								"name": "lgencsr",
								"optional": true
							},
							{
								"name": "lgensscert",
								"optional": true
							},
							{
								"name": "outputdirectory",
								"optional": true
							}
						]
					},
					"ssl_test_cert": {
						"description": "Test a certificate/private key pair",
						"arguments": [
							{
								"name": "certificatefile"
							},
							{
								"name": "privatekeyfile"
							},
							{
								"name": "passphrase",
								"optional": true
							},
							{
								"name": "certificatechainfile",
								"optional": true
							}
						]
					}
				},
				"t": {
					"__index__": {
						"d": {
							"stddev": {
								"description": "Get the standard deviation of subexpression over group 'over' sampled each group 'each'",
								"arguments": [
									{
										"name": "subexpr"
									},
									{
										"name": "over",
										"optional": true
									},
									{
										"name": "each",
										"optional": true
									}
								]
							}
						},
						"o": {
							"stod": {
								"description": " Convert a date in YYYYMMDD format to {MM/DD/YYYY}",
								"arguments": [
									{
										"name": "cdate"
									}
								]
							}
						},
						"r": {
							"str": {
								"description": "Converts a number to a character string.",
								"arguments": [
									{
										"name": "number"
									},
									{
										"name": "length",
										"optional": true
									},
									{
										"name": "decimal_places",
										"optional": true
									},
									{
										"name": "number_format",
										"optional": true
									}
								]
							},
							"strequal": {
								"description": "Returns .t. if the two strings are equivalent.",
								"arguments": [
									{
										"name": "string1"
									},
									{
										"name": "string2"
									},
									{
										"name": "ignorewhitespace",
										"optional": true
									},
									{
										"name": "casesensitive",
										"optional": true
									}
								]
							},
							"strip_table_paths": {
								"description": "Removes path from a table filename if table is in database. In case of set returns stripped names of all tables in the set.",
								"arguments": [
									{
										"name": "table_set_name"
									},
									{
										"name": "expand_set",
										"optional": true
									}
								]
							},
							"strip_trailing_char": {
								"description": "Strips a trailing character from a string. Typically used to string a trailing backslash from a path.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "chr",
										"optional": true
									}
								]
							},
							"stritran": {
								"description": "Replaces each occurrence of a string with another - compare is case insensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring"
									},
									{
										"name": "replacement",
										"optional": true
									},
									{
										"name": "start_pos",
										"optional": true
									},
									{
										"name": "occurrences",
										"optional": true
									},
									{
										"name": "every",
										"optional": true
									}
								]
							},
							"stritran_multi": {
								"description": "Replaces occurrences of strings in one cr-lf list with strings in another cr-lf list - compare is case insensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substrings"
									},
									{
										"name": "replacements"
									}
								]
							},
							"stritran_multi_expressions": {
								"description": "Replaces occurrences of tokens before '=' with results of expression after '=' in cr-lf delimited list of pairs compare is case insensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "pairs"
									}
								]
							},
							"stritran_smatch": {
								"description": "Replaces occurrences that match a pattern with another pattern.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring_pattern"
									},
									{
										"name": "replacement_pattern"
									},
									{
										"name": "reorder",
										"optional": true
									}
								]
							},
							"stritran_special": {
								"description": "Searches for occurrences of a sub-string starting with 'start_string' and ending with 'end_string' and replaces with 'replace_string'. Replace_count specifies how many replacements to make. Default is 0, which indicates replace all occurrences. Search is case-insensitive.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "start_string"
									},
									{
										"name": "end_string"
									},
									{
										"name": "replace_string"
									},
									{
										"name": "replace_count",
										"optional": true
									}
								]
							},
							"strtran": {
								"description": "Replaces each occurrence of a string with another.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring"
									},
									{
										"name": "replacement",
										"optional": true
									},
									{
										"name": "start_pos",
										"optional": true
									},
									{
										"name": "occurrences",
										"optional": true
									},
									{
										"name": "every",
										"optional": true
									}
								]
							},
							"strtran_multi": {
								"description": "Replaces occurrences of strings in one cr-lf list with strings in another cr-lf list - compare is case sensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substrings"
									},
									{
										"name": "replacements"
									}
								]
							},
							"strtran_multi_expressions": {
								"description": "Replaces occurrences of tokens before '=' with results of expression after '=' in cr-lf delimited list of pairs compare is case sensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "pairs"
									}
								]
							},
							"strtran_multi_javascript": {
								"description": "Public user defined function.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "search"
									},
									{
										"name": "replace"
									}
								]
							},
							"strtran_smatch": {
								"description": "Replaces occurrences that match a pattern with another pattern.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring_pattern"
									},
									{
										"name": "replacement_pattern"
									},
									{
										"name": "reorder",
										"optional": true
									}
								]
							},
							"strtran_special": {
								"description": "Searches for occurrences of a sub-string starting with 'start_string' and ending with 'end_string' and replaces with 'replace_string'. Replace_count specifies how many replacements to make. Default is 0, which indicates replace all occurrences. Search is case-sensitive.",
								"arguments": [
									{
										"name": "string"
									},
									{
										"name": "start_string"
									},
									{
										"name": "end_string"
									},
									{
										"name": "replace_string"
									},
									{
										"name": "replace_count",
										"optional": true
									}
								]
							},
							"struct_get": {
								"description": "Converts a packed structure to a blob.",
								"arguments": [
									{
										"name": "structure"
									}
								]
							},
							"struct_set": {
								"description": "Create a packed structure, initialize with blob data if provided.",
								"arguments": [
									{
										"name": "stucture_name"
									},
									{
										"name": "blob",
										"optional": true
									}
								]
							},
							"strworditran": {
								"description": "Replaces each occurrence of a word with another - compare is case insensitive.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring"
									},
									{
										"name": "replacement",
										"optional": true
									},
									{
										"name": "start_pos",
										"optional": true
									},
									{
										"name": "occurrences",
										"optional": true
									},
									{
										"name": "every",
										"optional": true
									}
								]
							},
							"strwordtran": {
								"description": "Replaces each occurrence of a word with another.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "substring"
									},
									{
										"name": "replacement",
										"optional": true
									},
									{
										"name": "start_pos",
										"optional": true
									},
									{
										"name": "occurrences",
										"optional": true
									},
									{
										"name": "every",
										"optional": true
									}
								]
							}
						},
						"u": {
							"stuff": {
								"description": "Alters a string by deleting characters and replacing them with another string.",
								"arguments": [
									{
										"name": "character"
									},
									{
										"name": "start_position"
									},
									{
										"name": "number_of_characters"
									},
									{
										"name": "insert_string"
									}
								]
							}
						}
					}
				},
				"u": {
					"submit": {
						"description": "Sumbit a command to run in another session.",
						"arguments": [
							{
								"name": "session"
							},
							{
								"name": "command"
							}
						]
					},
					"submit_let": {
						"description": "Submit a variable value to another running session.",
						"arguments": [
							{
								"name": "session"
							},
							{
								"name": "variable_name"
							},
							{
								"name": "value"
							}
						]
					},
					"substr": {
						"description": "Returns a substring portion of a character string.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "starting_position"
							},
							{
								"name": "number_of_characters",
								"optional": true
							}
						]
					},
					"substr_u": {
						"description": "Returns a substring portion of a character string, honors UTF8 encoding.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "starting_position"
							},
							{
								"name": "number_of_characters",
								"optional": true
							}
						]
					},
					"suppressblanklines": {
						"description": "Supresses blank <br> pr <p> lines from HTML.",
						"arguments": [
							{
								"name": "html"
							}
						]
					}
				},
				"y": {
					"__index__": {
						"s": {
							"__index__": {
								"_": {
									"__index__": {
										"c": {
											"sys_console_close": {
												"description": "Close an open console window associated with A5."
											},
											"sys_console_get": {
												"description": "If an associated console is open (via console open) - read info (T=Text,A=Attributes,S=size,M=Maximum,W=Window,C=Cursor).",
												"arguments": [
													{
														"name": "info_flags",
														"optional": true
													}
												]
											},
											"sys_console_open": {
												"description": "Opens a console window associated with A5."
											}
										},
										"e": {
											"sys_edit": {
												"description": "Edit a file using the files registered edit method.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											},
											"sys_event_log": {
												"description": "Under NT based systems, log events to the system log - event messages format has optional <Flag>: prefix where <Flag> is E=error,W=Warning,I=Info,S=Success,F=Failure. other options - E=<event#>,C=<Category#>",
												"arguments": [
													{
														"name": "application"
													},
													{
														"name": "event"
													}
												]
											},
											"sys_event_log_dump": {
												"description": "Dump events in event log - format S=string,C=computer,N=Name,T=time,W=Time written,K=Kind of event,E=eventid,X=subcategory.",
												"arguments": [
													{
														"name": "application"
													},
													{
														"name": "format"
													}
												]
											},
											"sys_explore": {
												"description": "Explore for a file/path using the files registered explore method.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											}
										},
										"f": {
											"sys_focus_put": {
												"description": "Set focus to a program given a window name, alpha five window five is no window specified.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											}
										},
										"i": {
											"sys_id_enum": {
												"description": "Return a list of top level windows."
											},
											"sys_id_get": {
												"description": "Get window  of a program, alpha five window five is no window specified.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_id_hide": {
												"description": "Hide a window.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_id_maximize": {
												"description": "Maximize a window.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_id_minimize": {
												"description": "Minimize a window.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_id_move": {
												"description": "Move a window.",
												"arguments": [
													{
														"name": "window_name"
													},
													{
														"name": "x"
													},
													{
														"name": "y"
													}
												]
											},
											"sys_id_resize": {
												"description": "Resize a window.",
												"arguments": [
													{
														"name": "window_name"
													},
													{
														"name": "x"
													},
													{
														"name": "y"
													}
												]
											},
											"sys_id_restore": {
												"description": "Restore a window.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_id_show": {
												"description": "Show a window.",
												"arguments": [
													{
														"name": "window_name",
														"optional": true
													}
												]
											},
											"sys_is_foreground": {
												"description": "Return true alpha five window is the active program."
											}
										},
										"k": {
											"sys_key_down": {
												"description": "Returns true if the named key is being held down.",
												"arguments": [
													{
														"name": "key"
													}
												]
											},
											"sys_key_modifiers": {
												"description": "Returns the modifier keys that are currently being pressed (Control+Shift+Alt)."
											},
											"sys_keys_enum": {
												"description": "Enumerate the valid keynames for sys_send_keys and other key functions."
											}
										},
										"m": {
											"sys_metric_get": {
												"description": "Get size/position of a window (window_metric = x,y,w,h).",
												"arguments": [
													{
														"name": "window_name"
													},
													{
														"name": "window_metric"
													}
												]
											}
										},
										"o": {
											"sys_open": {
												"description": "Open a file using the files registered open method.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											}
										},
										"p": {
											"sys_print": {
												"description": "Print a file using the files registered print method.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											},
											"sys_properties": {
												"description": "Get Properties for a file using the files registered properties method.",
												"arguments": [
													{
														"name": "filename"
													}
												]
											}
										},
										"r": {
											"sys_resolve_url": {
												"description": "Link to a URL (mailto:,http:,ftp: etc).",
												"arguments": [
													{
														"name": "url"
													}
												]
											}
										},
										"s": {
											"sys_send_keys": {
												"description": "Send keys to window that has focus.",
												"arguments": [
													{
														"name": "key_macro"
													}
												]
											},
											"sys_shell": {
												"description": "Run a program, returing the hwnd of the program run.",
												"arguments": [
													{
														"name": "command_line"
													},
													{
														"name": "window_style",
														"optional": true
													}
												]
											},
											"sys_shell_result": {
												"description": "Executes a 'command line' command and returns the result. Example usage: ipconfig_info = sys_shell_result(\"ipconfig\")",
												"arguments": [
													{
														"name": "command_line"
													}
												]
											},
											"sys_shell_wait": {
												"description": " Run a program and wait until the program closes before returning.",
												"arguments": [
													{
														"name": "command_line"
													},
													{
														"name": "show_window",
														"optional": true
													},
													{
														"name": "timeoutinmilliseconds",
														"optional": true
													},
													{
														"name": "terminateontimeout",
														"optional": true
													}
												]
											},
											"sys_shell_wait_result": {
												"description": " Run a program and wait until the program closes before returning the standard output stream Note: If there is an error the first line will be ERROR followed by standard error output.  If there is an exception, the first line will be EXCEPTION with text to follow.",
												"arguments": [
													{
														"name": "command_line"
													},
													{
														"name": "show_window",
														"optional": true
													},
													{
														"name": "timeoutinmilliseconds",
														"optional": true
													},
													{
														"name": "terminateontimeout",
														"optional": true
													}
												]
											}
										},
										"w": {
											"sys_window_caret": {
												"description": "Return the window that is currently has the blinking caret."
											},
											"sys_window_movesize": {
												"description": "Return the window that is currently being resized."
											}
										}
									}
								},
								"t": {
									"system_event_add": {
										"description": "Add a system event (code to be executed on system event).",
										"arguments": [
											{
												"name": "system_event"
											},
											{
												"name": "name"
											},
											{
												"name": "code"
											}
										]
									},
									"system_event_data_get": {
										"description": "Get pointer to system event data."
									},
									"system_event_drop": {
										"description": "Drop a defined system event.",
										"arguments": [
											{
												"name": "system_event"
											},
											{
												"name": "name"
											}
										]
									},
									"system_event_invoke": {
										"description": "Invoke a system event.",
										"arguments": [
											{
												"name": "system_event"
											}
										]
									},
									"system_event_invoke_query": {
										"description": "Invoke a system event, returns false if a system event called cancle, else returns true.",
										"arguments": [
											{
												"name": "system_event"
											}
										]
									},
									"system_variables": {
										"description": "Gets the system frame."
									},
									"systemfonts_apply": {
										"description": "Applies the system font settings stored in the Registry"
									}
								}
							}
						}
					}
				}
			}
		},
		"t": {
			"__index__": {
				"a": {
					"table": {
						"description": "Returns the name of the current table."
					},
					"table_is_empty": {
						"description": "Returns .t. if a table is empty. You can pass in the name of a table, or a pointer to an open table.",
						"arguments": [
							{
								"name": "table"
							}
						]
					},
					"table_remove": {
						"description": "Remove an Alpha Five table (.dbf file) and all it's associated files.",
						"arguments": [
							{
								"name": "tablename"
							}
						]
					},
					"tableavg": {
						"description": "Returns the average value for a field in records of a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							},
							{
								"name": "field"
							}
						]
					},
					"tablecount": {
						"description": "Returns the number of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							}
						]
					},
					"tablefinder": {
						"description": "Select a table by search for all tables that contain a specified fieldname. Wildcard searches are supported."
					},
					"tablemax": {
						"description": "Returns the maximum value of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							},
							{
								"name": "field"
							}
						]
					},
					"tablemin": {
						"description": "Returns the minimum value of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							},
							{
								"name": "field"
							}
						]
					},
					"tables_in_set": {
						"description": "Returns a crlf delimited string of tables in a set,",
						"arguments": [
							{
								"name": "setname"
							},
							{
								"name": "fully_qualified_paths",
								"optional": true
							}
						]
					},
					"tablesum": {
						"description": "Returns the sum of fields of matching records in a specified table.",
						"arguments": [
							{
								"name": "tablename"
							},
							{
								"name": "filter"
							},
							{
								"name": "field"
							}
						]
					},
					"tagged_pattern": {
						"description": "Perform tagged expression replacement on a string.",
						"arguments": [
							{
								"name": "tagged_input"
							},
							{
								"name": "tagged_output"
							},
							{
								"name": "string"
							}
						]
					},
					"tan": {
						"description": "Returns the tangent of an angle expressed in radians.",
						"arguments": [
							{
								"name": "radians"
							}
						]
					}
				},
				"e": {
					"template_to_expression": {
						"description": "From a template, following cr-lf delimited rules, convert to expression.",
						"arguments": [
							{
								"name": "template"
							},
							{
								"name": "general_rules"
							},
							{
								"name": "specific_rules"
							},
							{
								"name": "taggedstrings",
								"optional": true
							},
							{
								"name": "concatfunction",
								"optional": true
							},
							{
								"name": "trimconcat",
								"optional": true
							},
							{
								"name": "supportif",
								"optional": true
							}
						]
					},
					"term": {
						"description": "Computes the term of a loan.",
						"arguments": [
							{
								"name": "principal"
							},
							{
								"name": "payment"
							},
							{
								"name": "interest"
							}
						]
					},
					"textsearch": {
						"description": "Search a string for a pattern - uses AND, OR between phrases in pattern, and NOT in front of excludes.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "search_pattern"
							}
						]
					},
					"textsearchscore": {
						"description": "Returns a count of the number of ways a pattern matched a string (0 for none, 1 for one condition matched, 2 for two conditions matched etc.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "search_pattern"
							}
						]
					},
					"texttospeech": {
						"description": "Converts text to speech",
						"arguments": [
							{
								"name": "text"
							}
						]
					}
				},
				"h": {
					"thread_create": {
						"description": "Create a thread - requires a unique thread name , code to run - allows for 'base' variable frame to be passed in.",
						"arguments": [
							{
								"name": "thread_name"
							},
							{
								"name": "xbasic_code"
							},
							{
								"name": "variable",
								"optional": true
							}
						]
					},
					"thread_enum": {
						"description": "Get information about xbasic threads (N=name,I=thread #).",
						"arguments": [
							{
								"name": "format"
							}
						]
					},
					"thread_event": {
						"description": "Send an event to another thread.",
						"arguments": [
							{
								"name": "threadname"
							},
							{
								"name": "event"
							}
						]
					},
					"thread_get": {
						"description": "Get the name of the current thread."
					},
					"thread_interrupt": {
						"description": "Send an interrupt event to another thread (thread needs an interrupt function).",
						"arguments": [
							{
								"name": "threadname"
							},
							{
								"name": "event"
							}
						]
					},
					"thread_monitor_cpu_usage": {
						"description": "XBasic monitors CPU usage for the thread using settings provided.\n MaxCPUPercent - Between 0 and 100\n MonitorTime - How often the usage is checked. Default is 5 sec.\n RecoveryTime - How long a thread remains at a lowered priority. Defaults to 300 sec.(5 min.)\n LogMessage - Identifying string.",
						"arguments": [
							{
								"name": "threadname"
							},
							{
								"name": "maxcpupercent"
							},
							{
								"name": "monitortime",
								"optional": true
							},
							{
								"name": "recoverytime",
								"optional": true
							},
							{
								"name": "logmessage",
								"optional": true
							}
						]
					},
					"thread_name_create": {
						"description": "Make a unique thread name, provide preferred name, numbers will be added if thread on name already exists.",
						"arguments": [
							{
								"name": "thread_name"
							}
						]
					},
					"thread_variables": {
						"description": "Get the base variable space for a thread.",
						"arguments": [
							{
								"name": "threadname",
								"optional": true
							}
						]
					},
					"thread_wait": {
						"description": "Thread must wait until another thread does a 'thread_event'."
					}
				},
				"i": {
					"time": {
						"description": "Returns the current time on the system clock in the fomat 'HH:MM:SS', optional format controls other times, passed in time type can be used in place of the current time.",
						"arguments": [
							{
								"name": "time_format",
								"optional": true
							},
							{
								"name": "time",
								"optional": true
							}
						]
					},
					"time_to_unixtimestamp": {
						"description": "Converts a time value to a Unix timestamp number (seconds since 1970-1-1)",
						"arguments": [
							{
								"name": "timevalue"
							}
						]
					},
					"time_var": {
						"description": "Returns a time variable",
						"arguments": [
							{
								"name": "year"
							},
							{
								"name": "month"
							},
							{
								"name": "day"
							},
							{
								"name": "hour"
							},
							{
								"name": "minutes"
							},
							{
								"name": "seconds"
							},
							{
								"name": "am_pm",
								"optional": true
							}
						]
					},
					"timetotransformtime": {
						"description": "Returns a time value as a string using format used by TransForm",
						"arguments": [
							{
								"name": "time"
							}
						]
					},
					"timez": {
						"description": "Same as time(), but returns a null string if time is a null value. ",
						"arguments": [
							{
								"name": "time_format"
							},
							{
								"name": "time"
							}
						]
					}
				},
				"o": {
					"token_name_increment": {
						"description": "Increment a name value - useful for creating unique names when a name already exists.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "max_length",
								"optional": true
							}
						]
					},
					"token_search_replace": {
						"description": "Search and replace tokens in an expression, useful for replacing fieldnames and subexpressions.",
						"arguments": [
							{
								"name": "expression"
							},
							{
								"name": "searchtoken1"
							},
							{
								"name": "replacetoken1",
								"optional": true
							},
							{
								"name": "searchtokenn",
								"optional": true
							},
							{
								"name": "replacetokenn",
								"optional": true
							}
						]
					},
					"toolbar_edit": {
						"description": "Launches the toolbar editor.",
						"arguments": [
							{
								"name": "toolbarname"
							}
						]
					},
					"toolbar_edit_v6": {
						"description": "Launches the toolbar editor.",
						"arguments": [
							{
								"name": "toolbarname"
							}
						]
					},
					"toseconds": {
						"description": "Converts a time value to seconds.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"total": {
						"description": "Get the total of subexpression over group 'over' sampled each group 'each'",
						"arguments": [
							{
								"name": "subexpr"
							},
							{
								"name": "over",
								"optional": true
							},
							{
								"name": "each",
								"optional": true
							}
						]
					},
					"totime": {
						"description": "Converts a time value to a formatted time character string.",
						"arguments": [
							{
								"name": "seconds"
							},
							{
								"name": "format_code"
							},
							{
								"name": "decimal_places"
							}
						]
					},
					"touch": {
						"description": "Udates date time for last Accessed and lastUpdated to now()",
						"arguments": [
							{
								"name": "filename"
							}
						]
					}
				},
				"r": {
					"trace": {
						"description": "Print a value in the trace window, on the same line.",
						"arguments": [
							{
								"name": "expression"
							}
						]
					},
					"traceln": {
						"description": "Print a value in the trace window, value is printed on its own line.",
						"arguments": [
							{
								"name": "expression"
							}
						]
					},
					"trailing": {
						"description": "Returns the non-word characters following the specified word.",
						"arguments": [
							{
								"name": "strings"
							},
							{
								"name": "word_number"
							}
						]
					},
					"transform": {
						"description": "Returns a character string that formats a user defined expression.",
						"arguments": [
							{
								"name": "value"
							},
							{
								"name": "formatting_string"
							}
						]
					},
					"trim": {
						"description": "Removes trailing blanks from a character string.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"w": {
					"twilio_send_sms": {
						"description": "Send an SMS message using Twilio",
						"arguments": [
							{
								"name": "presult"
							},
							{
								"name": "to"
							},
							{
								"name": "message"
							},
							{
								"name": "namedresource"
							},
							{
								"name": "from",
								"optional": true
							},
							{
								"name": "accountsid",
								"optional": true
							},
							{
								"name": "authcode",
								"optional": true
							}
						]
					},
					"twitter_clientapicall": {
						"description": "Make a REST call to the Twitter API using a bearerToken that was obtained using the twitter_getBearerToken() function",
						"arguments": [
							{
								"name": "bearertoken"
							},
							{
								"name": "request"
							}
						]
					},
					"twitter_getbearertoken": {
						"description": "Uses OAuth 2.0 to get a bearer token from Twitter.",
						"arguments": [
							{
								"name": "client_id"
							},
							{
								"name": "client_secret"
							}
						]
					}
				},
				"y": {
					"typeof": {
						"description": "Returns the data type of the the value.",
						"arguments": [
							{
								"name": "value"
							}
						]
					}
				}
			}
		},
		"u": {
			"__index__": {
				"d": {
					"udf_define": {
						"description": "Create a udf from the UDF script.",
						"arguments": [
							{
								"name": "udf_code"
							},
							{
								"name": "variable_context",
								"optional": true
							}
						]
					},
					"udf_drop": {
						"description": "Drop a udf (must include password if dropping a protected udf).",
						"arguments": [
							{
								"name": "udf_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"udf_library_load": {
						"description": "Load udfs from library into frame.",
						"arguments": [
							{
								"name": "library"
							},
							{
								"name": "variable_context",
								"optional": true
							}
						]
					},
					"udf_load": {
						"description": "Return udf contents (optional password can be used to load protected scripts).",
						"arguments": [
							{
								"name": "udf_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"udf_multiple_define": {
						"description": "Create a multiple udfs stored in a single script.",
						"arguments": [
							{
								"name": "udfs_code"
							},
							{
								"name": "variable_context",
								"optional": true
							}
						]
					},
					"udf_rename": {
						"description": "Rename a udf (must include password if renaming a protected udf).",
						"arguments": [
							{
								"name": "udf_name"
							},
							{
								"name": "new_name"
							},
							{
								"name": "password",
								"optional": true
							}
						]
					},
					"udf_save": {
						"description": "Save a udf (must include password if saving over a protected udf).",
						"arguments": [
							{
								"name": "udf_name"
							},
							{
								"name": "udf_code"
							},
							{
								"name": "password",
								"optional": true
							},
							{
								"name": "annotate",
								"optional": true
							}
						]
					}
				},
				"i": {
					"__index__": {
						"_": {
							"__index__": {
								"b": {
									"ui_beep": {
										"description": "Beep , with optional beep style.",
										"arguments": [
											{
												"name": "ui_beep_style",
												"optional": true
											}
										]
									},
									"ui_bitmap_create": {
										"description": "Create a bitmap of name, Width inches wide, Height Inches high.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "width"
											},
											{
												"name": "height"
											}
										]
									},
									"ui_bitmap_create_from_screen": {
										"description": "Create a bitmap from a rectangle on screen.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											},
											{
												"name": "width"
											},
											{
												"name": "height"
											}
										]
									},
									"ui_bitmap_create_from_window": {
										"description": "Create a bitmap for an open xdialog.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "dlgname"
											}
										]
									},
									"ui_bitmap_create_from_xpm": {
										"description": "Create a bitmap of name, specify using xpm format (extended to support alpha five named colors).",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "xpm_format"
											}
										]
									},
									"ui_bitmap_draw": {
										"description": "Draw on a bitmap.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "drawing_code"
											}
										]
									},
									"ui_bitmap_drop": {
										"description": "Drop a bitmap from the bitmap cache, returns TRUE if bitmap was in cache.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_bitmap_exists": {
										"description": "Return true if the bitmap exists.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_bitmap_handle": {
										"description": "Get GDI handle for named bitmap.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_bitmap_info_get": {
										"description": "Returns information about a bitmap formats:  w=width h=height b=bits-per-pixel.",
										"arguments": [
											{
												"name": "bitmap_data"
											},
											{
												"name": "format"
											}
										]
									},
									"ui_bitmap_load": {
										"description": "Load a bitmap from a blob into the bitmap cache, returns TRUE if succeeded.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "bitmap_data"
											}
										]
									},
									"ui_bitmap_png_load": {
										"description": "Load a bitmap from a PNG blob into the bitmap cache, returns TRUE if succeeded.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "bitmap_data"
											}
										]
									},
									"ui_bitmap_png_save": {
										"description": "Save contents of a named bitmap to a PNG formatted blob.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_bitmap_save": {
										"description": "Save contents of a named bitmap to a blob.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_browse_for_computer": {
										"description": "Prompt user for computer by name.",
										"arguments": [
											{
												"name": "displaytext",
												"optional": true
											},
											{
												"name": "showeditbox",
												"optional": true
											}
										]
									},
									"ui_browse_for_folder": {
										"description": "Prompt user for folder path.",
										"arguments": [
											{
												"name": "displaytext",
												"optional": true
											},
											{
												"name": "showeditbox",
												"optional": true
											}
										]
									}
								},
								"c": {
									"ui_color_format": {
										"description": "Format a named color (color format R=red G=Green B=Blue or N-(numeric value or all) follow each with H=Hex O=Octal D=Decimal).",
										"arguments": [
											{
												"name": "color_name"
											},
											{
												"name": "color_format"
											}
										]
									},
									"ui_color_name_get": {
										"description": "Get a name for a color - flags - colorDesc is (N)umber or (R)GB values (H)ex (D)ecimal (O)ctal  Output - (W)eb name if available.",
										"arguments": [
											{
												"name": "colordesc"
											},
											{
												"name": "flags"
											}
										]
									},
									"ui_context_create": {
										"description": "Create a UI context for top menu and xdialogs with {context} directive, optional 'persistent' name retrieves and stores toolbar state.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "persistent",
												"optional": true
											}
										]
									},
									"ui_context_create_get": {
										"description": "Get the 'create' ui context name."
									},
									"ui_context_current_get": {
										"description": "Get the 'current' ui context name."
									},
									"ui_context_destroy": {
										"description": "Destroy UI context along with all top menu and xdialogs with {context} directive in the context.",
										"arguments": [
											{
												"name": "context"
											}
										]
									},
									"ui_context_dlg_exist": {
										"description": "Returns TRUE if xdialog exists in context (or if xdialog is global context - i.e. exists for ALL contexts), if context argument is blank, we assume create context.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "xdialogname"
											}
										]
									},
									"ui_context_panels_define": {
										"description": "Define panels for a UI context - selecting as a default the optional current panel.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "panels"
											},
											{
												"name": "currentpanel",
												"optional": true
											}
										]
									},
									"ui_context_panels_enum": {
										"description": "Get list of dock panels that are not in use + the active pane.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "activepane",
												"optional": true
											}
										]
									},
									"ui_context_panels_load": {
										"description": "Load just-in-time panel data into a UI context - subsequent dock panel will cause these to display.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "xmldefinition"
											}
										]
									},
									"ui_context_panels_restore": {
										"description": "Show panels if dock panel state is NOT hidden.",
										"arguments": [
											{
												"name": "context"
											}
										]
									},
									"ui_context_panels_show": {
										"description": "Show/hide context dock panels.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "show"
											}
										]
									},
									"ui_context_panels_visible": {
										"description": "Determine if dock panels are visible.",
										"arguments": [
											{
												"name": "context"
											}
										]
									},
									"ui_context_reset_default": {
										"description": "Resets the current UI context."
									},
									"ui_context_session_bind": {
										"description": "Bind context as the current context for the session (session sets context on activate, cleans up context on shutdown).",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_context_session_own": {
										"description": "Set session as owner for context - session cleans up context on shutdown.",
										"arguments": [
											{
												"name": "context"
											},
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_context_set": {
										"description": "Set current UI context for top menu and xdialogs with {context} directive.",
										"arguments": [
											{
												"name": "context"
											}
										]
									},
									"ui_context_where_get": {
										"description": "Get the 'current' persistent ui context name."
									},
									"ui_cut_branch": {
										"description": "Get tree underneath a branch of the menu.",
										"arguments": [
											{
												"name": "branches"
											},
											{
												"name": "whatbranch"
											}
										]
									}
								},
								"d": {
									"__index__": {
										"i": {
											"ui_display_monitor_enum": {
												"description": "Return list of all the monitor names.",
												"arguments": [
													{
														"name": "format",
														"optional": true
													}
												]
											},
											"ui_display_monitor_from_window": {
												"description": "Return the name of the monitor a window is on - xdialog if defined, alpha five main window if not.",
												"arguments": [
													{
														"name": "name",
														"optional": true
													}
												]
											},
											"ui_display_monitor_primary": {
												"description": "Return the name of the primary monitor."
											}
										},
										"l": {
											"__index__": {
												"g": {
													"__index__": {
														"_": {
															"__index__": {
																"b": {
																	"ui_dlg_background_refresh": {
																		"description": "Force xdialogs that have quickdraw backgrounds to regenerate the background.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_box": {
																		"description": "Generic dialog get - display a dialog, returns button push, plus valus in variables.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "dialog_format"
																			},
																			{
																				"name": "code",
																				"optional": true
																			}
																		]
																	}
																},
																"c": {
																	"ui_dlg_card_embed": {
																		"description": "Populate an xdialog card sub-control - returns non-blank string if existing control could not be commited.",
																		"arguments": [
																			{
																				"name": "xdialog"
																			},
																			{
																				"name": "control"
																			},
																			{
																				"name": "cardname"
																			},
																			{
																				"name": "parameters",
																				"optional": true
																			},
																			{
																				"name": "sessiontable",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_card_embed_can_close": {
																		"description": "Query an xdialog card sub-control with a can_close message - empty string returned means no problems, else a 'reason' for failure is retured.",
																		"arguments": [
																			{
																				"name": "xdialog"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_card_embed_close": {
																		"description": "Force a close/commit of embedded card.",
																		"arguments": [
																			{
																				"name": "xdialog"
																			},
																			{
																				"name": "control"
																			},
																			{
																				"name": "commit",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_card_embed_object": {
																		"description": "Query an xdialog card sub-control's object.",
																		"arguments": [
																			{
																				"name": "xdialog"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_card_embed_on_close": {
																		"description": "Register the code to run when the user attempts to close an embedded card.",
																		"arguments": [
																			{
																				"name": "xdialog"
																			},
																			{
																				"name": "control"
																			},
																			{
																				"name": "code"
																			}
																		]
																	},
																	"ui_dlg_column_adjust": {
																		"description": "Adjust resizable column size in column format.",
																		"arguments": [
																			{
																				"name": "column_format"
																			},
																			{
																				"name": "column_number"
																			},
																			{
																				"name": "size_adjust"
																			}
																		]
																	},
																	"ui_dlg_commit": {
																		"description": "Force dialog to commit contents.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_control_anchor_from_pos": {
																		"description": "Get a control anchor from a position - if position is ommitted, use mouse cursor position.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			},
																			{
																				"name": "x",
																				"optional": true
																			},
																			{
																				"name": "y",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_control_commit": {
																		"description": "Commit the contents of a specific xdialog control.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_control_embedded_get": {
																		"description": "Get name of embedded xdialog given parent dialog and control.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_control_from_pos": {
																		"description": "Get the control from a position - if position is ommitted, use mouse cursor position.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			},
																			{
																				"name": "x",
																				"optional": true
																			},
																			{
																				"name": "y",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_control_item_get": {
																		"description": "Get override settings via tag (requires control preceded by {tag=}).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "tag"
																			}
																		]
																	},
																	"ui_dlg_control_item_set": {
																		"description": "Set override settings via tag (requires control preceded by {tag=}) D-disable E:enable C:checked U:unchecked X:clear.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "tag"
																			},
																			{
																				"name": "flags"
																			}
																		]
																	},
																	"ui_dlg_control_popup": {
																		"description": "Popup a control in an owner draw list",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			},
																			{
																				"name": "area"
																			},
																			{
																				"name": "definition"
																			}
																		]
																	},
																	"ui_dlg_create": {
																		"description": "Create an invisible modeless dialog (which can be later shown).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "format"
																			},
																			{
																				"name": "code",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_ctl_current": {
																		"description": "Get the definition of the current control in the named dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_ctl_goto": {
																		"description": "Goto a control in the open dialog, return TRUE if succeeded.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_ctl_visible": {
																		"description": "Returns true if  the control is visible.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			}
																		]
																	}
																},
																"d": {
																	"ui_dlg_dock": {
																		"description": "Dock an xdialog.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			}
																		]
																	},
																	"ui_dlg_dock_topology": {
																		"description": "Return docking bar topology."
																	},
																	"ui_dlg_docked_panel_dock": {
																		"description": "Dock a source dialog to a target (using container for optional target).",
																		"arguments": [
																			{
																				"name": "target_dialog"
																			},
																			{
																				"name": "source_dialog"
																			},
																			{
																				"name": "panel",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_docked_panel_undock": {
																		"description": "Tear off current panel from dialog.",
																		"arguments": [
																			{
																				"name": "dialog"
																			},
																			{
																				"name": "panel",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_docked_state_end": {
																		"description": "Finish docking dialogs with respect to a particular layout."
																	},
																	"ui_dlg_docked_state_get": {
																		"description": "Get the current state of all dockable control bars, combines optional old state information if old windows are missing from new saved definition.",
																		"arguments": [
																			{
																				"name": "old_state",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_docked_state_group": {
																		"description": "return XML for groups.",
																		"arguments": [
																			{
																				"name": "group"
																			},
																			{
																				"name": "panels"
																			}
																		]
																	},
																	"ui_dlg_docked_state_position": {
																		"description": "Returns docked position information for a controlbar given docked state information.",
																		"arguments": [
																			{
																				"name": "name"
																			},
																			{
																				"name": "state"
																			}
																		]
																	},
																	"ui_dlg_docked_state_set": {
																		"description": "Set the current state of all dockable control bars.",
																		"arguments": [
																			{
																				"name": "state"
																			}
																		]
																	},
																	"ui_dlg_docked_state_start": {
																		"description": "Start docking dialogs with respect to a particular laoput.",
																		"arguments": [
																			{
																				"name": "state"
																			}
																		]
																	},
																	"ui_dlg_docking_listener_add": {
																		"description": "Expression get evaluated after user docks or undocks, Name lets user remove the listener.",
																		"arguments": [
																			{
																				"name": "name"
																			},
																			{
																				"name": "expression"
																			}
																		]
																	},
																	"ui_dlg_docking_listener_drop": {
																		"description": "Remove a registered docking listener.",
																		"arguments": [
																			{
																				"name": "name"
																			}
																		]
																	},
																	"ui_dlg_dom": {
																		"description": "Get the document object model for the xdialog.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			}
																		]
																	},
																	"ui_dlg_drag_text_get": {
																		"description": "Get the text for a drag event."
																	},
																	"ui_dlg_drag_text_set": {
																		"description": "Set the text in response to drag/drop event.",
																		"arguments": [
																			{
																				"name": "text"
																			}
																		]
																	}
																},
																"e": {
																	"ui_dlg_editor_active": {
																		"description": "Returns if control on xdialog has an open edit control.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_editor_get": {
																		"description": "Returns pointer to open edit control on xdialog.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "control"
																			}
																		]
																	},
																	"ui_dlg_enable": {
																		"description": "Explicitly enable / disable a window (use for asychronous UI).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "enable"
																			}
																		]
																	},
																	"ui_dlg_eval": {
																		"description": "Return the result of an expression evaluated in the context of an xdialog.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "expr"
																			}
																		]
																	},
																	"ui_dlg_eval_valid": {
																		"description": "Tests is an expression is valid in the context of a modeless dialog box",
																		"arguments": [
																			{
																				"name": "dlg_title"
																			},
																			{
																				"name": "expression"
																			}
																		]
																	},
																	"ui_dlg_event": {
																		"description": "Invoke an action event in the named dialog - flags I)mmediate, W)ait for input idle.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "event"
																			},
																			{
																				"name": "flags",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_event_occurred": {
																		"description": "Causes the 'events occured' flag to get incremented - this indicates that there is work for the xdialog processor to do."
																	}
																},
																"h": {
																	"ui_dlg_hdc_render": {
																		"description": "Render xdialog to an HDC - used for printing of xdialogs.",
																		"arguments": [
																			{
																				"name": "hdc"
																			},
																			{
																				"name": "format"
																			},
																			{
																				"name": "flags",
																				"optional": true
																			},
																			{
																				"name": "as",
																				"optional": true
																			},
																			{
																				"name": "as",
																				"optional": true
																			},
																			{
																				"name": "height",
																				"optional": true
																			},
																			{
																				"name": "eventcode",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_help": {
																		"description": "Help for the current dialog box.",
																		"arguments": [
																			{
																				"name": "help_topic",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_hide": {
																		"description": "Hide a dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_hotspot_query": {
																		"description": "Report back information about hotspot (X,Y,W,H,R,B for position & size - I/P modifiers - inch or pixel).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "hotspot"
																			},
																			{
																				"name": "format",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_hotspot_refresh": {
																		"description": "Invalidate window style's hotspot area (if exists).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "hotspot"
																			}
																		]
																	}
																},
																"i": {
																	"ui_dlg_is_active": {
																		"description": "Is the dialog active (focus on dialog or parent).",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_is_maximized": {
																		"description": "Returns true if the named xdialog is maximized.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_is_minimized": {
																		"description": "Returns true if the named xdialog is minimized.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	}
																},
																"m": {
																	"ui_dlg_maximize": {
																		"description": "Maximize a dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_minimize": {
																		"description": "Minimize a dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_modal": {
																		"description": "Make a modeless dialog behave like a modal dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_move": {
																		"description": "Move a dialog to a new location.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "x"
																			},
																			{
																				"name": "y"
																			}
																		]
																	}
																},
																"n": {
																	"ui_dlg_navigate": {
																		"description": "Move to a different control - directions are 'next' and 'prev'.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "direction"
																			}
																		]
																	},
																	"ui_dlg_navigation": {
																		"description": "Determine what control would be navigated to by a command.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			},
																			{
																				"name": "navigate"
																			},
																			{
																				"name": "control",
																				"optional": true
																			}
																		]
																	}
																},
																"o": {
																	"ui_dlg_object_get": {
																		"description": "Returns a pointer to the '.object' that would normally be filled in for a control.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "ctldef"
																			}
																		]
																	},
																	"ui_dlg_optional_event": {
																		"description": "Invoke an action event in the named dialog, but only if named dialog exists.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "event"
																			},
																			{
																				"name": "immediate",
																				"optional": true
																			}
																		]
																	}
																},
																"p": {
																	"ui_dlg_panel": {
																		"description": "Create an xdialog panel - this is an xdialog that lives in a panel - and doesn't need to exist to honor automation.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "dialog"
																			},
																			{
																				"name": "code",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_panel_destroy": {
																		"description": "Destroy a panel definition.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_panel_name": {
																		"description": "Returns the name of the panel being loaded."
																	},
																	"ui_dlg_parent_get": {
																		"description": "Return the name of dialogs parent (if the named dialog has a parent).",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	}
																},
																"q": {
																	"ui_dlg_query": {
																		"description": "Return dialogs and/or panels that match the criteria.",
																		"arguments": [
																			{
																				"name": "criteria"
																			},
																			{
																				"name": "output",
																				"optional": true
																			}
																		]
																	}
																},
																"r": {
																	"ui_dlg_refresh": {
																		"description": "Refresh the contents of the named dialog box, optional flag allows call to return *before* refresh is ever done.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "asynchronous",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_refresh_targeted": {
																		"description": "Refresh a dialogs controls that match vars - ommit the control def.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "vars"
																			},
																			{
																				"name": "ommit",
																				"optional": true
																			},
																			{
																				"name": "asynchronous",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_remembered_clear": {
																		"description": "Clear any remembered alignment/size/position data.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_remembered_get": {
																		"description": "Retrieve any remembered alignment/size/position data.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "format",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_resize": {
																		"description": "Cause a sizable dialog to be resized - width or height of -1 means keep old size for width or height.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "width"
																			},
																			{
																				"name": "height"
																			}
																		]
																	},
																	"ui_dlg_return": {
																		"description": "Return a value to a return handler (i.e. modal xdialog context).",
																		"arguments": [
																			{
																				"name": "returnvalue"
																			}
																		]
																	}
																},
																"s": {
																	"ui_dlg_section_expand": {
																		"description": "Expand a section (left_#,right_#,top_# or bottom_#).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "section"
																			},
																			{
																				"name": "expand"
																			}
																		]
																	},
																	"ui_dlg_section_expanded": {
																		"description": "Return if the section is expanded.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "section"
																			}
																		]
																	},
																	"ui_dlg_session_refresh_expr": {
																		"description": "Set condition to limit auto-external refresh for a session.",
																		"arguments": [
																			{
																				"name": "expr"
																			},
																			{
																				"name": "session",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_session_refresh_result": {
																		"description": "Get the result of the current ambient session auto-external refresh.",
																		"arguments": [
																			{
																				"name": "session",
																				"optional": true
																			}
																		]
																	},
																	"ui_dlg_set_style": {
																		"description": "Sets default styling (color scheme/fonts) for a dialog (if title not empty) or all UI (if title is blank).",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "cssstyle"
																			}
																		]
																	},
																	"ui_dlg_show": {
																		"description": "Show a dialog.",
																		"arguments": [
																			{
																				"name": "title"
																			}
																		]
																	},
																	"ui_dlg_size_to_content": {
																		"description": "Resizes xdialog that contains an htmlHost area to the best-fit size of the HTML.  size_to_options:- 'W'-keep width.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			},
																			{
																				"name": "size_to_options",
																				"optional": true
																			}
																		]
																	}
																},
																"t": {
																	"ui_dlg_to_html": {
																		"description": "Convert an xdialog format to dependency map and HTML.",
																		"arguments": [
																			{
																				"name": "dialog_format"
																			},
																			{
																				"name": "controlmap",
																				"optional": true
																			},
																			{
																				"name": "asxml",
																				"optional": true
																			}
																		]
																	}
																},
																"u": {
																	"ui_dlg_undock": {
																		"description": "Undock an xdialog.",
																		"arguments": [
																			{
																				"name": "dialog_name"
																			}
																		]
																	}
																}
															}
														}
													}
												}
											}
										},
										"o": {
											"ui_dock_panel_show": {
												"description": "Show/hide a panel (if showing, open in a new portal, if hide - close open portal) optional edge overrides the default.",
												"arguments": [
													{
														"name": "panelname"
													},
													{
														"name": "visible"
													},
													{
														"name": "onedge",
														"optional": true
													}
												]
											},
											"ui_dock_panel_visible": {
												"description": "Returns TRUE if dock panel is visible.",
												"arguments": [
													{
														"name": "panelname"
													}
												]
											},
											"ui_dock_update_void_locks": {
												"description": "Release any pending user interfaces lock - entering a script modal section."
											}
										}
									}
								},
								"e": {
									"ui_edit_code": {
										"description": "Prompt for a some Xbasic code. Mode: 0 - don't validate code, 1 - warn if error, 2 - require code to be free of errors",
										"arguments": [
											{
												"name": "string"
											},
											{
												"name": "title",
												"optional": true
											},
											{
												"name": "showinteractivewindow",
												"optional": true
											},
											{
												"name": "mode",
												"optional": true
											}
										]
									},
									"ui_editor_active": {
										"description": "Returns TRUE if an editor is active."
									},
									"ui_editor_command": {
										"description": "Execute or query editor commands (EDIT_COPY,EDIT_PASTE etc).",
										"arguments": [
											{
												"name": "command"
											}
										]
									},
									"ui_editor_get": {
										"description": "Get an object pointer to the currently open (with focus) editor."
									},
									"ui_editor_parent": {
										"description": "Returns Parent CR-LF delimited list windows."
									},
									"ui_expand_branches": {
										"description": "Expand branches - lines containing {=<expr>} get expanded to include lines generated.",
										"arguments": [
											{
												"name": "branches"
											}
										]
									}
								},
								"f": {
									"ui_freeze": {
										"description": "Turns off/on screen repainting.",
										"arguments": [
											{
												"name": "freeze_screen"
											}
										]
									}
								},
								"g": {
									"__index__": {
										"e": {
											"__index__": {
												"n": {
													"ui_generate_quick_draw": {
														"description": "Evaluate alpha five GDI calls, but generate quickdraw code from the code.",
														"arguments": [
															{
																"name": "drawing_code"
															}
														]
													}
												},
												"t": {
													"__index__": {
														"_": {
															"__index__": {
																"c": {
																	"ui_get_check": {
																		"description": "Prompt user for settings to a list of logical properties.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default_choice"
																			},
																			{
																				"name": "choice1"
																			},
																			{
																				"name": "choice",
																				"optional": true
																			},
																			{
																				"name": "...",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_check2": {
																		"description": "Dislay a multi-column list of choices, allowing a user to select entries by checking entries.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "selected"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "headingtext",
																				"optional": true
																			},
																			{
																				"name": "hasselectalllink",
																				"optional": true
																			},
																			{
																				"name": "hasunselectalllink",
																				"optional": true
																			},
																			{
																				"name": "haswildcardselectlink",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "height",
																				"optional": true
																			},
																			{
																				"name": "flagreturnvaluesinselectionorder",
																				"optional": true
																			},
																			{
																				"name": "scrollingmode",
																				"optional": true
																			},
																			{
																				"name": "resizeable",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_check2p": {
																		"description": "Dislay a multi-column list of choices, allowing a user to select entries by checking entries. Returns .lastbutton, .selected, .selected_in_selection_order",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "selected"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "headingtext",
																				"optional": true
																			},
																			{
																				"name": "hasselectalllink",
																				"optional": true
																			},
																			{
																				"name": "hasunselectalllink",
																				"optional": true
																			},
																			{
																				"name": "haswildcardselectlink",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "height",
																				"optional": true
																			},
																			{
																				"name": "scrollingmode",
																				"optional": true
																			},
																			{
																				"name": "resizeable",
																				"optional": true
																			},
																			{
																				"name": "xbinitialize",
																				"optional": true
																			},
																			{
																				"name": "opsin",
																				"optional": true
																			}
																		]
																	}
																},
																"d": {
																	"ui_get_date": {
																		"description": "Prompt user for date.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "prompt"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_date_calendar": {
																		"description": "Prompts for a date by displaying a popup-calendar.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default_date"
																			},
																			{
																				"name": "style",
																				"optional": true
																			}
																		]
																	}
																},
																"e": {
																	"ui_get_email_templates": {
																		"description": "Prompt for the name of an e-mail template. External = .t. shows templates in text files. Default shows templates in dictionary.",
																		"arguments": [
																			{
																				"name": "external",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_expression": {
																		"description": "Prompts for an expression. If table_set_name is not specified, current table/set is used. Table_set_name can be a crlf delimited list of tables.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "prompt",
																				"optional": true
																			},
																			{
																				"name": "default",
																				"optional": true
																			},
																			{
																				"name": "type",
																				"optional": true
																			},
																			{
																				"name": "table_set_name",
																				"optional": true
																			}
																		]
																	}
																},
																"f": {
																	"ui_get_fieldname": {
																		"description": "Prompts for a fieldname in the specified table or set. If table/set not specified, current table/set is used.",
																		"arguments": [
																			{
																				"name": "table_set_name",
																				"optional": true
																			},
																			{
																				"name": "default_fieldname",
																				"optional": true
																			},
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "field_types",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_file": {
																		"description": "Prompt user for filename.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "file_types"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "exist_flag",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_files_multiple": {
																		"description": "Select multiple files. Returns a CRLF delimited list.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "default_directory",
																				"optional": true
																			},
																			{
																				"name": "file_filter",
																				"optional": true
																			},
																			{
																				"name": "default_file_list",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_filter": {
																		"description": "Prompts for a filter expression. If table_set_name is not specified, current table/set is used. Table_set_name can be a crlf delimited list of tables.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "prompt",
																				"optional": true
																			},
																			{
																				"name": "default",
																				"optional": true
																			},
																			{
																				"name": "table_set_name",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_folder": {
																		"description": "Prompts for the name of a folder using the standard Windows control",
																		"arguments": [
																			{
																				"name": "folder",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_font": {
																		"description": "Prompt the user for a font. Returns the font name selected. If Styles = .t. then prompts for text style.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "font",
																				"optional": true
																			},
																			{
																				"name": "styles",
																				"optional": true
																			},
																			{
																				"name": "generate_expression",
																				"optional": true
																			},
																			{
																				"name": "tables",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_fontname": {
																		"description": "Prompt for a fontname",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "default_font",
																				"optional": true
																			},
																			{
																				"name": "style",
																				"optional": true
																			}
																		]
																	}
																},
																"i": {
																	"ui_get_image_filename": {
																		"arguments": [
																			{
																				"name": "filename",
																				"optional": true
																			},
																			{
																				"name": "imagetype",
																				"optional": true
																			}
																		]
																	}
																},
																"k": {
																	"ui_get_key": {
																		"description": "Find by key. Type 1 = index name, Type 2 = any expression.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "prompt",
																				"optional": true
																			},
																			{
																				"name": "type",
																				"optional": true
																			},
																			{
																				"name": "expression_or_index_name",
																				"optional": true
																			},
																			{
																				"name": "imagename",
																				"optional": true
																			}
																		]
																	}
																},
																"l": {
																	"ui_get_layout_name": {
																		"description": "Prompt for a Layout name. Shows layouts for specified table/set. Type is 'all', or a comma delimited list of types. e.g. 'report,label'",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "table_set_name"
																			},
																			{
																				"name": "layout_types",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_list": {
																		"description": "Prompt user for selection from list.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default_choice"
																			},
																			{
																				"name": "choice1"
																			},
																			{
																				"name": "choice",
																				"optional": true
																			},
																			{
																				"name": "...",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_list2": {
																		"description": "Prompts user for selection from a CR-LF delimited list of choices. Style: 1 = single select, 2 = multi-select (click item to select), 3 = multi-select (Shift+Click, Ctrl+Click and Drag are supported)",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "preserve_selection_order",
																				"optional": true
																			},
																			{
																				"name": "flagownerdraw",
																				"optional": true
																			},
																			{
																				"name": "headingtext",
																				"optional": true
																			},
																			{
																				"name": "height",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "flagallowfilter",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_list2p": {
																		"description": "Prompts user for selection from a CR-LF delimited list of choices. Style: 1 = single select, 2 = multi-select (click item to select), 3 = multi-select (Shift+Click, Ctrl+Click and Drag are supported). Same as ui_get_list2(), but returns a pointer with .lastbutton and .selection properties.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "preserve_selection_order",
																				"optional": true
																			},
																			{
																				"name": "flagownerdraw",
																				"optional": true
																			},
																			{
																				"name": "headingtext",
																				"optional": true
																			},
																			{
																				"name": "height",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "allowfilter",
																				"optional": true
																			},
																			{
																				"name": "allowresize",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_list_array": {
																		"description": "Prompt user for selection from list.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default_choice"
																			},
																			{
																				"name": "array_name"
																			}
																		]
																	}
																},
																"n": {
																	"ui_get_number": {
																		"description": "Prompt user for number.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "prompt"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "format_string",
																				"optional": true
																			}
																		]
																	}
																},
																"o": {
																	"ui_get_object_name": {
																		"description": "Prompt for the name of an object on the current form.",
																		"arguments": [
																			{
																				"name": "default_value",
																				"optional": true
																			},
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "classlist",
																				"optional": true
																			},
																			{
																				"name": "formname",
																				"optional": true
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			},
																			{
																				"name": "return_class_info",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_operation": {
																		"description": "Displays a dialog box showing names of specified Operation type.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "operation_type"
																			},
																			{
																				"name": "table_set_name",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_order": {
																		"description": "Prompts for an order expression. If table_set_name is not specified, current table/set is used. Table_set_name can be a crlf delimited list of tables.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "prompt",
																				"optional": true
																			},
																			{
																				"name": "default",
																				"optional": true
																			},
																			{
																				"name": "table_set_name",
																				"optional": true
																			}
																		]
																	}
																},
																"p": {
																	"ui_get_parameters": {
																		"description": "Public user defined function.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "parameters",
																				"optional": true
																			},
																			{
																				"name": "ok_button",
																				"optional": true
																			},
																			{
																				"name": "cancel_button",
																				"optional": true
																			},
																			{
																				"name": "show_code",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_parameters_local": {
																		"description": "Public user defined function.",
																		"arguments": [
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "parameters",
																				"optional": true
																			},
																			{
																				"name": "ok_button",
																				"optional": true
																			},
																			{
																				"name": "cancel_button",
																				"optional": true
																			},
																			{
																				"name": "namespace",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_password": {
																		"description": "Prompts for a password",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "prompt"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "password_character",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_path": {
																		"description": "Prompt user for a file path. (TIP: Use ui_get_folder() for the standard Windows control) If drive_list is blank, shows all drives. Drive_list is a semi-colon delimited list of drives. TIP: You can also use ui_browse_for_folder() to use the standard Windows control.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "drive_list"
																			},
																			{
																				"name": "default"
																			}
																		]
																	},
																	"ui_get_print_or_preview": {
																		"description": "Displays a dialog to prompt user if layout should be printed or previewed.",
																		"arguments": [
																			{
																				"name": "default",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_property_name": {
																		"description": "Prompts for the name of property of a specified object",
																		"arguments": [
																			{
																				"name": "objectname"
																			},
																			{
																				"name": "default_value",
																				"optional": true
																			},
																			{
																				"name": "title",
																				"optional": true
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			}
																		]
																	}
																},
																"q": {
																	"ui_get_query_name": {
																		"description": "Prompts for the name of a saved Query operation.",
																		"arguments": [
																			{
																				"name": "table_set_name"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "style",
																				"optional": true
																			},
																			{
																				"name": "title",
																				"optional": true
																			}
																		]
																	}
																},
																"r": {
																	"ui_get_radio": {
																		"description": "Prompt user for selection from radio button.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default_choice"
																			},
																			{
																				"name": "choice1"
																			},
																			{
																				"name": "choice",
																				"optional": true
																			},
																			{
																				"name": "...",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_radio2": {
																		"description": "Prompts user for selection from a CR-LF delimited list of choices.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "frametitle",
																				"optional": true
																			},
																			{
																				"name": "emptyoncancel",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_radio2p": {
																		"description": "Prompts user for selection from a CR-LF delimited list of choices.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "default"
																			},
																			{
																				"name": "choices"
																			},
																			{
																				"name": "frametitle",
																				"optional": true
																			},
																			{
																				"name": "width",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_range": {
																		"description": "Prompts for a range for the current table/set.",
																		"arguments": [
																			{
																				"name": "top_level_only",
																				"optional": true
																			},
																			{
																				"name": "flag_external_tableset",
																				"optional": true
																			},
																			{
																				"name": "external_tableset_name",
																				"optional": true
																			}
																		]
																	}
																},
																"s": {
																	"ui_get_short_time": {
																		"description": "Prompts for a short time.",
																		"arguments": [
																			{
																				"name": "dlgtitle"
																			},
																			{
																				"name": "time"
																			},
																			{
																				"name": "clockconnecthands",
																				"optional": true
																			},
																			{
																				"name": "clockhoursnap",
																				"optional": true
																			},
																			{
																				"name": "clockminutesnap",
																				"optional": true
																			},
																			{
																				"name": "clockshownumericinput",
																				"optional": true
																			}
																		]
																	}
																},
																"t": {
																	"ui_get_text": {
																		"description": "Prompt user for text.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "prompt"
																			},
																			{
																				"name": "default_choice",
																				"optional": true
																			},
																			{
																				"name": "format_string",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_text2": {
																		"description": "Same as ui_get_text() but returns two properties: .value and .lastbutton (ok, or cancel). If you pass in choices, an edit-combo control is sued.",
																		"arguments": [
																			{
																				"name": "title"
																			},
																			{
																				"name": "caption_text"
																			},
																			{
																				"name": "default_string",
																				"optional": true
																			},
																			{
																				"name": "format_string",
																				"optional": true
																			},
																			{
																				"name": "size",
																				"optional": true
																			},
																			{
																				"name": "maxcharacters",
																				"optional": true
																			},
																			{
																				"name": "choices",
																				"optional": true
																			},
																			{
																				"name": "flagmultiline",
																				"optional": true
																			}
																		]
																	},
																	"ui_get_time": {
																		"description": "Prompts for a full time value (date and time).",
																		"arguments": [
																			{
																				"name": "dlgtitle"
																			},
																			{
																				"name": "time"
																			},
																			{
																				"name": "usecalendardropdowns",
																				"optional": true
																			},
																			{
																				"name": "connectclockhands",
																				"optional": true
																			},
																			{
																				"name": "hoursnap",
																				"optional": true
																			},
																			{
																				"name": "minutesnap",
																				"optional": true
																			}
																		]
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								},
								"h": {
									"ui_hdc_draw": {
										"description": "Render to a raw HDC - pagination flag is set to eject a page if rendering to a printer.",
										"arguments": [
											{
												"name": "drawing_code"
											},
											{
												"name": "hdc"
											},
											{
												"name": "pagination",
												"optional": true
											}
										]
									},
									"ui_hotspot_from_map": {
										"description": "Converts an HTML image map to a ui_hotspots list.",
										"arguments": [
											{
												"name": "imagemap"
											},
											{
												"name": "attribute",
												"optional": true
											}
										]
									},
									"ui_hotspot_get": {
										"description": "Return a hotspot from a hotspot list based on position.",
										"arguments": [
											{
												"name": "hotspots"
											},
											{
												"name": "as"
											},
											{
												"name": "as"
											}
										]
									},
									"ui_html_msg_box": {
										"description": " Display a message box that supports HTML text.  Width and Height are in inches by default.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "html_message"
											},
											{
												"name": "box_style",
												"optional": true
											},
											{
												"name": "width",
												"optional": true
											},
											{
												"name": "height",
												"optional": true
											},
											{
												"name": "indented",
												"optional": true
											},
											{
												"name": "usewin3dbg",
												"optional": true
											},
											{
												"name": "width_units",
												"optional": true
											},
											{
												"name": "height_units",
												"optional": true
											},
											{
												"name": "dlg_bg_color",
												"optional": true
											}
										]
									}
								},
								"i": {
									"ui_icon_handle": {
										"description": "Get GDI icon handle for named bitmap.",
										"arguments": [
											{
												"name": "name"
											}
										]
									},
									"ui_info": {
										"description": "Get information about the user interface.",
										"arguments": [
											{
												"name": "option"
											}
										]
									},
									"ui_info_dlg_def_client_height": {
										"description": "Get the height of the client area of a dialog in inches based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_client_width": {
										"description": "Get the width of the client area of a of the dialog in inches based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_conditions": {
										"description": "Get the conditions for the dialog based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_controls_get": {
										"description": "Gets ui_dialog control information - i.e. positioning & settings.",
										"arguments": [
											{
												"name": "dialog_format"
											},
											{
												"name": "controls"
											}
										]
									},
									"ui_info_dlg_def_events": {
										"description": "Get the events for the dialog based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_height": {
										"description": "Get the height of the dialog in inches based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_lists": {
										"description": "Get the lists for the dialog based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_tooltip_get": {
										"description": "Extracts the tooltip definition from a xdialog format for the named control.",
										"arguments": [
											{
												"name": "dialog_format"
											},
											{
												"name": "control"
											}
										]
									},
									"ui_info_dlg_def_vars": {
										"description": "Get the variables for the dialog based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									},
									"ui_info_dlg_def_width": {
										"description": "Get the width of the dialog in inches based on a dialog definition.",
										"arguments": [
											{
												"name": "dialog_format"
											}
										]
									}
								},
								"k": {
									"ui_keycode_normalize": {
										"description": "Normalize friendly keycodes (all flavors handled by sys_send_keys) into terse form of keycode sent to OnKey events.",
										"arguments": [
											{
												"name": "keycode"
											}
										]
									}
								},
								"m": {
									"ui_menu_commands_get": {
										"description": "Return the end-commands from a menu tree.",
										"arguments": [
											{
												"name": "branches"
											},
											{
												"name": "get_index",
												"optional": true
											}
										]
									},
									"ui_menu_item_get": {
										"description": "Returns the state of the menu item (appended - D=disable E=Enable C=check U=Unchecked X=using default).",
										"arguments": [
											{
												"name": "menu_item_string"
											},
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_menu_item_set": {
										"description": "Override a menu items enable or checked state (flags E=enable D=disable C=checked U=unchecked X=remove overrides).",
										"arguments": [
											{
												"name": "menu_item_string"
											},
											{
												"name": "flags"
											},
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_menu_keys_get": {
										"description": "Return a pairing of keys and commands from a menu tree.",
										"arguments": [
											{
												"name": "branches"
											}
										]
									},
									"ui_modeless_dlg_box": {
										"description": "Create a modeless dialog box - optional script to handle button requests is the third argument.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "dialog_format"
											},
											{
												"name": "code",
												"optional": true
											}
										]
									},
									"ui_modeless_dlg_button": {
										"description": "Return which button is being pressed for the named modeless dialog box, Blank if no button being pressed.",
										"arguments": [
											{
												"name": "title"
											}
										]
									},
									"ui_modeless_dlg_button_reset": {
										"description": "Reset the value of a dialog box button.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "value",
												"optional": true
											}
										]
									},
									"ui_modeless_dlg_close": {
										"description": "Close an named modeless dialog box, returns .T. if dialog was found, .f. if dialog is not open.",
										"arguments": [
											{
												"name": "title"
											}
										]
									},
									"ui_modeless_dlg_exist": {
										"description": "Returns TRUE if named modeless dialog box exists.",
										"arguments": [
											{
												"name": "title"
											}
										]
									},
									"ui_modeless_dlg_hover": {
										"description": "Return the xdialog that is being hovered over if no title, else return control hovered over for specified dialog.",
										"arguments": [
											{
												"name": "title",
												"optional": true
											}
										]
									},
									"ui_modeless_dlg_refresh": {
										"description": "Refresh the contents of the named modeless dialog box.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "asynchronous",
												"optional": true
											}
										]
									},
									"ui_modeless_dlg_setfocus": {
										"description": "Sets focus to the named modeless dialog box.",
										"arguments": [
											{
												"name": "title"
											}
										]
									},
									"ui_modeless_dlg_sizing": {
										"description": "Returns .T. if named dialog is a controlbar whose layout is being determined.",
										"arguments": [
											{
												"name": "title"
											}
										]
									},
									"ui_msg_box": {
										"description": "Inform user with a message box.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "message"
											},
											{
												"name": "box_style",
												"optional": true
											}
										]
									},
									"ui_msg_box_html": {
										"description": " Display a message box that supports HTML text.  Width and Height are in inches by default.",
										"arguments": [
											{
												"name": "title"
											},
											{
												"name": "html_message"
											},
											{
												"name": "box_style",
												"optional": true
											},
											{
												"name": "width",
												"optional": true
											},
											{
												"name": "height",
												"optional": true
											},
											{
												"name": "indented",
												"optional": true
											},
											{
												"name": "usewin3dbg",
												"optional": true
											},
											{
												"name": "width_units",
												"optional": true
											},
											{
												"name": "height_units",
												"optional": true
											},
											{
												"name": "dlg_bg_color",
												"optional": true
											}
										]
									}
								},
								"p": {
									"ui_popup_menu": {
										"description": "Displays a Popup menu based on passed in menu format - can also augment active top level menu.",
										"arguments": [
											{
												"name": "menu_format"
											},
											{
												"name": "code",
												"optional": true
											}
										]
									},
									"ui_popup_menu_height": {
										"description": "Get the height of a popup menu.",
										"arguments": [
											{
												"name": "menubar"
											}
										]
									},
									"ui_popup_menu_width": {
										"description": "Get the width of a popup menu (with optional height restriction).",
										"arguments": [
											{
												"name": "menubar"
											},
											{
												"name": "height_limit",
												"optional": true
											}
										]
									},
									"ui_popup_styled_menu": {
										"description": "Displays a Popup menu that has its own style.",
										"arguments": [
											{
												"name": "menu_format"
											},
											{
												"name": "styles"
											},
											{
												"name": "code",
												"optional": true
											}
										]
									},
									"ui_printer_default_get": {
										"description": "Get the name of the default printer."
									},
									"ui_printer_draw": {
										"description": "Draw to printer page(s) returns status (Cancelled,Completed).",
										"arguments": [
											{
												"name": "printer"
											},
											{
												"name": "document"
											},
											{
												"name": "output_file"
											},
											{
												"name": "drawing_code"
											},
											{
												"name": "show",
												"optional": true
											},
											{
												"name": "settings",
												"optional": true
											}
										]
									},
									"ui_printer_options_get": {
										"description": "Get printer field options.",
										"arguments": [
											{
												"name": "printername"
											},
											{
												"name": "options"
											}
										]
									},
									"ui_printer_properties": {
										"description": "Get/Set specific printer properties through a printer's settings dialog.",
										"arguments": [
											{
												"name": "printer_name"
											},
											{
												"name": "old_properties",
												"optional": true
											}
										]
									},
									"ui_printer_settings_get": {
										"description": "Get settings for printer.",
										"arguments": [
											{
												"name": "printer_name"
											},
											{
												"name": "settings"
											}
										]
									},
									"ui_printers_get": {
										"description": "Get list of printer names."
									},
									"ui_prompt_new_set": {
										"description": "Prompts for the name of a new set.",
										"arguments": [
											{
												"name": "default_name",
												"optional": true
											},
											{
												"name": "warn",
												"optional": true
											}
										]
									},
									"ui_prompt_new_table": {
										"description": "Prompts for the name of a new table.",
										"arguments": [
											{
												"name": "default_name",
												"optional": true
											},
											{
												"name": "warn",
												"optional": true
											}
										]
									}
								},
								"q": {
									"ui_quickdraw_scale": {
										"description": "Scale quickdraw, and optionally translate (add offset) - optionally adjust before scale to change the 'source'.",
										"arguments": [
											{
												"name": "drawing_code"
											},
											{
												"name": "scalex"
											},
											{
												"name": "scaley",
												"optional": true
											},
											{
												"name": "offsetx",
												"optional": true
											},
											{
												"name": "offsety",
												"optional": true
											},
											{
												"name": "adjustx",
												"optional": true
											},
											{
												"name": "adjusty",
												"optional": true
											}
										]
									},
									"ui_quickdraw_to_bitmap": {
										"description": "Create a persisted bitmap binary image from quickdraw code, useful for dynamic swatch icon generation.",
										"arguments": [
											{
												"name": "drawing_code"
											},
											{
												"name": "pixelswide",
												"optional": true
											},
											{
												"name": "pixelshigh",
												"optional": true
											},
											{
												"name": "backcolor",
												"optional": true
											}
										]
									}
								},
								"r": {
									"ui_regex_builder": {
										"description": "A tool for building and testing regular expressions.",
										"arguments": [
											{
												"name": "expression",
												"optional": true
											},
											{
												"name": "regex_type",
												"optional": true
											},
											{
												"name": "regex_syntax",
												"optional": true
											},
											{
												"name": "ignore_case",
												"optional": true
											},
											{
												"name": "test_text",
												"optional": true
											},
											{
												"name": "replacement_string",
												"optional": true
											}
										]
									}
								},
								"s": {
									"ui_screen_draw": {
										"description": "Draw directly to the screen or simply use the context to get metrics.",
										"arguments": [
											{
												"name": "drawing_code"
											}
										]
									},
									"ui_select_color2": {
										"description": "Displays a pallette of system colors in a drop down menu, allowing user to select a color.",
										"arguments": [
											{
												"name": "current_color",
												"optional": true
											}
										]
									},
									"ui_select_script": {
										"description": "Displays a picklist of scripts in dialog or toolbar format. Selected script is executed. Mode: 1= script_play_local(), 2=script_play(), 3= script_spwan()",
										"arguments": [
											{
												"name": "script_list",
												"optional": true
											},
											{
												"name": "title",
												"optional": true
											},
											{
												"name": "rows",
												"optional": true
											},
											{
												"name": "columns",
												"optional": true
											},
											{
												"name": "mode",
												"optional": true
											}
										]
									},
									"ui_select_script_popup": {
										"description": "Displays a popup list of scripts. Selected script is run.",
										"arguments": [
											{
												"name": "script_names"
											},
											{
												"name": "menu_style",
												"optional": true
											}
										]
									},
									"ui_session_editor_active": {
										"description": "Return TRUE if session has an active text editor.",
										"arguments": [
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_session_editor_get": {
										"description": "Return a pointer to the active text editor for a session.",
										"arguments": [
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_session_errors_clear": {
										"description": "Clears ant errors associated with the session.",
										"arguments": [
											{
												"name": "session_handle",
												"optional": true
											}
										]
									},
									"ui_session_errors_exist": {
										"description": "Returns true if errors exist for session.",
										"arguments": [
											{
												"name": "session_handle",
												"optional": true
											}
										]
									},
									"ui_session_errors_get": {
										"description": "Returns the errors defined for the session.",
										"arguments": [
											{
												"name": "session_handle",
												"optional": true
											}
										]
									},
									"ui_shape_destroy": {
										"description": "Destroy a shape.",
										"arguments": [
											{
												"name": "shape"
											}
										]
									},
									"ui_shape_lineto": {
										"description": "Continue defining a polygon shape.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											}
										]
									},
									"ui_shape_oval": {
										"description": "Create/modify a named shape with an oval.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											},
											{
												"name": "width"
											},
											{
												"name": "height"
											},
											{
												"name": "shape_operation",
												"optional": true
											}
										]
									},
									"ui_shape_poly": {
										"description": "End defining a polygon shape.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											},
											{
												"name": "shape_operation",
												"optional": true
											}
										]
									},
									"ui_shape_rect": {
										"description": "Create/modify a named shape with a rectangle.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											},
											{
												"name": "width"
											},
											{
												"name": "height"
											},
											{
												"name": "shape_operation",
												"optional": true
											}
										]
									},
									"ui_shape_round_rect": {
										"description": "Create/modify a named shape with a rounded rect.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											},
											{
												"name": "width"
											},
											{
												"name": "height"
											},
											{
												"name": "corner_width"
											},
											{
												"name": "corner_height"
											},
											{
												"name": "shape_operation",
												"optional": true
											}
										]
									},
									"ui_shape_start_poly": {
										"description": "Start defining a polygon shape.",
										"arguments": [
											{
												"name": "shape"
											},
											{
												"name": "x"
											},
											{
												"name": "y"
											}
										]
									},
									"ui_show_image": {
										"description": "Displays a jpeg or bmp image. If filename is null, A5 prompts. Stype is 'Best Fit', 'Absolute' or 'Stretch'",
										"arguments": [
											{
												"name": "filename"
											},
											{
												"name": "title",
												"optional": true
											},
											{
												"name": "x",
												"optional": true
											},
											{
												"name": "y",
												"optional": true
											},
											{
												"name": "style",
												"optional": true
											}
										]
									},
									"ui_status_info_get": {
										"description": "Returns Statusbar quickdraw based on selected sections.",
										"arguments": [
											{
												"name": "sections"
											}
										]
									},
									"ui_statusbar_draw": {
										"description": "Draw directly to the statusbars first 'pane'- if optional background flag is set, we draw the background for any new status messages.",
										"arguments": [
											{
												"name": "drawing_code"
											},
											{
												"name": "background",
												"optional": true
											}
										]
									},
									"ui_statusbar_format": {
										"description": "Sets statuss bar format.",
										"arguments": [
											{
												"name": "name"
											},
											{
												"name": "sections",
												"optional": true
											}
										]
									}
								},
								"t": {
									"ui_toolbar": {
										"description": "Display a picklist of scripts in the form of a toolbar.",
										"arguments": [
											{
												"name": "script_names"
											},
											{
												"name": "title",
												"optional": true
											},
											{
												"name": "has_tabs",
												"optional": true
											}
										]
									},
									"ui_top_branch": {
										"description": "Get just the top branch of a tree (or menu). branchformat: I=Item,N=number,K=kids.",
										"arguments": [
											{
												"name": "branches"
											},
											{
												"name": "branchformat",
												"optional": true
											}
										]
									},
									"ui_top_menu": {
										"description": "Displays menu in main window, provide action code - if no arguments, then switch to 'no' menu.",
										"arguments": [
											{
												"name": "menu_format",
												"optional": true
											},
											{
												"name": "code",
												"optional": true
											},
											{
												"name": "menu_context",
												"optional": true
											}
										]
									},
									"ui_top_menu_command": {
										"description": "Send a command to the current top menu's command handler.",
										"arguments": [
											{
												"name": "menu_command"
											},
											{
												"name": "session",
												"optional": true
											}
										]
									},
									"ui_top_menu_height": {
										"description": "Get the height of a top menu (with optional width restriction).",
										"arguments": [
											{
												"name": "menubar"
											},
											{
												"name": "width_limit",
												"optional": true
											}
										]
									},
									"ui_top_menu_hotkeys": {
										"description": "Register an invisible key handler - menu that exists only to process keys.",
										"arguments": [
											{
												"name": "menubar",
												"optional": true
											},
											{
												"name": "code",
												"optional": true
											},
											{
												"name": "from_dialog",
												"optional": true
											}
										]
									},
									"ui_top_menu_hotkeys_restore": {
										"description": "Restore hotkeys that were saved (throws away any new ones that were defined)."
									},
									"ui_top_menu_hotkeys_save": {
										"description": "Save hotkeys because we are going to override the hotkeys with a dialog context."
									},
									"ui_top_menu_need_buttons": {
										"description": "Returns true of top menu needs to display buttons."
									},
									"ui_top_menu_width": {
										"description": "Get the width of a top menu.",
										"arguments": [
											{
												"name": "menubar"
											}
										]
									},
									"ui_transient_message": {
										"description": "Displays a transient message. The message automatically closes after the specified duration. Default is 1 second. ",
										"arguments": [
											{
												"name": "message"
											},
											{
												"name": "title",
												"optional": true
											},
											{
												"name": "duration",
												"optional": true
											}
										]
									}
								},
								"u": {
									"ui_util_menu_data_decode": {
										"description": "Decode embedded menu DATA.",
										"arguments": [
											{
												"name": "string"
											}
										]
									},
									"ui_util_menu_data_encode": {
										"description": "Encode embedded menu DATA.",
										"arguments": [
											{
												"name": "string"
											}
										]
									}
								},
								"w": {
									"ui_wait_until": {
										"description": "Exactly like WAIT_UNTIL function, except it processes pending UI *before* if goes into a wait loop.  This should be used when condition is ui bound (i.e. while xdialog exists).",
										"arguments": [
											{
												"name": "event"
											},
											{
												"name": "every",
												"optional": true
											},
											{
												"name": "timeout",
												"optional": true
											}
										]
									}
								},
								"y": {
									"ui_yield": {
										"description": "Let windows process messages."
									}
								}
							}
						}
					}
				},
				"n": {
					"un_paren": {
						"description": "Removes unnecessary enclosing parentheses from an expression. If paren are unbalanced, returns string",
						"arguments": [
							{
								"name": "string"
							}
						]
					},
					"unique_key_value": {
						"description": "When used in a filter expression, return only unique values for key."
					},
					"uniquenameget": {
						"description": "Takes a CRLF delimited list of existing names and a suggested name and increments a counter at end of suggested name until it is unique.",
						"arguments": [
							{
								"name": "existing"
							},
							{
								"name": "suggested"
							},
							{
								"name": "flagaddsuffix",
								"optional": true
							},
							{
								"name": "flagignoreextension",
								"optional": true
							}
						]
					},
					"uniquenamesget": {
						"description": "takes a crlf delimited list of strings and returns a list of unique values",
						"arguments": [
							{
								"name": "existingnames"
							},
							{
								"name": "suggestednamelist"
							}
						]
					},
					"unixtimestamp_to_time": {
						"description": "Converts a Unix timestamp number (seconds since 1970-1-1) to a time value",
						"arguments": [
							{
								"name": "timestamp"
							}
						]
					},
					"unload_library": {
						"description": "Unload libary of level 0-255 - removes the functions/bitmaps etc from memory.",
						"arguments": [
							{
								"name": "library_level"
							}
						]
					},
					"unmask": {
						"description": "Extract characters that match placeholder space charaters of template.",
						"arguments": [
							{
								"name": "string"
							},
							{
								"name": "template"
							}
						]
					},
					"unquote": {
						"description": "Remove quotes from a string.",
						"arguments": [
							{
								"name": "string"
							}
						]
					},
					"unquote2": {
						"description": "Removes wrapping quotes and converts escaped quotes to simple quotes.",
						"arguments": [
							{
								"name": "source"
							}
						]
					},
					"unzip_files": {
						"description": "Unzips files in a zip file. This high level function is a wrapper around the low level file.unzip() method.",
						"arguments": [
							{
								"name": "zipfile"
							},
							{
								"name": "mask",
								"optional": true
							},
							{
								"name": "destination_folder",
								"optional": true
							},
							{
								"name": "preserve_paths",
								"optional": true
							}
						]
					}
				},
				"p": {
					"upper": {
						"description": "Converts a character string to uppercase.",
						"arguments": [
							{
								"name": "character"
							}
						]
					},
					"ups_delivery_status": {
						"description": "Contacts the UPS web site and looks up the status of the specified tracking number",
						"arguments": [
							{
								"name": "tracking_num"
							}
						]
					}
				},
				"r": {
					"urldecode": {
						"description": "Decodes text that has been urlencoded.",
						"arguments": [
							{
								"name": "url"
							}
						]
					},
					"urlencode": {
						"description": "Encodes text so that it can be safely used as part of a URL, flags 'u' - uppercase, 's' - allow spaces, 'o' - oauth compatible.",
						"arguments": [
							{
								"name": "url"
							},
							{
								"name": "flags",
								"optional": true
							}
						]
					}
				},
				"s": {
					"user_dictionary_add": {
						"description": "Add a CR-LF delimted list of words to the User-defined spellchecker dictionary.",
						"arguments": [
							{
								"name": "word_list_to_add"
							}
						]
					},
					"user_dictionary_delete": {
						"description": "Delete a CR-LF delimted list of words to the User-defined spellchecker dictionary.",
						"arguments": [
							{
								"name": "word_list_to_delete"
							}
						]
					},
					"user_groups": {
						"description": "Returns the name of the groups that the current logged on user is a member of."
					},
					"user_name": {
						"description": "Returns the name of the current logged on user."
					},
					"user_variables_enum": {
						"description": "Return a list of user variables.",
						"arguments": [
							{
								"name": "variables"
							}
						]
					},
					"usps_city_from_zip": {
						"description": "Contacts the USPS web site and looks up the city for the specified 5 digit zip code.",
						"arguments": [
							{
								"name": "zip5"
							}
						]
					},
					"usps_citystate_from_zip": {
						"description": "Contacts the USPS web site and looks up the city and state for the specified 5 digit zip code.",
						"arguments": [
							{
								"name": "zip5"
							}
						]
					},
					"usps_delivery_status": {
						"description": "Contacts the USPS web site and looks up the status of the specified Delivery Confirmation number",
						"arguments": [
							{
								"name": "confirmation_number"
							}
						]
					},
					"usps_state_from_zip": {
						"description": "Contacts the USPS web site and looks up the state for the specified 5 digit zip code.",
						"arguments": [
							{
								"name": "zip5"
							}
						]
					},
					"usps_zipcode_lookup": {
						"description": "Contacts the USPS web site and looks up the zip code for the specified address. Returns \"\" if the zip is not found.  Returns the first zip code if multiple are available for the specified address.",
						"arguments": [
							{
								"name": "addr1"
							},
							{
								"name": "city"
							},
							{
								"name": "state"
							},
							{
								"name": "addr2",
								"optional": true
							},
							{
								"name": "urbanization",
								"optional": true
							},
							{
								"name": "zip5",
								"optional": true
							}
						]
					}
				},
				"t": {
					"ut": {
						"description": "Returns the uppercase trimmed version of the string supplied.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"u": {
					"uudecode": {
						"description": "Decode (from string) binary data using UUEncode scheme (64 bits).",
						"arguments": [
							{
								"name": "encode_string"
							}
						]
					},
					"uuencode": {
						"description": "Encode (to string) binary data using UUEncode scheme (64 bits).",
						"arguments": [
							{
								"name": "blob"
							}
						]
					}
				}
			}
		},
		"v": {
			"error_generate": {
				"description": "Generate a user defined error in xbasic script or udf.",
				"arguments": [
					{
						"name": "system_error_code"
					}
				]
			},
			"val": {
				"description": "Converts a character string to a numeric value.",
				"arguments": [
					{
						"name": "character"
					}
				]
			},
			"variable_checkpoint": {
				"description": "Turn on debug builds variable frame checkpoint feature.",
				"arguments": [
					{
						"name": "on",
						"optional": true
					}
				]
			},
			"variable_context_name": {
				"description": "Returns Name (if any) of the variable frame.",
				"arguments": [
					{
						"name": "variables"
					}
				]
			},
			"variable_exists": {
				"description": "Return true if a variable exists.",
				"arguments": [
					{
						"name": "variablename"
					}
				]
			},
			"variables_enum": {
				"description": "Returns CR-LF serarated variable list.",
				"arguments": [
					{
						"name": "variables"
					},
					{
						"name": "variable_enum_flags",
						"optional": true
					}
				]
			},
			"variance": {
				"description": "Get the variance of subexpression over group 'over' sampled each group 'each'",
				"arguments": [
					{
						"name": "subexpr"
					},
					{
						"name": "over",
						"optional": true
					},
					{
						"name": "each",
						"optional": true
					}
				]
			},
			"vartojson": {
				"description": "Converts an Xbasic variable to a JSON representation. If flagSpecialTags is .t. then you can use {function} and optional {functionArguments:var1,var2} in a property value to encode as a function. You can also use {Javascript} for arbitrary Javascript",
				"arguments": [
					{
						"name": "var"
					},
					{
						"name": "flagspecialtags",
						"optional": true
					},
					{
						"name": "flagcondense",
						"optional": true
					},
					{
						"name": "indent",
						"optional": true
					},
					{
						"name": "flagquotesonpropnames",
						"optional": true
					},
					{
						"name": "flaghonornulls",
						"optional": true
					}
				]
			},
			"vartojsonhash": {
				"description": "Take an property array and converts to a JSON hash.",
				"arguments": [
					{
						"name": "p"
					},
					{
						"name": "hashproperty"
					},
					{
						"name": "flagspecialtags",
						"optional": true
					},
					{
						"name": "flagcondense",
						"optional": true
					},
					{
						"name": "flagusedoublequotes",
						"optional": true
					}
				]
			},
			"vartojsonstandard": {
				"description": "Converts an Xbasic variable to a JSON representation. If flagSpecialTags is .t. then you can use {function} and optional {functionArguments:var1,var2} in a property value to encode as a function. You can also use {Javascript} for arbitrary Javascript",
				"arguments": [
					{
						"name": "var"
					},
					{
						"name": "flagspecialtags",
						"optional": true
					},
					{
						"name": "flagcondense",
						"optional": true
					},
					{
						"name": "indent",
						"optional": true
					},
					{
						"name": "flagquotesonpropnames",
						"optional": true
					},
					{
						"name": "jqueryformat",
						"optional": true
					},
					{
						"name": "flaghonornulls",
						"optional": true
					},
					{
						"name": "opsin",
						"optional": true
					}
				]
			},
			"version": {
				"description": "Returns product information on the current version.",
				"arguments": [
					{
						"name": "format",
						"optional": true
					}
				]
			}
		},
		"w": {
			"__index__": {
				"_": {
					"w_count": {
						"description": "Counts number of words in a character string.",
						"arguments": [
							{
								"name": "character"
							},
							{
								"name": "separator",
								"optional": true
							}
						]
					},
					"w_upper": {
						"description": "Capitalizes the first character of each word in a character string.",
						"arguments": [
							{
								"name": "character"
							}
						]
					}
				},
				"a": {
					"wait_until": {
						"description": "Wait for an event, Returns TRUE if event returned TRUE, options - event returns true -- 'every' is time between event checks in seconds, optional timeout is time to give up after in seconds.",
						"arguments": [
							{
								"name": "event"
							},
							{
								"name": "every",
								"optional": true
							},
							{
								"name": "timeout",
								"optional": true
							}
						]
					}
				},
				"e": {
					"web_socket_server_sendmessage": {
						"description": "Send a message to the web-sockets server. All clients that are listening to the web-sockets server will receive the message and the webSocketOnMessage client side event in each client will fire.",
						"arguments": [
							{
								"name": "messagetxt"
							}
						]
					},
					"week": {
						"description": " Get the calendar week number of a date",
						"arguments": [
							{
								"name": "date"
							}
						]
					}
				},
				"h": {
					"what3words": {
						"description": "Converts to and from a what3words address. Mode is 'wordstolocation', 'locationtowords', 'addresstowords'. key is your what3words API key, input is either a what3words address, a standard address, or lat,lng",
						"arguments": [
							{
								"name": "key"
							},
							{
								"name": "mode"
							},
							{
								"name": "input"
							}
						]
					}
				},
				"i": {
					"win_1394_info": {
						"description": "Retrieve information about the IEEE 1394 (Firewire) controller",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_accounts": {
						"description": "Retrieve information about Windows user and group accounts",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_battery_info": {
						"description": "Retrieve information about the computer's battery",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_bios_info": {
						"description": "Retrieve information about the computer's BIOS",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_create_shortcut": {
						"description": "Creates a Windows shortcut n the specified location",
						"arguments": [
							{
								"name": "shortcut"
							},
							{
								"name": "target"
							},
							{
								"name": "description",
								"optional": true
							},
							{
								"name": "startin",
								"optional": true
							},
							{
								"name": "iconlocation",
								"optional": true
							},
							{
								"name": "arguments",
								"optional": true
							}
						]
					},
					"win_disk_info": {
						"description": "Retrieve information about the disks",
						"arguments": [
							{
								"name": "diskinfo"
							},
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_machinesid": {
						"description": "Retrieve the Windows Machine Security IDentifier",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_memory_info": {
						"description": "Retrieve information about the computer's memory",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_motherboard": {
						"description": "Retrieve information about the motherboard",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_services": {
						"description": "Retrieve information about Windows services",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_special_folder": {
						"description": "Returns the path to the Windows special folder specified",
						"arguments": [
							{
								"name": "windowsfolder"
							}
						]
					},
					"win_time": {
						"description": "Retrieve Windows time information",
						"arguments": [
							{
								"name": "computer",
								"optional": true
							}
						]
					},
					"win_uac_enabled": {
						"description": "Determine if UAC is enabled on Windows Vista computers. Always returns false for non-Vista operating systems."
					}
				},
				"m": {
					"wmi_datetime_to_time": {
						"description": "Converts a CIM Datetime string as used by WMI to an Alpha Five time value in the local timezone",
						"arguments": [
							{
								"name": "wmitime"
							},
							{
								"name": "gmt_offset",
								"optional": true
							}
						]
					}
				},
				"o": {
					"__index__": {
						"r": {
							"__index__": {
								"d": {
									"__index__": {
										"2": {
											"word2": {
												"description": "Just like word() except it allows num_words to be used with the default separators if \"\"",
												"arguments": [
													{
														"name": "character"
													},
													{
														"name": "word_number"
													},
													{
														"name": "separator",
														"optional": true
													},
													{
														"name": "num_words",
														"optional": true
													}
												]
											}
										},
										"_": {
											"__index__": {
												"c": {
													"word_change": {
														"description": "Perform operation across a group of words, if pattern is specified, only change those words matching the pattern.",
														"arguments": [
															{
																"name": "change_word_format"
															},
															{
																"name": "text"
															},
															{
																"name": "separator",
																"optional": true
															},
															{
																"name": "pattern",
																"optional": true
															},
															{
																"name": "match_pattern",
																"optional": true
															}
														]
													}
												},
												"d": {
													"word_duplicates": {
														"description": "Takes a crlf delimited string and returns a list of all lines in the string that are duplicated.",
														"arguments": [
															{
																"name": "list"
															},
															{
																"name": "delimiter",
																"optional": true
															},
															{
																"name": "flaginputtextissorted",
																"optional": true
															}
														]
													}
												},
												"e": {
													"word_exists": {
														"description": " returns true if word exists in string. ",
														"arguments": [
															{
																"name": "string"
															},
															{
																"name": "word"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													},
													"word_exists_c": {
														"description": "Case-sensitive version of word_exists() function ",
														"arguments": [
															{
																"name": "string"
															},
															{
																"name": "word"
															},
															{
																"name": "delim"
															}
														]
													}
												},
												"f": {
													"word_from_pos": {
														"description": "Given a character position, return the 'word' that character is in.",
														"arguments": [
															{
																"name": "text"
															},
															{
																"name": "pos"
															},
															{
																"name": "separator",
																"optional": true
															}
														]
													}
												},
												"i": {
													"word_i": {
														"description": "Returns a specified word(s) from a string, case insensitive compare (matters if separator contains  alphabetic characters).",
														"arguments": [
															{
																"name": "character"
															},
															{
																"name": "word_number"
															},
															{
																"name": "separator",
																"optional": true
															},
															{
																"name": "num_words",
																"optional": true
															}
														]
													},
													"word_in_common": {
														"description": "Find the words in common between two lists of words. Default delimiter is CRLF.",
														"arguments": [
															{
																"name": "list1"
															},
															{
																"name": "list2"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													},
													"word_in_common_c": {
														"description": "Case-sensitive version of word_in_common()",
														"arguments": [
															{
																"name": "list1"
															},
															{
																"name": "list2"
															},
															{
																"name": "delimiter"
															}
														]
													}
												},
												"m": {
													"word_merge_json": {
														"description": "Merges JSON data into a Word template document. Template can be a physical filename or a URL that points to a remote file",
														"arguments": [
															{
																"name": "template"
															},
															{
																"name": "fnout"
															},
															{
																"name": "json"
															}
														]
													},
													"word_merge_python": {
														"description": "Merges JSON data into a MS Word template document. Does not require Word to be installed (uses Python)",
														"arguments": [
															{
																"name": "templatefile"
															},
															{
																"name": "outputfile"
															},
															{
																"name": "jsondata"
															}
														]
													}
												},
												"n": {
													"word_number_get": {
														"description": " Returns the word number of the word in which substring was found.",
														"arguments": [
															{
																"name": "string"
															},
															{
																"name": "substring"
															},
															{
																"name": "delimiter"
															},
															{
																"name": "match_full_words_only",
																"optional": true
															},
															{
																"name": "casesensitive",
																"optional": true
															}
														]
													}
												},
												"o": {
													"word_occurs": {
														"description": "Returns number of occurences of word in a list of words. Default delimiter is CRLF",
														"arguments": [
															{
																"name": "list"
															},
															{
																"name": "word"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													}
												},
												"s": {
													"word_subtract": {
														"description": "Returns Words that are not in the exclude list.",
														"arguments": [
															{
																"name": "words"
															},
															{
																"name": "exclude_words"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													},
													"word_subtract2": {
														"description": "Assumes that string1 and string2 are crlf delimited. Faster than word_subtract() for very large strings",
														"arguments": [
															{
																"name": "string1"
															},
															{
																"name": "string2"
															}
														]
													},
													"word_subtractc": {
														"description": "Returns Words (case sensitive) that are not in the exclude list.",
														"arguments": [
															{
																"name": "words"
															},
															{
																"name": "exclude_words"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													}
												},
												"t": {
													"word_tagged_pattern": {
														"description": "Perform tagged expression replacement on words in a string.",
														"arguments": [
															{
																"name": "tagged_input"
															},
															{
																"name": "tagged_output"
															},
															{
																"name": "string"
															},
															{
																"name": "word_separator",
																"optional": true
															}
														]
													},
													"word_template_from_sample_json": {
														"description": "Creates a default Microsoft Word merge template document from sample JSON data",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "fntemplate"
															}
														]
													},
													"word_template_from_schema": {
														"description": "Creates a default Microsoft Word merge template document from JSON schema",
														"arguments": [
															{
																"name": "json"
															},
															{
																"name": "fntemplate"
															}
														]
													}
												},
												"u": {
													"word_unique": {
														"description": "Remove duplicate words from a list.",
														"arguments": [
															{
																"name": "source"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													},
													"word_unique_c": {
														"description": "Remove duplicate words from a list, case sensitive.",
														"arguments": [
															{
																"name": "source"
															},
															{
																"name": "delimiter",
																"optional": true
															}
														]
													}
												},
												"w": {
													"word_wrap": {
														"description": "Convert a string to length limited lines, wrapping at the last full word.",
														"arguments": [
															{
																"name": "source_string"
															},
															{
																"name": "maximum_line_length",
																"optional": true
															}
														]
													}
												}
											}
										},
										"a": {
											"wordat": {
												"description": "Returns which word matches (1 based,0 means no match).",
												"arguments": [
													{
														"name": "word"
													},
													{
														"name": "string"
													},
													{
														"name": "separator",
														"optional": true
													}
												]
											},
											"wordatc": {
												"description": "Returns which case sensitive word matches (1 based,0 means no match).",
												"arguments": [
													{
														"name": "word"
													},
													{
														"name": "string"
													},
													{
														"name": "separator",
														"optional": true
													}
												]
											}
										},
										"s": {
											"words": {
												"description": "Returns words, stripping out all whitespace.",
												"arguments": [
													{
														"name": "character"
													},
													{
														"name": "word_number",
														"optional": true
													},
													{
														"name": "count",
														"optional": true
													},
													{
														"name": "keyword",
														"optional": true
													},
													{
														"name": "separator",
														"optional": true
													}
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"u": {
					"wut": {
						"description": "Combines W_upper(alltrim()) into a single function",
						"arguments": [
							{
								"name": "string"
							}
						]
					}
				}
			}
		},
		"x": {
			"__index__": {
				"b": {
					"__index__": {
						"a": {
							"__index__": {
								"s": {
									"__index__": {
										"i": {
											"__index__": {
												"c": {
													"__index__": {
														"_": {
															"__index__": {
																"a": {
																	"xbasic_asynchronous": {
																		"description": "Run current script asynchronously (after call)."
																	}
																},
																"c": {
																	"xbasic_caller_execution_level": {
																		"description": "Reports the level that caller of this xbasic is running at (Application/Addin or System)."
																	}
																},
																"e": {
																	"xbasic_engine_logging_end": {
																		"description": "Stop logging engine debug events."
																	},
																	"xbasic_engine_logging_enum": {
																		"description": "Get a list of all the engine events that can be logged."
																	},
																	"xbasic_engine_logging_get": {
																		"description": "Get a list of the engine events that will be logged."
																	},
																	"xbasic_engine_logging_set": {
																		"description": "Set the engine events to log.",
																		"arguments": [
																			{
																				"name": "flags"
																			}
																		]
																	},
																	"xbasic_engine_logging_start": {
																		"description": "Start logging engine debug events.",
																		"arguments": [
																			{
																				"name": "filename"
																			}
																		]
																	},
																	"xbasic_error_log": {
																		"description": "Logs errors in the currently running thread to a file.",
																		"arguments": [
																			{
																				"name": "filename"
																			},
																			{
																				"name": "log_handled",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_eval_context_add": {
																		"description": "Create an evaluation context - can see all the functions and variables that create function can see.",
																		"arguments": [
																			{
																				"name": "name"
																			}
																		]
																	},
																	"xbasic_eval_context_drop": {
																		"description": "Drop a named evaluation context (will release links to any session/variables/scripts).",
																		"arguments": [
																			{
																				"name": "name"
																			}
																		]
																	},
																	"xbasic_eval_context_eval": {
																		"description": "Evaluate an expression in a named context (created by XBASIC_EVAL_CONTEXT_ADD).",
																		"arguments": [
																			{
																				"name": "name"
																			},
																			{
																				"name": "expression"
																			}
																		]
																	},
																	"xbasic_eval_context_listener": {
																		"description": "Get any listener that may exist for the context.",
																		"arguments": [
																			{
																				"name": "name"
																			}
																		]
																	},
																	"xbasic_eval_context_send": {
																		"description": "Send an event to an a5context listener object.",
																		"arguments": [
																			{
																				"name": "name"
																			},
																			{
																				"name": "event"
																			}
																		]
																	},
																	"xbasic_eval_context_send_object": {
																		"description": "Send an event object to an a5context listener object (sending a pointer allows data to be returned).",
																		"arguments": [
																			{
																				"name": "name"
																			},
																			{
																				"name": "event"
																			}
																		]
																	},
																	"xbasic_execute_javascript": {
																		"description": "Public user defined function.",
																		"arguments": [
																			{
																				"name": "js"
																			},
																			{
																				"name": "flagsandbox",
																				"optional": true
																			},
																			{
																				"name": "validatecode",
																				"optional": true
																			},
																			{
																				"name": "openconsolewindow",
																				"optional": true
																			},
																			{
																				"name": "sourcefolder",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_execute_javascriptfile": {
																		"description": "Public user defined function.",
																		"arguments": [
																			{
																				"name": "jsfilename"
																			},
																			{
																				"name": "flagsandbox",
																				"optional": true
																			},
																			{
																				"name": "validatecode",
																				"optional": true
																			},
																			{
																				"name": "openconsolewindow",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_execute_python": {
																		"description": "Public user defined function.",
																		"arguments": [
																			{
																				"name": "code"
																			}
																		]
																	},
																	"xbasic_execution_level": {
																		"description": "Reports the level that xbasic is running at (Application/Addin or System)."
																	},
																	"xbasic_expression_to_json": {
																		"description": "Return an xbasic expression represented as a JSON object",
																		"arguments": [
																			{
																				"name": "script"
																			}
																		]
																	},
																	"xbasic_extract_functions": {
																		"description": "Extract JUST the functions bodies from some code.",
																		"arguments": [
																			{
																				"name": "code"
																			}
																		]
																	}
																},
																"f": {
																	"xbasic_from_json": {
																		"description": "Create xbasic from JSON xbasic tree",
																		"arguments": [
																			{
																				"name": "script"
																			}
																		]
																	}
																},
																"r": {
																	"xbasic_remove_duplicate_dims": {
																		"description": "Remove duplicate DIM statements from some code.",
																		"arguments": [
																			{
																				"name": "code"
																			}
																		]
																	},
																	"xbasic_remove_functions": {
																		"description": "Remove the functions bodies from some code.",
																		"arguments": [
																			{
																				"name": "code"
																			}
																		]
																	}
																},
																"s": {
																	"xbasic_script_cleanup": {
																		"description": "Explicitly force cleanup of unused scripts (normally done by A5 when idle)."
																	},
																	"xbasic_script_compile": {
																		"description": "Returns errors in passed in xbasic code (if any), compile output flags are e=error, l=line s=size.",
																		"arguments": [
																			{
																				"name": "script"
																			},
																			{
																				"name": "compile_output",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_script_to_json": {
																		"description": "Return an xbasic script represented as a JSON object",
																		"arguments": [
																			{
																				"name": "script"
																			}
																		]
																	},
																	"xbasic_script_tokenize": {
																		"description": "Return a digested xbasic script xbasic_token_output are (s=statement,b=block,l=line,c=command,subexpression/symbol(1,2,3,4..)).",
																		"arguments": [
																			{
																				"name": "script"
																			},
																			{
																				"name": "xbasic_token_output"
																			}
																		]
																	},
																	"xbasic_search_replace": {
																		"description": "Do a context sensitive replacement on xbasic code (i.e. replace symbols or strings).",
																		"arguments": [
																			{
																				"name": "code"
																			},
																			{
																				"name": "search"
																			},
																			{
																				"name": "replace"
																			},
																			{
																				"name": "flags",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_stack_dump": {
																		"description": "Returns a dump of the stack - optional format L=line,S=scriptname,N=line number,D=depth,W=With depth.",
																		"arguments": [
																			{
																				"name": "xbasic_stack_dump",
																				"optional": true
																			},
																			{
																				"name": "find_var_name",
																				"optional": true
																			},
																			{
																				"name": "thread_name",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_stack_function": {
																		"description": "Return xbasic local function that we are in."
																	},
																	"xbasic_stack_variable_get": {
																		"description": "Returns variable from a specified xbasic context.",
																		"arguments": [
																			{
																				"name": "call_depth"
																			},
																			{
																				"name": "with_depth"
																			},
																			{
																				"name": "variable_name"
																			}
																		]
																	},
																	"xbasic_stack_variables_dump": {
																		"description": "Returns variables in xbasic context.",
																		"arguments": [
																			{
																				"name": "call_depth"
																			},
																			{
																				"name": "with_depth",
																				"optional": true
																			},
																			{
																				"name": "dump_options",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_synchronous": {
																		"description": "Force current script to run synchronously (in the forground thread)."
																	},
																	"xbasic_system_of_eq": {
																		"description": "Splits out common subexpressions for list of expressions.",
																		"arguments": [
																			{
																				"name": "expressions"
																			}
																		]
																	}
																},
																"t": {
																	"xbasic_trace_end": {
																		"description": "Stop tracing."
																	},
																	"xbasic_trace_pause": {
																		"description": "Suspend tracing."
																	},
																	"xbasic_trace_resume": {
																		"description": "Continue tracing after pausing."
																	},
																	"xbasic_trace_start": {
																		"description": "Start writing all debuggable executed xbasic commands to a file.",
																		"arguments": [
																			{
																				"name": "filename"
																			},
																			{
																				"name": "dump_variables",
																				"optional": true
																			}
																		]
																	}
																},
																"v": {
																	"xbasic_variable_scope": {
																		"description": "Returns variable scopes names visible to command - populates property array with scopes if provided.",
																		"arguments": [
																			{
																				"name": "array",
																				"optional": true
																			}
																		]
																	},
																	"xbasic_variables_aggregate": {
																		"description": "Count up the occurrences of variables.\nIf ShowNew is .t. only variables created since the last call are reported.",
																		"arguments": [
																			{
																				"name": "shownew",
																				"optional": true
																			},
																			{
																				"name": "name",
																				"optional": true
																			}
																		]
																	}
																},
																"w": {
																	"xbasic_wait_for_idle": {
																		"description": "Run current script asynchronously (after call) and wait for an idle.",
																		"arguments": [
																			{
																				"name": "wait_time",
																				"optional": true
																			}
																		]
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"m": {
					"xmlhttp_classname": {
						"description": "Return the correct XMLHTTP class name based on what is installed in the current operating system"
					}
				},
				"p": {
					"xps_to_pdf": {
						"description": "Convert a XPS file to a PDF file.",
						"arguments": [
							{
								"name": "xpsfilename"
							},
							{
								"name": "pdffilename",
								"optional": true
							},
							{
								"name": "printoptions",
								"optional": true
							}
						]
					}
				}
			}
		},
		"y": {
			"year": {
				"description": "Returns the year portion of a date.",
				"arguments": [
					{
						"name": "date"
					}
				]
			}
		},
		"z": {
			"zblank": {
				"description": "Converts a number to a blank character string if the number is zero.",
				"arguments": [
					{
						"name": "number"
					}
				]
			},
			"zip_files": {
				"description": "Zips up a CRLF delimited list of files. Wildcards in filenames are supported. For speed, files are combined into batches, and each batch is zipped at once.",
				"arguments": [
					{
						"name": "zipfilename"
					},
					{
						"name": "files_to_zip"
					},
					{
						"name": "delete_existing",
						"optional": true
					},
					{
						"name": "number_of_batches",
						"optional": true
					},
					{
						"name": "flags",
						"optional": true
					},
					{
						"name": "base_path",
						"optional": true
					}
				]
			},
			"zip_folder": {
				"description": "Zips the files in a folder. You can optionally specify filter_in (comma delimited list of files - relative to folder -  to include - you can use wildcards. ) and filter_out (comma delimited list of files - relative to folder - to exclude)",
				"arguments": [
					{
						"name": "zipfilename"
					},
					{
						"name": "folder"
					},
					{
						"name": "filter_in",
						"optional": true
					},
					{
						"name": "filter_out",
						"optional": true
					}
				]
			},
			"zipcodeinfo": {
				"description": "Returns a dot variable with info about a 5 digit zip. Do variable has city, state, area_code, time_zip and zip.",
				"arguments": [
					{
						"name": "zip5"
					}
				]
			}
		}
	}
}