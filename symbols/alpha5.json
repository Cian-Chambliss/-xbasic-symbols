{
    "a5debuggercommonsettings": {
        "__functions__": {
            "agentdebugbreakerror": {
                "name": "AgentDebugBreakError",
                "description": "If true is set, will cause an 'error' when a debug() statement appears on a page & no debugger is currently attached.",
                "arguments": [
                    {
                        "name": "erroronbreak",
                        "type": "L"
                    }
                ]
            },
            "agentdebugget": {
                "name": "AgentDebugGet",
                "description": "Get pending JSON command response array (wait until timeout if needed).",
                "arguments": [
                    {
                        "name": "timeout",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "clientid",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "debuggerid",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "agentdebuglookup": {
                "name": "AgentDebugLookup",
                "description": "Lookup token from supplied PIN.",
                "arguments": [
                    {
                        "name": "pin",
                        "type": "N"
                    }
                ]
            },
            "agentdebugpinget": {
                "name": "AgentDebugPinGet",
                "description": "Return the pin for a debuggerid.",
                "arguments": [
                    {
                        "name": "debuggerid",
                        "type": "C"
                    }
                ]
            },
            "agentdebugpost": {
                "name": "AgentDebugPost",
                "description": "Post a JSON command request (or array of response).",
                "arguments": [
                    {
                        "name": "json",
                        "type": "C"
                    },
                    {
                        "name": "debuggerid",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "agentdebugregister": {
                "name": "AgentDebugRegister",
                "description": "Register token and pin.",
                "arguments": [
                    {
                        "name": "debuggerid",
                        "type": "C"
                    },
                    {
                        "name": "pin",
                        "type": "N"
                    },
                    {
                        "name": "sessionid",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "agentdebugrevoke": {
                "name": "AgentDebugRevoke",
                "description": "Revoke a debugger id (requires a new call to AgentDebugRegister).",
                "arguments": [
                    {
                        "name": "debuggerid",
                        "type": "C"
                    }
                ]
            },
            "agentdebugrevokeall": {
                "name": "AgentDebugRevokeAll",
                "description": "Revoke all open debugger tokens."
            },
            "agentdebugsecretset": {
                "name": "AgentDebugSecretSet",
                "description": "Set a 'secret' for the debugger (required for debugger agent connect).",
                "arguments": [
                    {
                        "name": "secret",
                        "type": "C"
                    }
                ]
            },
            "agentdebugsessionlookup": {
                "name": "AgentDebugSessionLookup",
                "description": "Lookup token from supplied session (fallback).",
                "arguments": [
                    {
                        "name": "sessionid",
                        "type": "C"
                    }
                ]
            },
            "agentdebugvalidate": {
                "name": "AgentDebugValidate",
                "description": "Return true if debugger id has been registered.",
                "arguments": [
                    {
                        "name": "debuggerid",
                        "type": "C"
                    }
                ]
            },
            "remotedebugagentrunning": {
                "name": "RemoteDebugAgentRunning",
                "description": "Returns true if remote debug agent is running."
            },
            "remotefullaccessallow": {
                "name": "RemoteFullAccessAllow",
                "description": "Set full access (if true) - or revoke full access (if false).",
                "arguments": [
                    {
                        "name": "allow",
                        "type": "L"
                    }
                ]
            },
            "remotefullaccessallowed": {
                "name": "RemoteFullAccessAllowed",
                "description": "Returns true if full access is allowed."
            },
            "shutdownremotedebugagent": {
                "name": "ShutdownRemoteDebugAgent",
                "description": "Shuts down the remote debug agent (if it is running)."
            }
        },
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "startremotedebugagent": {
                "name": "StartRemoteDebugAgent",
                "description": "Start up the remote debugging agent (transport is 'redis' or 'inprocess' ).",
                "arguments": [
                    {
                        "name": "transport",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "default_stylesheet": {
                "description": "Get a default stylesheet."
            },
            "default_template": {
                "description": "Get a default stylesheet."
            }
        },
        "__name__": "A5DebuggerCommonSettings"
    },
    "a5debuggerlibrarysettings": {
        "__methods__": {
            "addproject": {
                "name": "Addproject",
                "description": "Add a project.",
                "arguments": [
                    {
                        "name": "project",
                        "type": "Alpha5::A5DebuggerProjectSettings"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deleteproject": {
                "name": "Deleteproject",
                "description": "Delete a project.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertproject": {
                "name": "Insertproject",
                "description": "Insert a new project.",
                "arguments": [
                    {
                        "name": "project",
                        "type": "Alpha5::A5DebuggerProjectSettings"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "moveproject": {
                "name": "Moveproject",
                "description": "Move a block of project items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5DebuggerLibrarySettings"
    },
    "a5debuggermodulelinesettings": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5DebuggerModuleLineSettings"
    },
    "a5debuggermodulesettings": {
        "__methods__": {
            "addline": {
                "name": "Addline",
                "description": "Add a line.",
                "arguments": [
                    {
                        "name": "line",
                        "type": "Alpha5::A5DebuggerModuleLineSettings"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deleteline": {
                "name": "Deleteline",
                "description": "Delete a line.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertline": {
                "name": "Insertline",
                "description": "Insert a new line.",
                "arguments": [
                    {
                        "name": "line",
                        "type": "Alpha5::A5DebuggerModuleLineSettings"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "moveline": {
                "name": "Moveline",
                "description": "Move a block of line items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5DebuggerModuleSettings"
    },
    "a5debuggerprojectsettings": {
        "__methods__": {
            "addmodule": {
                "name": "Addmodule",
                "description": "Add a module.",
                "arguments": [
                    {
                        "name": "module",
                        "type": "Alpha5::A5DebuggerModuleSettings"
                    }
                ]
            },
            "addwindow": {
                "name": "Addwindow",
                "description": "Add a window.",
                "arguments": [
                    {
                        "name": "window",
                        "type": "Alpha5::A5DebuggerWindowSettings"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deletemodule": {
                "name": "Deletemodule",
                "description": "Delete a module.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deletewindow": {
                "name": "Deletewindow",
                "description": "Delete a window.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertmodule": {
                "name": "Insertmodule",
                "description": "Insert a new module.",
                "arguments": [
                    {
                        "name": "module",
                        "type": "Alpha5::A5DebuggerModuleSettings"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertwindow": {
                "name": "Insertwindow",
                "description": "Insert a new window.",
                "arguments": [
                    {
                        "name": "window",
                        "type": "Alpha5::A5DebuggerWindowSettings"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movemodule": {
                "name": "Movemodule",
                "description": "Move a block of module items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "movewindow": {
                "name": "Movewindow",
                "description": "Move a block of window items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5DebuggerProjectSettings"
    },
    "a5debuggersettings": {
        "__functions__": {
            "__enabledebugging__": {
                "name": "__EnableDebugging__",
                "description": "Enable Debugging for classic server."
            }
        },
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "debug_system_function": {
                "description": "Set a breakpoint in a system function.",
                "arguments": [
                    {
                        "name": "functionname",
                        "type": "C"
                    },
                    {
                        "name": "threadname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "override_system_function": {
                "description": "Reloads system function from source.",
                "arguments": [
                    {
                        "name": "functionname",
                        "type": "C"
                    }
                ]
            },
            "override_system_script": {
                "description": "Reloads system function from source.",
                "arguments": [
                    {
                        "name": "scriptname",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "A5DebuggerSettings"
    },
    "a5debuggerwindowsettings": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5DebuggerWindowSettings"
    },
    "a5savedrect": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "A5SavedRect"
    },
    "a5spoolerhandler": {
        "__methods__": {
            "addjoblist": {
                "name": "AddJobList",
                "description": "Add a JobList.",
                "arguments": [
                    {
                        "name": "joblist",
                        "type": "Alpha5::A5SpoolerJob"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deletejoblist": {
                "name": "DeleteJobList",
                "description": "Delete a JobList.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertjoblist": {
                "name": "InsertJobList",
                "description": "Insert a new JobList.",
                "arguments": [
                    {
                        "name": "joblist",
                        "type": "Alpha5::A5SpoolerJob"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "lastnewjob": {
                "name": "LastNewJob",
                "description": "Returns index of the last new job that was added."
            },
            "movejoblist": {
                "name": "MoveJobList",
                "description": "Move a block of JobList items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "running": {
                "name": "Running",
                "description": "Is current spooler running?"
            },
            "start": {
                "name": "Start",
                "description": "Start the current alpha five as a spooler."
            },
            "terminate": {
                "name": "Terminate",
                "description": "Close current alpha five spooler."
            }
        },
        "__name__": "A5SpoolerHandler"
    },
    "a5spoolerjob": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "comparename": {
                "name": "CompareName",
                "description": "Return true if job name matches.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "iscurrent": {
                "name": "IsCurrent",
                "description": "Returns true if the job is the current one."
            },
            "ispersistent": {
                "name": "IsPersistent",
                "description": "Is the job persistent?."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "querystatus": {
                "name": "QueryStatus",
                "description": "Returns status string."
            },
            "setcurrent": {
                "name": "SetCurrent",
                "description": "Indicates job has started, (idicates where status information should go)."
            },
            "wasstarted": {
                "name": "WasStarted",
                "description": "Returns if the function was started."
            }
        },
        "__name__": "A5SpoolerJob"
    },
    "a5spoolerrequest": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "launch": {
                "name": "Launch",
                "description": "Attempt to load a spooler process (if one doesn't already exist)."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "request": {
                "name": "Request",
                "description": "Make a request of the server (returns error if spooler is not running).",
                "arguments": [
                    {
                        "name": "request",
                        "type": "C"
                    }
                ]
            },
            "running": {
                "name": "Running",
                "description": "Is the spooler process running?"
            }
        },
        "__name__": "A5SpoolerRequest"
    },
    "a5tracelog": {
        "__functions__": {
            "get": {
                "name": "Get",
                "description": "Get the trace object"
            },
            "logrotation": {
                "name": "LogRotation",
                "description": "Perform rotation on a log file using the rotation rules set in the static properties.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "setcommonlogging": {
                "name": "SetCommonLogging",
                "description": "Set json { \"path\" : \"log file path\" , \"format\" : \"Contents/Json etc\" , \"enabled\" : \"Debug level (i.e. None...Diagnostic)\" , \"discrete\" : (true/false)  }.",
                "arguments": [
                    {
                        "name": "json",
                        "type": "C"
                    }
                ]
            }
        },
        "__methods__": {
            "addpane": {
                "name": "Addpane",
                "description": "Add a pane.",
                "arguments": [
                    {
                        "name": "pane",
                        "type": "Alpha5::A5TracePane"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear a trace log",
                "arguments": [
                    {
                        "name": "pane",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deletepane": {
                "name": "Deletepane",
                "description": "Delete a pane.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertpane": {
                "name": "Insertpane",
                "description": "Insert a new pane.",
                "arguments": [
                    {
                        "name": "pane",
                        "type": "Alpha5::A5TracePane"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movepane": {
                "name": "Movepane",
                "description": "Move a block of pane items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "trace": {
                "name": "Trace",
                "description": "Write to the trace log",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    },
                    {
                        "name": "pane",
                        "type": "C",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "A5TraceLog"
    },
    "a5tracepane": {
        "__methods__": {
            "clear": {
                "name": "Clear",
                "description": "Clear to the trace pane"
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "trace": {
                "name": "Trace",
                "description": "Write to the trace pane",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "A5TracePane"
    },
    "abstractcontrol": {
        "__functions__": {
            "getnullcontrol": {
                "name": "GetNullControl",
                "description": "Return the NULL control."
            }
        },
        "__methods__": {
            "invalidate": {
                "name": "Invalidate",
                "description": "Force the repaint of a control."
            }
        },
        "__name__": "AbstractControl"
    },
    "activelinkfieldmap": {
        "__methods__": {
            "calculate": {
                "name": "Calculate",
                "description": "Given inputs, calculate the fieldMap."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ActiveLinkFieldMap"
    },
    "activelinkfilter": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ActiveLinkFilter"
    },
    "activelinktable": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "filterstackdepth": {
                "name": "FilterStackDepth",
                "description": "Depth of filter stack."
            },
            "filterstackitem": {
                "name": "FilterStackItem",
                "description": "Returns the serverside filter & order.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "hasarguments": {
                "name": "HasArguments",
                "description": "Returns true if SQL arguments are defined."
            },
            "hasserversidequery": {
                "name": "HasServersideQuery",
                "description": "Returns true if a serverside query is in effect."
            },
            "isactivelink": {
                "name": "IsActiveLink",
                "description": "Returns true if table is an active link table."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "serversidefilterorder": {
                "name": "ServersideFilterOrder",
                "description": "Returns the serverside filter & order."
            }
        },
        "__name__": "ActiveLinkTable"
    },
    "addin": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "create": {
                "description": "Create (or find/replace) an addin.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "set_context": {
                "description": "Set the context to apply commands to (starts with default inherited).",
                "arguments": [
                    {
                        "name": "menu_context",
                        "type": "C"
                    }
                ]
            },
            "set_menu": {
                "description": "Sets the menu + where to place the menu.",
                "arguments": [
                    {
                        "name": "menu_entry",
                        "type": "C"
                    },
                    {
                        "name": "prompt",
                        "type": "C"
                    },
                    {
                        "name": "position",
                        "type": "C"
                    }
                ]
            },
            "set_menu_description": {
                "description": "Sets the menu description.",
                "arguments": [
                    {
                        "name": "menu_description",
                        "type": "C"
                    }
                ]
            },
            "set_menu_items": {
                "description": "Set many menu items at once - useful for menu branches that are exclusively addin.",
                "arguments": [
                    {
                        "name": "menu_context",
                        "type": "C"
                    },
                    {
                        "name": "position",
                        "type": "C"
                    },
                    {
                        "name": "submenu",
                        "type": "C"
                    },
                    {
                        "name": "menu_data",
                        "type": "C"
                    }
                ]
            },
            "set_code": {
                "description": "Set the code template (xbasic to run at menu command).",
                "arguments": [
                    {
                        "name": "code_template",
                        "type": "C"
                    }
                ]
            },
            "set_conditional": {
                "description": "Set the expression to enable/disable the command.",
                "arguments": [
                    {
                        "name": "condition_template",
                        "type": "C"
                    }
                ]
            },
            "set_check": {
                "description": "Set the expression to check/uncheck the command.",
                "arguments": [
                    {
                        "name": "check_template",
                        "type": "C"
                    }
                ]
            },
            "set_follow": {
                "description": "Set template to generate recorder high-level commands.",
                "arguments": [
                    {
                        "name": "code",
                        "type": "C"
                    }
                ]
            },
            "execute": {
                "description": "Cause a registered command to execute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "menu_context",
                        "type": "C"
                    }
                ]
            },
            "add_action": {
                "description": "Add an action entry.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "bitmap",
                        "type": "C"
                    },
                    {
                        "name": "catagories",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "add_action_generate": {
                "description": "Add an action generation script.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "generate",
                        "type": "C"
                    }
                ]
            },
            "add_action_initialize": {
                "description": "Add an action generation script.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "initialize",
                        "type": "C"
                    }
                ]
            },
            "add_action_defaults": {
                "description": "Add an action generation script.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "new",
                        "type": "C"
                    }
                ]
            },
            "add_action_pane": {
                "description": "Add a pane to the action editor (new custom or existing standard).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "title",
                        "type": "C"
                    },
                    {
                        "name": "dialog",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "code",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "toolbar_bitmap": {
                "description": "Set toolbar bitmap to use for command.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "on",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "toolbar_tips": {
                "description": "Set toolbar tooltips for command.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "toolbar_add": {
                "description": "Add item to toolbar.",
                "arguments": [
                    {
                        "name": "toolbar",
                        "type": "C"
                    },
                    {
                        "name": "pos",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "quickkey_set": {
                "description": "Set quickkey for menu item.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "C"
                    }
                ]
            },
            "variables": {
                "description": "Returns reference to the addin variable frame."
            },
            "session_variables": {
                "description": "Returns session variables for addins.",
                "arguments": [
                    {
                        "name": "session_handle",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "run": {
                "description": "Runs a script from the addins library - used for overlay scripts, optional session handle allows specification of a different session.",
                "arguments": [
                    {
                        "name": "addin_script",
                        "type": "C"
                    },
                    {
                        "name": "session_handle",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "run_local": {
                "description": "Runs a script from the addins library, using the local variable stack.",
                "arguments": [
                    {
                        "name": "addin_script",
                        "type": "C"
                    },
                    {
                        "name": "session_handle",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "load_compiled": {
                "description": "Creates a pointer to some compiled addin script code.",
                "arguments": [
                    {
                        "name": "addin_script",
                        "type": "C"
                    }
                ]
            },
            "set_flyover_arrive": {
                "description": "Set the flyover arrive template (xbasic to run on highlight of toolbar).",
                "arguments": [
                    {
                        "name": "flyover_arrive_template",
                        "type": "C"
                    }
                ]
            },
            "set_flyover_leave": {
                "description": "Set the flyover leave template (xbasic to cleanup highlight of toolbar).",
                "arguments": [
                    {
                        "name": "flyover_leave_template",
                        "type": "C"
                    }
                ]
            },
            "script_enum": {
                "description": "Enumerates Addin scripts for us (with optional prefix to filter scripts).",
                "arguments": [
                    {
                        "name": "prefix",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "udf_enum": {
                "description": "Enumerates Addin udfs for us (with optional prefix to filter functions).",
                "arguments": [
                    {
                        "name": "prefix",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "slot",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "class_enum": {
                "description": "Enumerates Addin class.",
                "arguments": [
                    {
                        "name": "prefix",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "slot",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "system_constant_add": {
                "description": "Create a system constant (visible to all) - returns TRUE is succeeded in setting.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "value",
                        "type": "A"
                    }
                ]
            },
            "script_load": {
                "description": "Load an addin script (if not password protected - or not initialized).",
                "arguments": [
                    {
                        "name": "script",
                        "type": "C"
                    }
                ]
            },
            "script_save": {
                "description": "Save an addin script.",
                "arguments": [
                    {
                        "name": "script",
                        "type": "C"
                    },
                    {
                        "name": "script_code",
                        "type": "C"
                    },
                    {
                        "name": "password",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "script_drop": {
                "description": "Drop an addin script.",
                "arguments": [
                    {
                        "name": "script",
                        "type": "C"
                    },
                    {
                        "name": "password",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "script_rename": {
                "description": "Rename an addin script.",
                "arguments": [
                    {
                        "name": "script",
                        "type": "C"
                    },
                    {
                        "name": "newname",
                        "type": "C"
                    },
                    {
                        "name": "password",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "function_argument_help": {
                "description": "Provides syntax help for defining function arguments.",
                "arguments": [
                    {
                        "name": "arghelp_argument",
                        "type": "C"
                    },
                    {
                        "name": "arghelp_description",
                        "type": "C"
                    },
                    {
                        "name": "arghelp_expression",
                        "type": "C"
                    },
                    {
                        "name": "arghelp_flags",
                        "type": "C"
                    },
                    {
                        "name": "arghelp_format",
                        "type": "C"
                    }
                ]
            },
            "function_argument_help_init": {
                "description": "Initialize syntax help for addin functions."
            },
            "html_autohelp_init": {
                "description": "Initialize syntax help for HTML."
            },
            "property_help": {
                "description": "Provides context help for assigning values to properties.",
                "arguments": [
                    {
                        "name": "propertyhelp_argument",
                        "type": "C"
                    },
                    {
                        "name": "propertyhelp_description",
                        "type": "C"
                    },
                    {
                        "name": "propertyhelp_expression",
                        "type": "C"
                    },
                    {
                        "name": "propertyhelp_flags",
                        "type": "C"
                    },
                    {
                        "name": "propertyhelp_format",
                        "type": "C"
                    }
                ]
            },
            "function_argument_help_reset": {
                "description": "Re-initialize all argument help."
            },
            "html_tag_add": {
                "description": "Add and HTML tag for autocompletion, attributes in order they should appear by default.\n Flags supported:U\tUnpaired tag (no endtag).\nL\ttag/endtag on separate lines.\nI\tindent contents of tag.\nA\tCarat place After tag.\nC\tAdd a comment inside the tag.\n",
                "arguments": [
                    {
                        "name": "htmltag",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "C"
                    },
                    {
                        "name": "attributes",
                        "type": "C"
                    }
                ]
            },
            "html_attribute_add": {
                "description": "Add an html editor with a handler for returning attributes.",
                "arguments": [
                    {
                        "name": "htmlattribute",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "attributesettings",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "html_style_element_add": {
                "description": "Add an html editor with a handler for returning elements of a css style.",
                "arguments": [
                    {
                        "name": "htmlattribute",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "elementsettings",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "html_style_rule_add": {
                "description": "Add a handler to normalize an html style.",
                "arguments": [
                    {
                        "name": "htmlattribute",
                        "type": "C"
                    },
                    {
                        "name": "normalattribute",
                        "type": "C"
                    },
                    {
                        "name": "pattern",
                        "type": "C"
                    }
                ]
            },
            "html_setting": {
                "description": "Set an html setting (or return a setting, of list of settings).",
                "arguments": [
                    {
                        "name": "setting",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "value",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "html_reset": {
                "description": "Clears HTML tags & attributes."
            },
            "system_calc_add": {
                "description": "Adds a system level calculated field.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "expression",
                        "type": "C"
                    },
                    {
                        "name": "width",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "decimal",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "menu_definition_modify": {
                "description": "Modify the Menu Definition to include addins.",
                "arguments": [
                    {
                        "name": "menu_definition",
                        "type": "C"
                    },
                    {
                        "name": "menu_context",
                        "type": "C"
                    }
                ]
            },
            "startup_log_write": {
                "description": "Write text to the startup log (if logging).",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "startup_log_enabled": {
                "description": "Returns true if startup logging is enabled."
            },
            "startup_log_indent": {
                "description": "Relatively adjust (+/-) the indentation by an amount, returns current indentation.",
                "arguments": [
                    {
                        "name": "indentamount",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "startup_log_complete": {
                "description": "Disables further startup logging."
            },
            "schedule_set": {
                "description": "Set the time for a scheduled script or function call (function calls done if parameters are included) - If 'more' flag is set, then multuple times can be scheduled.",
                "arguments": [
                    {
                        "name": "addinscript",
                        "type": "C"
                    },
                    {
                        "name": "time",
                        "type": "C"
                    },
                    {
                        "name": "more",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "schedule_drop": {
                "description": "Drop an addin script(s) from the schedule.",
                "arguments": [
                    {
                        "name": "addinscript",
                        "type": "C"
                    }
                ]
            },
            "schedule_dump": {
                "description": "Dump scheduled system scripts + times."
            },
            "internal_commandname_get": {
                "description": ""
            },
            "internal_menu_exec": {
                "description": ""
            },
            "internal_menu_contexts": {
                "description": ""
            },
            "internal_names": {
                "description": ""
            },
            "script_exist": {
                "description": "Returns true if a script of name exists in addins.",
                "arguments": [
                    {
                        "name": "addin_script?",
                        "type": "C"
                    }
                ]
            },
            "metadata_get": {
                "description": "Returns metadata stored in addins.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "AddIn"
    },
    "attributeschemamapper": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Ask if a requested schema tag attribute is available.",
                "arguments": [
                    {
                        "name": "attributename",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Get a pointer to a derived attribute.",
                "arguments": [
                    {
                        "name": "attributename",
                        "type": "c"
                    }
                ]
            },
            "enumeratederived": {
                "name": "EnumerateDerived",
                "description": "Get a list of derived attributes."
            }
        },
        "__name__": "AttributeSchemaMapper"
    },
    "bitmapfind": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "first": {
                "description": "Find first bitmap, returns a new BitmapFind property."
            },
            "next": {
                "description": "Find next bitmap in bitmap."
            },
            "eof": {
                "description": "Returns TRUE if the last operation read past end."
            },
            "name": {
                "description": "Return the current bitmap name for the bitmap search."
            },
            "location": {
                "description": "Return the current bitmap location for the bitmap search."
            }
        },
        "__name__": "BitmapFind"
    },
    "borderentry": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a named border style object.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "setborderwidth": {
                "name": "SetBorderWidth",
                "description": "Define border width.",
                "arguments": [
                    {
                        "name": "left",
                        "type": "n"
                    },
                    {
                        "name": "top",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "right",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "bottom",
                        "type": "n",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "BorderEntry"
    },
    "cardpropertywrapper": {
        "__methods__": {
            "addpropertytracker": {
                "name": "AddPropertyTracker",
                "description": "Expression, with optional <property> placeholder, gets evaluated whenever a property change is made.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "droppropertytracker": {
                "name": "DropPropertyTracker",
                "description": "Remove a property tracker (based on expression pattern).",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "getbindingstate": {
                "name": "GetBindingState",
                "description": "Returns 'binding' state change flags - allows tracking of transition from bound/unbound and back."
            },
            "hasdynamic": {
                "name": "HasDynamic",
                "description": "Returns true if property has a 'dynamic' property.",
                "arguments": [
                    {
                        "name": "propname",
                        "type": "C"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "originaltype": {
                "name": "OriginalType",
                "description": "Returns Original type of property.",
                "arguments": [
                    {
                        "name": "propname",
                        "type": "C"
                    }
                ]
            },
            "returnpropasstring": {
                "name": "ReturnPropAsString",
                "description": "Causes all properties to be returned as strings, no matter what type they are originally.",
                "arguments": [
                    {
                        "name": "asstring",
                        "type": "L"
                    }
                ]
            },
            "setdynamicpropertyname": {
                "name": "SetDynamicPropertyName",
                "description": "Sets string to return if 'actual' property has a dynamic property.",
                "arguments": [
                    {
                        "name": "dynamic",
                        "type": "C"
                    }
                ]
            },
            "wrapobject": {
                "name": "WrapObject",
                "description": "Wrap passed object properties with undo-redo code, Also wraps dynamic property overrides elements as properties.",
                "arguments": [
                    {
                        "name": "obj",
                        "type": "P"
                    }
                ]
            }
        },
        "__name__": "CardPropertyWrapper"
    },
    "colordefinition": {
        "__functions__": {
            "enumerate": {
                "name": "Enumerate",
                "description": "Enumerate named color - optional flags 'H'tml colors 'S'ystem colors , 'A'lpha Five colors,  'F'ullnames .",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "format",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "nametorgb": {
                "name": "NameToRGB",
                "description": "Given a color name, return an RGB value.",
                "arguments": [
                    {
                        "name": "as",
                        "type": "name"
                    }
                ]
            },
            "htmlnametorgb": {
                "name": "HTMLNameToRGB",
                "description": "Given a html color name, return an RGB value.",
                "arguments": [
                    {
                        "name": "as",
                        "type": "name"
                    }
                ]
            }
        },
        "__methods__": {
            "blend": {
                "name": "Blend",
                "description": "Mix two colors together, optional ratio > 0.0, ratio < 1.0 (.5 if not specified).",
                "arguments": [
                    {
                        "name": "color",
                        "type": "Alpha5::ColorDefinition"
                    },
                    {
                        "name": "ratio",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "gethuecolor": {
                "name": "GetHueColor",
                "description": "Get the saturated HUE color."
            }
        },
        "__name__": "ColorDefinition"
    },
    "control": {
        "__functions__": {
            "getnullcontrol": {
                "name": "GetNullControl",
                "description": "Return the NULL control."
            }
        },
        "__methods__": {
            "invalidate": {
                "name": "Invalidate",
                "description": "Force the repaint of a control."
            }
        },
        "__name__": "Control"
    },
    "dde": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "open": {
                "description": "Open a dde channel with another window on a given topic.",
                "arguments": [
                    {
                        "name": "application",
                        "type": "C"
                    },
                    {
                        "name": "topic",
                        "type": "C"
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current dde link valid."
            },
            "close": {
                "description": "Close an open dde channel."
            },
            "execute": {
                "description": "Execute a dde command.",
                "arguments": [
                    {
                        "name": "command",
                        "type": "C"
                    }
                ]
            },
            "poke": {
                "description": "Supply data to another application via DDE.",
                "arguments": [
                    {
                        "name": "item",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "C"
                    },
                    {
                        "name": "clipboard_format",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "request": {
                "description": "Obtain data from another application via DDE.",
                "arguments": [
                    {
                        "name": "item",
                        "type": "C"
                    }
                ]
            },
            "terminate_all": {
                "description": "Close all applications open DDE channels."
            },
            "send": {
                "description": "Supply data to another specified application for topic.",
                "arguments": [
                    {
                        "name": "application",
                        "type": "C"
                    },
                    {
                        "name": "topic",
                        "type": "C"
                    },
                    {
                        "name": "item",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "C"
                    },
                    {
                        "name": "clipboard_format",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "receive": {
                "description": "Obtain data from specified application on topic.",
                "arguments": [
                    {
                        "name": "application",
                        "type": "C"
                    },
                    {
                        "name": "topic",
                        "type": "C"
                    },
                    {
                        "name": "item",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "DDE"
    },
    "delegated": {},
    "dependency": {
        "__functions__": {
            "createforxdialog": {
                "name": "createForXdialog",
                "description": "Create a dependency system.",
                "arguments": [
                    {
                        "name": "xdialog",
                        "type": "c"
                    },
                    {
                        "name": "dependencies",
                        "type": "c"
                    },
                    {
                        "name": "varsupport",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create": {
                "description": "Create a dependency system.",
                "arguments": [
                    {
                        "name": "dependencies",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "varsupport",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "createfromblob": {
                "description": "Create a dependency system from a binary image created by CreateBlob().",
                "arguments": [
                    {
                        "name": "dependencies",
                        "type": "b",
                        "optional": true
                    },
                    {
                        "name": "varsupport",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "compiled": {
                "description": "Create a processed version of a dependency mapper.",
                "arguments": [
                    {
                        "name": "dependencies",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "varsupport",
                        "type": "L",
                        "optional": true
                    }
                ]
            }
        },
        "__methods__": {
            "client_create": {
                "description": "Create a client for the dependencies."
            }
        },
        "__name__": "Dependency"
    },
    "dependencyclient": {
        "__methods__": {
            "changes": {
                "description": "Reports the change notifications.",
                "arguments": [
                    {
                        "name": "code_to_execute",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "committed_tag",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "jsonchanges": {
                "name": "jsonChanges",
                "description": "Returns list of JSON changes - use the 'tag' names as json variables.",
                "arguments": [
                    {
                        "name": "committed_tag",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "forget_changes": {
                "description": "Forgets all the values (forces reinitialize of all values)."
            },
            "uncommitted_tags": {
                "name": "uncommitted_Tags",
                "description": "Returns all tags that have yet to be committed (optionally return value=tag pair) .",
                "arguments": [
                    {
                        "name": "value_tag_pair",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "forget_committed_tags": {
                "description": "Forgets the tags that we previously committed."
            }
        },
        "__name__": "DependencyClient"
    },
    "dictionary": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "open": {
                "description": "Open an existing data dictonary.",
                "arguments": [
                    {
                        "name": "data_dictionary_name",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "create": {
                "description": "Create a new data dictonary.",
                "arguments": [
                    {
                        "name": "data_dictionary_name",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "handle_set": {
                "description": "Given an old style 'handle', set the data dictonary pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "update": {
                "description": "Update a data dictionary.",
                "arguments": [
                    {
                        "name": "data_dictionary_name",
                        "type": "C"
                    }
                ]
            },
            "structure_copy": {
                "description": "Copy structure information from one dictionary to another.",
                "arguments": [
                    {
                        "name": "source_data_dictionary_name",
                        "type": "C"
                    },
                    {
                        "name": "dest_data_dictionary_name",
                        "type": "C"
                    }
                ]
            },
            "get_object": {
                "description": "Get a dictionary object.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "put_object": {
                "description": "Put a dictionary object.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "contents_c",
                        "type": "C"
                    },
                    {
                        "name": "contents_m",
                        "type": "A"
                    },
                    {
                        "name": "vendor",
                        "type": "A",
                        "optional": true
                    }
                ]
            },
            "drop_object": {
                "description": "Drop a dictionary object.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "drop_object_family": {
                "description": "Drop all dictionary objects of name and family of type (i.e. type + all subtypes denoted by last character of type).",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "commit_singleton": {
                "description": "Commit dictionary as data record in singleton dictionary.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "layoutname",
                        "type": "C"
                    }
                ]
            },
            "enum_objects": {
                "description": "Get objects of optional type/name mask (otherwise, return all objects).",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "export_filesystem": {
                "description": "Export all the files in a dictionary to a filesystem .ALB shadow.",
                "arguments": [
                    {
                        "name": "basefile",
                        "type": "C"
                    },
                    {
                        "name": "exportlibdef",
                        "type": "C"
                    },
                    {
                        "name": "passwordlist",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "import_filesystem": {
                "description": "Import all the files in a dictionary to a filesystem .ALB shadow. If permanent flag is set, a library is created.",
                "arguments": [
                    {
                        "name": "basefile",
                        "type": "C"
                    },
                    {
                        "name": "importlibdef",
                        "type": "C"
                    },
                    {
                        "name": "permanent",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "update_filesystem_times": {
                "description": "Give a list ALBLibList, create or update /remove the .ALB files if the shadow is incorrect or the library list is different.",
                "arguments": [
                    {
                        "name": "filesystempath",
                        "type": "C"
                    },
                    {
                        "name": "albliblist",
                        "type": "C"
                    },
                    {
                        "name": "removealbliblist",
                        "type": "C"
                    }
                ]
            },
            "passwords_validate": {
                "description": "Validate password list against the dictionary, reports back first script/udf that doesn't have a password in the list.",
                "arguments": [
                    {
                        "name": "passwordlist",
                        "type": "C"
                    },
                    {
                        "name": "passworderrorformat",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "backup": {
                "description": "Save all records of a type to a 'backup' file of specific name.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "restore": {
                "description": "Restore a records of a type from a backup file.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "fromzip",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "object_exists": {
                "description": "Returns TRUE if object of type & name exists.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "data_structure": {
                "description": "Return structes(s) of all the table(s) associated with a dictionary object."
            },
            "saved_data_structure": {
                "description": "Return structure stored in header of file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "enumerate_backups": {
                "description": "Enumerate backups for type & name (using the internal naming).",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "backup_folder": {
                "description": "Return folder for backups.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    }
                ]
            },
            "backup_comment_set": {
                "description": "Sets a comment for a version of a backup.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "version",
                        "type": "n"
                    },
                    {
                        "name": "comment",
                        "type": "C"
                    }
                ]
            },
            "backup_comment_get": {
                "description": "Gets a comment for a version of a backup.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "version",
                        "type": "n"
                    }
                ]
            },
            "object_comment_get": {
                "description": "Gets a version and comment  of an object (if comment record exists).",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "object_comment_set": {
                "description": "Sets a comment (and optional version) for a dictionary object.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "comment",
                        "type": "C"
                    },
                    {
                        "name": "version",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "object_history_get": {
                "description": "Gets history for 'type'.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "C"
                    }
                ]
            },
            "object_has_schema": {
                "description": "Returns true if the object is a schema object (i.e. unbound layout).",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "C"
                    },
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "object_schema_get": {
                "description": "Gets schema for object (if object has a schema record).",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "C"
                    },
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "object_schema_enum": {
                "description": "Find schemas that match pattern - if single line, first line only, else compare all - wildcards allowed on each line (i.e. for name compare only).",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "C"
                    },
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "pattern",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "rcs_dirty": {
                "name": "RCS_Dirty",
                "description": "Returns TRUE if any RCS transactions need to be done."
            },
            "rcs_changes_get": {
                "name": "RCS_Changes_Get",
                "description": "Returns list of RCS transactions that need to be done."
            },
            "rcs_clear": {
                "name": "RCS_Clear",
                "description": "Clears the RCS transaction log."
            },
            "get_singleton": {
                "description": "Returns the name of the singleto object (Type.Name). Returns blank if this is not a singleton",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "get_singleton_datasource": {
                "description": "Returns the data source for the singleton (SQLDATASOURCE if contains an ADHOC SQL definiton).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "get_singleton_adhocsql": {
                "name": "get_singleton_adHocSQL",
                "description": "Returns the SQL datasource ad-hoc record for the singleton object.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "local_open": {
                "description": "Open an existing table using a namespace of a table (for opening tables under mappers without name conflicts).",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open_session": {
                "description": "Open an existing table in a new session.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current table valid."
            },
            "close": {
                "description": "Close an open table."
            },
            "define_events": {
                "description": "Define an event handler, pass in optional inst variables pointer.",
                "arguments": [
                    {
                        "name": "event_code",
                        "type": "C"
                    },
                    {
                        "name": "variables",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "events_template": {
                "description": "Return a template of all the definable table events."
            },
            "attach_change_auditor": {
                "description": "Define a table to audit the initial record values of the table object - structure must match + audit table needs an extra field at the end called __RECNO__.",
                "arguments": [
                    {
                        "name": "audit_table",
                        "type": "P"
                    }
                ]
            },
            "backend_populate_method": {
                "description": "Return or Change the backend populate method (Bulk/Bulk_Only/Incremental/None).",
                "arguments": [
                    {
                        "name": "new_setting",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "backend_cleanup": {
                "description": "If true, table actual files are deleted when the table is closed.",
                "arguments": [
                    {
                        "name": "new_setting",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "backend_key": {
                "description": "Get/Set the unqiue backend table key expression (used to identify records).",
                "arguments": [
                    {
                        "name": "new_key_expresssion",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "handle": {
                "description": "Get the tables old style 'handle'."
            },
            "handle_raw": {
                "description": "Return the 'raw' table handle (if mapped table)."
            },
            "handles_in_use": {
                "description": "Get a crlf-delimited string of table handles in use.",
                "arguments": [
                    {
                        "name": "handles",
                        "type": "P"
                    }
                ]
            },
            "from_handle": {
                "name": "From_handle",
                "description": "Given an old style 'handle', return the table pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "get": {
                "description": "Returns table of name.",
                "arguments": [
                    {
                        "name": "table_name",
                        "type": "C"
                    }
                ]
            },
            "batch_begin": {
                "description": "Lock database file for batched changes."
            },
            "batch_end": {
                "description": "Unlocks database file after batched changes."
            },
            "change_begin": {
                "description": "Begin changes to tables current record.",
                "arguments": [
                    {
                        "name": "honor_field_rules",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "change_end": {
                "description": "End changes to tables current record.",
                "arguments": [
                    {
                        "name": "commit",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "updateui",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enter_begin": {
                "description": "Begin a new record for the tables.",
                "arguments": [
                    {
                        "name": "honor_field_rules",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enter_end": {
                "description": "End a new record enter.",
                "arguments": [
                    {
                        "name": "commit",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "updateui",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "field_blank": {
                "description": "Places a blank value in the field specified.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "duplicate": {
                "description": "Create a copy of the table, with all records and layouts.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "create_clone": {
                "description": "Create an empty copy of the table.",
                "arguments": [
                    {
                        "name": "filename"
                    },
                    {
                        "name": "flags",
                        "optional": true
                    }
                ]
            },
            "mode_get": {
                "description": "Get the data entry mode for the table."
            },
            "name_get": {
                "description": "Get the name or alias of the table."
            },
            "pack": {
                "description": "Removes all the records that are marked for deletion."
            },
            "record_clone": {
                "description": "Create a new record using the fields from a similar table.",
                "arguments": [
                    {
                        "name": "source_table",
                        "type": "P"
                    }
                ]
            },
            "records_get": {
                "description": "Returns the number of records in the table."
            },
            "rename": {
                "description": "Renames the table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "fetch_eof": {
                "description": "returns TRUE if the last record was fetched."
            },
            "fetch_find": {
                "description": "Using the current index, find specified key value, return record number.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "A"
                    }
                ]
            },
            "fetch_first": {
                "description": "Fetch the first record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_goto": {
                "description": "Goto a specific record number in the table, returns positive if record found, else negitive record number.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N"
                    }
                ]
            },
            "fetch_last": {
                "description": "Fetch the last record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_next": {
                "description": "Fetch the next record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_prev": {
                "description": "Fetch the previous record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_loc_next": {
                "description": "Locate the next value/pattern if the field specified.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "fetch_loc_prev": {
                "description": "Locate the previos value/pattern if the field specified.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "row_state_get": {
                "description": "Get cursor state(s) can set fetch level or get a count - flags 'F'irst 'L'ast '+<#>' '-<#>' for offset '<' for attempt to fetch a minimum of count minus 1, '=' attempt to fetch minimum of count.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "count",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "firstrowstate",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_state_range_get": {
                "description": "Get cursor state(s) between (including) the provided rowstates.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N"
                    },
                    {
                        "name": "row_state1",
                        "type": "C"
                    },
                    {
                        "name": "row_state2",
                        "type": "C"
                    }
                ]
            },
            "row_state_compare": {
                "description": "Compare two cursor states.",
                "arguments": [
                    {
                        "name": "row_state1",
                        "type": "C"
                    },
                    {
                        "name": "row_state2",
                        "type": "C"
                    }
                ]
            },
            "row_state_put": {
                "description": "Restore a cursor state that was returned by cursor_state_get.",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C"
                    }
                ]
            },
            "row_content_get": {
                "description": "Evaluate content expression for cursor states.",
                "arguments": [
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "cursor_state",
                        "type": "C"
                    }
                ]
            },
            "row_position_get": {
                "description": "Get the sequential record position of the current record (or row state if one is provided).",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "row_state",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_position_extent": {
                "description": "Get the sequential record extent.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "row_position_set": {
                "description": "Get the row state given a position.",
                "arguments": [
                    {
                        "name": "position",
                        "type": "N"
                    },
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "index_primary_put": {
                "description": "Set the primary index for the table, using either name or Index object.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_primary_get": {
                "description": "Get the primary index for the table."
            },
            "range_add": {
                "description": "Add a range filter to the table.",
                "arguments": [
                    {
                        "name": "first_key",
                        "type": "A",
                        "optional": true
                    },
                    {
                        "name": "last_key",
                        "type": "A",
                        "optional": true
                    }
                ]
            },
            "range_drop": {
                "description": "Drop the current range from the table."
            },
            "set_create": {
                "description": "Use the current table to define a new set of provided filename.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "field_get": {
                "description": "Get a field given a name or index into current Table.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "recno": {
                "description": "Return the current record for the table."
            },
            "eval": {
                "description": "Evaluate an expression in the context of the table.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "eval_valid": {
                "description": "Returns TRUE if expression is valid in the context of the table.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "zap": {
                "description": "Delete all the records in the table if safety is TRUE.",
                "arguments": [
                    {
                        "name": "safety",
                        "type": "L"
                    }
                ]
            },
            "erase": {
                "description": "Delete the table if safety is TRUE.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "safety",
                        "type": "L"
                    }
                ]
            },
            "mark": {
                "description": "Mark the current record."
            },
            "unmark": {
                "description": "Unmarks the current record."
            },
            "delete": {
                "description": "Mark the current record for deletion."
            },
            "compact": {
                "description": "Compact DBF,SET,DDD,ALB files.",
                "arguments": [
                    {
                        "name": "file",
                        "type": "C"
                    }
                ]
            },
            "in_use": {
                "description": "Returns true if the named table/library is in use (does exclusive open test).",
                "arguments": [
                    {
                        "name": "file",
                        "type": "C"
                    },
                    {
                        "name": "physical_file_only",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_begin": {
                "description": "Start defining a new Table, defines the first field.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "fieldtype",
                        "type": "C"
                    },
                    {
                        "name": "field_width",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "field_decimal",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "field_add": {
                "description": "Define the next field in a table.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "fieldtype",
                        "type": "C"
                    },
                    {
                        "name": "field_width",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "field_decimal",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_end": {
                "description": "Complete definition of a new table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "create_end_extended": {
                "description": "Creates a new format .DBF table with extra information embedded in the header.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "extra",
                        "type": "A"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_table": {
                "description": "Create a DBF using a cr-lf ascii list that defines the columns, optional fileMap is crlf delimited list of alias=filename.",
                "arguments": [
                    {
                        "name": "columndefinitions",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "extra",
                        "type": "A"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filemap",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_record_get": {
                "description": "Get the record number order index object for a table."
            },
            "index_tag_add": {
                "description": "Add a tag to the production index for the database.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "is_marked": {
                "description": "Is the current record Marked."
            },
            "is_unmarked": {
                "description": "Is the current record Unmarked."
            },
            "is_deleted": {
                "description": "Is the current record Deleted."
            },
            "index_get": {
                "description": "Returns an index given a name.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    }
                ]
            },
            "index_name_get": {
                "description": "Retrieve open index tag names (from 1 to n) - if parameter ommitted, report ALL names.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "external_index_name_get": {
                "description": "Retrieve external tables index tag names in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    }
                ]
            },
            "external_index_def_from_name_get": {
                "description": "Retrieve a external tag information given a table or setname and description - format E=Error P=Filename O=order,F=filter,X=all flags, U=Unique, D=escending, I=Insensitive T=Type.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "external_index_def_enum": {
                "description": "Retrieve all tags a table or setname and description - format A=Active E=Error N=Name P=Filename O=order,F=filter,X=all flags, U=nique, D=escending, I=Insensitive T=Type.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "field_name_get": {
                "description": "Retrieve field names in a cr-lf separated list."
            },
            "external_field_name_get": {
                "description": "Retrieve external tables field names (and other optional info) in a cr-lf separated list.\nn - field name \nN - uppercased field name\nt - simple field type\nT - full field type\nW - field width\nD - field decimal\nR - field rule (INCREMENT/CALCULATED=<EXPRESSION>)\n",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_field_info_get": {
                "description": "Retrieve external tables field names (and other optional info) in a cr-lf separated list.\nformat same as External_Field_Name_Get().",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_record_content_get": {
                "description": "Retrieve external tables records in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_record_content_from_key_get": {
                "description": "Retrieve external tables records in a cr-lf separated list given a list of records or keys.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "records",
                        "type": "C"
                    },
                    {
                        "name": "key_expression",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "record_content_get": {
                "description": "Retrieve record data in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "fetchlevel",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "file_mode_get": {
                "description": "Get the sharing mode of the file the table."
            },
            "filename_get": {
                "description": "Get the filename of the table, if name specified, returns full path to provided database name.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "actual_filename_get": {
                "description": "Get the physical (master) filename of the table, if name specified, returns full path to provided database name.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "query_primary_put": {
                "description": "Returns existing query if already run, else runs and returns saved query.",
                "arguments": [
                    {
                        "name": "query_name",
                        "type": "C"
                    }
                ]
            },
            "query_create": {
                "description": "Create a new query - flags (N)ot remembered - if optional order and filter expressions are specified, then the query variable is ignored.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "order_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "args",
                        "type": "p",
                        "optional": true
                    }
                ]
            },
            "query_from_range": {
                "description": "Create a query from the current range, if one is in effect - returns .T. if new query created."
            },
            "query_detach": {
                "description": "Detach current query (or named query if specified).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "query_detach_all": {
                "description": "Detach all queries."
            },
            "queries_reopen": {
                "description": "Reopen the queries in a session."
            },
            "crosstab": {
                "description": "Cross tabulate records of database into result database."
            },
            "post": {
                "description": "Replace, add, or subtract fields values in the table using fields from a transaction database."
            },
            "join": {
                "description": "Create a new table by merging the records from the table with a secondary table."
            },
            "append": {
                "description": "Append the records of one table to another, optional argument provides a quick way to append records of exact same table structure.",
                "arguments": [
                    {
                        "name": "source_tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "copy": {
                "description": "Copy all or some of the fields from the table to another table or set."
            },
            "update_production_index": {
                "description": "Update the production index associated with the table."
            },
            "subtract": {
                "description": "Create a new table of records not common to table and secondary table."
            },
            "intersect": {
                "description": "Create a new table that is the intersection between the table and a secondary table."
            },
            "mark_range": {
                "description": "Mark a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "unmark_range": {
                "description": "Unmark a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "delete_range": {
                "description": "Delete a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "mark_dups": {
                "description": "Marks the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "mark_dups2": {
                "description": "Marks the duplicate records in the table, including the original record.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "unmark_dups": {
                "description": "Unmarks the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "delete_dups": {
                "description": "Deletes the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "export": {
                "description": "Export records in table to specified output file."
            },
            "import": {
                "description": "Import records from specified input file to the table."
            },
            "summarize": {
                "description": "Summarize the records of the table into a specified output table."
            },
            "fields_get": {
                "description": "Get the number of fields in the table."
            },
            "index_open": {
                "description": "Open an index file for the database.",
                "arguments": [
                    {
                        "name": "index_name",
                        "type": "C"
                    }
                ]
            },
            "records_deleted": {
                "description": "Returns a count of the records deleted."
            },
            "index_create_begin": {
                "description": "Begin creation of a new index, add the first tag.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_add": {
                "description": "Add the next tag.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_create_end": {
                "description": "Complete creation of an index.",
                "arguments": [
                    {
                        "name": "indexname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "isopen": {
                "description": "Test if a table is open - return .T. if table is currently open.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "record_data_get": {
                "description": "Return the all the data from the current records field as a blob.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "record_data_set": {
                "description": "Set all the feilds int the current record using data from a blob.",
                "arguments": [
                    {
                        "name": "data",
                        "type": "B"
                    }
                ]
            },
            "relation_add_mapped": {
                "description": "Add an internal relation to a mapped table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "relation_change": {
                "description": "Change a relation's settings."
            },
            "eof": {
                "description": "Returns TRUE if we are on the last record of the specified (or current) search order.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "bof": {
                "description": "Returns TRUE if we are on the first record of the specified (or current) search order.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "persist": {
                "description": "Flags opened table to not be closed automatically on termination of script."
            },
            "encrypt": {
                "description": "Encrypt a database file."
            },
            "decrypt": {
                "description": "Decrypt a database file."
            },
            "encrypted": {
                "description": "Returns TRUE if table is encrypted."
            },
            "sql_exec": {
                "description": "Execute a SQL statement (for ODBC tables) - returns error string if error occured.",
                "arguments": [
                    {
                        "name": "statement",
                        "type": "C"
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "fields",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "enum_capability": {
                "description": "Enumerate capabilities (ODBC data sources) - returns parameter name.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "get_capability": {
                "description": "Get a capability (if defined) for a table.",
                "arguments": [
                    {
                        "name": "parameter",
                        "type": "C"
                    }
                ]
            },
            "enum_syntax": {
                "description": "Enumerate ODBC driver syntax elements.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "get_syntax": {
                "description": "Get syntax for an ODBC setting.",
                "arguments": [
                    {
                        "name": "parameter",
                        "type": "C"
                    }
                ]
            },
            "get_memo_extension": {
                "description": "Returns the Memo file extension that would be associated with the passed in Table extension.",
                "arguments": [
                    {
                        "name": "table_extension",
                        "type": "C"
                    }
                ]
            },
            "get_index_extension": {
                "description": "Returns the Index file extension that would be associated with the passed in Table extension.",
                "arguments": [
                    {
                        "name": "table_extension",
                        "type": "C"
                    }
                ]
            },
            "get_source_type": {
                "description": "Returns the type of source the table is - Native, ODBC , Native-Encrypted.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "getlocation",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_shadow": {
                "description": "Create a shadow table - the shadowfilename is the table created, it points to the actualfilename.",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    },
                    {
                        "name": "actualfilename",
                        "type": "C"
                    },
                    {
                        "name": "shadow_associated_files",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_backend_loader": {
                "description": "Create a shadow table for a backend - causes the backend loaded to be invoked with the filename.",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_mapping_loader": {
                "description": "Create a shadow table for a table re-mapper (alternate names for a table or tables).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_filesystem_library": {
                "description": "Create a shadow table for a file-system library, can have an optional path (which can be relative to shadow location).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    },
                    {
                        "name": "alternatepath",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_json_loader": {
                "description": "Create a shadow table for a json file of the same name (with a json extension).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_bson_loader": {
                "description": "Create a shadow table for a bson file of the same name (with a bson extension).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "get_group_name": {
                "description": "Returns name of associated groups (table or report level if defined).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "previous_record": {
                "description": "Returns the previous record data entry was performed on."
            },
            "is_record_locked": {
                "description": "return TRUE if the record is locked."
            },
            "child_get": {
                "description": "Returns names of children of table [or a single child if number is provided].",
                "arguments": [
                    {
                        "name": "child_number",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "parent_get": {
                "description": "Returns name of the parent table."
            },
            "parent_link_expr_get": {
                "description": "Returns the parent linking expression."
            },
            "link_expr_get": {
                "description": "Returns the linking key expression."
            },
            "link_filter_expr_get": {
                "description": "Returns the link filter expression."
            },
            "link_index_flags_get": {
                "description": "Returns the link index flags."
            },
            "relation_get": {
                "description": "Returns the tables relation type (Single/Many)."
            },
            "relation_key_expression": {
                "description": "If table is a child table, get the key expression part of the index order."
            },
            "relation_order_expression": {
                "description": "If table is a child table, get the order expression part of the index order."
            },
            "relation_tag": {
                "description": "Builds and Returns an index handle for the relation_change and relation_add commands.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "refresh": {
                "description": "Perform network refresh, return True if changed."
            },
            "need_refresh": {
                "description": "Return True if table data in memory is out of date."
            },
            "field_statistics": {
                "description": "Collects statistics for passed in expression/field.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "C"
                    },
                    {
                        "name": "stats",
                        "type": "P"
                    }
                ]
            },
            "temporary_open": {
                "description": "Opens temporary tables for caching (named tables stay in memory till temporary close).",
                "arguments": [
                    {
                        "name": "table_name_list",
                        "type": "C"
                    }
                ]
            },
            "temporary_close": {
                "description": "Close temporary tables (ignores non-cached tables).",
                "arguments": [
                    {
                        "name": "table_name_list",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sessionhandle": {
                "description": "Return the session that the table is opened under."
            },
            "related_tables_get": {
                "description": "Return the tables in a set that can be represented with a lookup expression to the table.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_variables_get": {
                "description": "Get externally defined variables.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "variable_context",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_calcs_get": {
                "description": "Get externally defined calc fields.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "reference_expression_get": {
                "description": "Get the expression needed to reconstruct a pointer."
            },
            "name_normalize": {
                "description": "Normalize a table name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "fieldname_change": {
                "description": "Change the names of fields in a table without restructuring the table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "fieldnames_old",
                        "type": "C"
                    },
                    {
                        "name": "fieldnames_new",
                        "type": "C"
                    }
                ]
            },
            "keylist_exclude": {
                "description": "Returns a list of key values to exclude for the result fieldname - not including the current record.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "unique_expression",
                        "type": "C"
                    }
                ]
            },
            "row_position_override_add": {
                "description": "Sets override for presented row state position(s).",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C"
                    },
                    {
                        "name": "relative_row_states",
                        "type": "C"
                    }
                ]
            },
            "row_position_override_drop": {
                "description": "Remove one (or all) row state position overrides from a table.",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_state_unmark": {
                "description": "Unmark all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "row_state_mark": {
                "description": "Mark all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "row_state_delete": {
                "description": "Delete all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "relation_link_manual": {
                "description": "Turn the automatic refresh of links off.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_link_automatic": {
                "description": "Turn the automatic refresh of links back on.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_link_query_info": {
                "description": "Get relation query info - O-rder F-ilter X-flags.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_partitions": {
                "description": "Return all the partitions in a manually partitioned set."
            },
            "populate_from_string": {
                "description": "Populate a table from a string.",
                "arguments": [
                    {
                        "name": "record_format",
                        "type": "C"
                    },
                    {
                        "name": "record_sep",
                        "type": "C"
                    },
                    {
                        "name": "record_data",
                        "type": "C"
                    }
                ]
            },
            "extended_interface": {
                "description": "Get pointer to properties and methods specfic to the table (internals)."
            },
            "mapper_create": {
                "description": "Create a mapping table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "mapping",
                        "type": "C"
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "mapper_change": {
                "description": "Change a mapping tables field maps (keeps same structure of table).",
                "arguments": [
                    {
                        "name": "mapping",
                        "type": "C"
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "backend_create": {
                "description": "Create a backend table (with optional provided cache - which can be provided later by the backend_cache_change).",
                "arguments": [
                    {
                        "name": "unqiue_key",
                        "type": "C"
                    },
                    {
                        "name": "page_size",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "backend_cache_change": {
                "description": "Change the backend table for a created backend.",
                "arguments": [
                    {
                        "name": "tbl",
                        "type": "P"
                    }
                ]
            },
            "context": {
                "description": "Get any context information for the table as it was opened."
            },
            "populate_grid": {
                "description": "Populate via arrays a grid - use $row$ and $column$ as placeholders for the row/column index.\nB - don't resize the array to be bigger\nS - don't resize the array to be smaller\nF - fill (letover) empty fields in array with blanks\nD - include the deleted/marked/unmarked psuedofield in the list of fields (as field #1)\nR+# - start rows at +# position\nC+# - start column at +# position",
                "arguments": [
                    {
                        "name": "expression_template",
                        "type": "C"
                    },
                    {
                        "name": "start_row_state",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "end_row_state",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "variable_frame",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "table_restructure": {
                "description": "field_definitions is a cr-lf delimited list of <fieldname>,<type>,<width>,<dec>.\n",
                "arguments": [
                    {
                        "name": "field_definitions",
                        "type": "C"
                    }
                ]
            },
            "table_create": {
                "description": "field_definitions is a cr-lf delimited list of <fieldname>,<type>,<width>,<dec>.\n",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "field_definitions",
                        "type": "C"
                    }
                ]
            },
            "paged_records_create": {
                "description": "Adds a number of paged records to a table.",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    }
                ]
            },
            "extra_info": {
                "description": "Gets raw extra information embedded in a DBF header.",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    }
                ]
            },
            "memo_check": {
                "description": "Validate the structure of a memo file flags (v-alidate,f-ilemapping,fs-file mapping with sample,r=# - start at record).",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C"
                    },
                    {
                        "name": "repair",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enum_open": {
                "description": "Enumerate all open tables.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "enum_session_open": {
                "description": "Enumerate all open tables in the current session.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "field_space_usage": {
                "description": "Visits all records and dumps field name + space used."
            },
            "generate_sample_definition": {
                "description": "Generates samples for records in the format of <fullname> = <value expression>."
            },
            "suggest": {
                "description": "Suggest a list of possible values given a sample value (to drive auto-complete).",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    },
                    {
                        "name": "limit",
                        "type": "n"
                    },
                    {
                        "name": "moretext",
                        "type": "c"
                    },
                    {
                        "name": "filter",
                        "type": "c"
                    }
                ]
            },
            "external_suggest": {
                "description": "Suggest a list of possible values given a sample value (to drive auto-complete).",
                "arguments": [
                    {
                        "name": "tableorset",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    },
                    {
                        "name": "limit",
                        "type": "n"
                    },
                    {
                        "name": "moretext",
                        "type": "c"
                    },
                    {
                        "name": "filter",
                        "type": "c"
                    }
                ]
            },
            "to_sql_expression": {
                "description": "If convertable to a SQL level expression, return than expression.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "to_sql_columns_format": {
                "description": "Extract SQL field references + a format transform expression.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "to_sql_order": {
                "description": "If expression can be converted in whole OR partically to a SQL filter, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "to_sql_filter": {
                "description": "If expression can be converted in whole OR partically to a SQL order, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "external_to_sql_expression": {
                "description": "If convertable to a SQL level expression, return than expression.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_to_sql_columns_format": {
                "description": "Extract SQL field references + a format transform expression.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_to_sql_order": {
                "description": "If expression can be converted in whole OR partically to a SQL filter, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "external_to_sql_filter": {
                "description": "If expression can be converted in whole OR partically to a SQL order, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "sql_fetch_behind": {
                "description": "Start populating table (if not already populated) returns .t. if already populated.",
                "arguments": [
                    {
                        "name": "position",
                        "type": "n"
                    },
                    {
                        "name": "flags",
                        "type": "c"
                    },
                    {
                        "name": "oncomplete",
                        "type": "c"
                    },
                    {
                        "name": "onabort",
                        "type": "c"
                    }
                ]
            },
            "sql_fetch_cutoff": {
                "description": "Return the number of records that have already been fetched for the table."
            },
            "background_locate": {
                "description": "Search sequentially through a table (by record order) for record that matches criteria.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "flags",
                        "type": "c"
                    },
                    {
                        "name": "oncomplete",
                        "type": "c"
                    },
                    {
                        "name": "onabort",
                        "type": "c"
                    },
                    {
                        "name": "statusmessage",
                        "type": "c"
                    }
                ]
            },
            "background_locate_busy": {
                "description": "Returns true if locate is still going on.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "background_locate_result": {
                "description": "Returns the locate record number result (0 if not found or busy).",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_eval_typeof": {
                "description": "Returns 'sample' data given a column map (to glean type and size information).",
                "arguments": [
                    {
                        "name": "columndefinitions",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "mapping_list_get": {
                "description": "For a low level table representing multiple logic table, get the multiple table definitions."
            },
            "ui_enabled": {
                "description": "Returns if UI enabled flag is set for the table, setting topMost means ignore ui_disable blocks.",
                "arguments": [
                    {
                        "name": "topmost",
                        "type": "L"
                    }
                ]
            },
            "ui_enabled_set": {
                "description": "Set the top ui enabled flag.",
                "arguments": [
                    {
                        "name": "enabled",
                        "type": "L"
                    }
                ]
            },
            "ui_disable_begin": {
                "description": "Disable UI for table for operation within block."
            },
            "ui_disable_end": {
                "description": "End a disabled UI block."
            },
            "get_cursor": {
                "description": "Returns 'cursor' for table (keeps own position)."
            },
            "get_navigation": {
                "description": "Returns a named navigation object bound to the table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "has_navigation": {
                "description": "Returns if the named navigation object exists for a table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "enum_navigation": {
                "description": "Returns the navigation objects attached to the table (N=name,V=viewport size,I=child#,T=tablename which shows children too)).",
                "arguments": [
                    {
                        "name": "format",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "nextrow": {
                "description": "Get the first or next row - return true if the row was found."
            },
            "data": {
                "name": "Data",
                "description": "Get data for a named field.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "column_order": {
                "description": "Return 'A', 'D' or '' for column order status.",
                "arguments": [
                    {
                        "name": "columnname",
                        "type": "c"
                    }
                ]
            },
            "dataentry_get": {
                "description": "Returns a field rules 'data entry object' for table."
            },
            "validate_record": {
                "description": "Returns field rule validation of the current record - format has placeholders $(field), $(error) and  $(errorhtml).",
                "arguments": [
                    {
                        "name": "format",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "change_record": {
                "description": "Change current record, honoring field rules, returns an error object - record not changed if any errors occurred.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "enter_record": {
                "description": "Enter a new record, honoring field rules, returns an error object - record not changed if any errors occurred.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "delete_record": {
                "description": "Delete current record, honoring field rules, returns an error object - record not deleted if any errors occurred."
            },
            "get_record": {
                "description": "Populate field values with record content.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "sql_open_arguments": {
                "description": "Get open arguments for an open active link table.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "activelink": {
                "name": "activeLink",
                "description": "Retrieves active link automation api - (always returns an api - for non-activelink tables, returns appropriate values)."
            },
            "record_identity": {
                "description": "Express the current record as a filter expression (based on key expression), if no expression passed, uses default record identity (based on definition of table).",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "invoke_event": {
                "description": "Invoke a low-level field rule record event (i.e. enter,change,mark,unmark,delete, canenter, canchange etc).",
                "arguments": [
                    {
                        "name": "eventtype",
                        "type": "c"
                    }
                ]
            },
            "sql_open": {
                "description": "Open a just-in-time SQL as a table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "C"
                    },
                    {
                        "name": "selectstatement",
                        "type": "C"
                    },
                    {
                        "name": "portable",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_named_open": {
                "description": "Open a just-in-time named SQL as a table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_reset": {
                "description": "Open a just-in-time SQL as the primary table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "C"
                    },
                    {
                        "name": "selectstatement",
                        "type": "C"
                    },
                    {
                        "name": "portable",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_named_reset": {
                "description": "Open a just-in-time named SQL as the primary table.",
                "arguments": [
                    {
                        "name": "named",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "dictionary",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "flush_indexes": {
                "description": "Force indexes to be reloaded."
            },
            "define_extra_fields": {
                "description": "Define mapping of crlf delimited (flatname|field name|json path).",
                "arguments": [
                    {
                        "name": "fields"
                    }
                ]
            },
            "get_extra_fields": {
                "description": "Get the extra JSON fields associated with the table."
            },
            "pending_query_order": {
                "description": ""
            },
            "recno_list_create": {
                "description": ""
            },
            "recno_list_destroy": {
                "description": ""
            },
            "recno_list": {
                "description": ""
            },
            "tojson": {
                "description": ""
            }
        },
        "__name__": "Dictionary"
    },
    "displayunit": {
        "__functions__": {
            "texttoxpixels": {
                "name": "TextToXPixels",
                "description": "Parse the text description of units to x pixels.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            },
            "texttoypixels": {
                "name": "TextToYPixels",
                "description": "Parse the text description of units to y pixels.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "DisplayUnit"
    },
    "email": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "open": {
                "description": "Open an email session - there are properties to send/recieve."
            },
            "send": {
                "description": "Send a email (use properties to set address etc)."
            },
            "receive": {
                "description": "Recieve email into a database - returns the number of emails received.",
                "arguments": [
                    {
                        "name": "table_pointer",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "uservalidate": {
                "description": "Validates the user."
            },
            "query": {
                "description": "Retrieves the number of emails on the server."
            }
        },
        "__name__": "Email"
    },
    "eventhandler": {},
    "expressiondefinitionparser": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a definition handler given a field definition sample list.",
                "arguments": [
                    {
                        "name": "expressiondefinitions",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "eval": {
                "name": "Eval",
                "description": "Evaluate an expression against a definition (sets error and result properties).",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "ExpressionDefinitionParser"
    },
    "field": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "oncreate": {
                "description": "Public user defined function.",
                "arguments": [
                    {
                        "name": "xmldef",
                        "type": "P"
                    }
                ]
            },
            "onedit": {
                "description": "Public user defined function."
            },
            "is_blank": {
                "description": "Returns TRUE if the field is blank."
            },
            "blank_put": {
                "description": "Blanks the field contents."
            },
            "dec_get": {
                "description": "Gets the fields' number of decimal places."
            },
            "name_get": {
                "description": "Gets the field name."
            },
            "fullname_get": {
                "description": "Gets the full field name (Table and Field)."
            },
            "type_get": {
                "description": "Gets the field type."
            },
            "value_get": {
                "description": "Gets the field contents. Clipboard format is optional format of data.",
                "arguments": [
                    {
                        "name": "clipboard_format",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "initial_value_get": {
                "description": "Gets the initial field contents (before data entry)."
            },
            "value_put": {
                "description": "Sets the field contents. Clipboard format is optional format of data.",
                "arguments": [
                    {
                        "name": "value",
                        "type": "A"
                    },
                    {
                        "name": "clipboard_format",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "width_get": {
                "description": "Gets the fields' width."
            },
            "flags_get": {
                "description": "Gets the fields' behaviour flags."
            },
            "memo_write_to_file": {
                "description": "Write the contents of a memo field to a file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "memo_read_from_file": {
                "description": "Read the contents of a file into a memo.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "table_get": {
                "description": "Returns the table that the field is a member of."
            },
            "handle": {
                "description": "Returns an old style handle."
            },
            "handle_set": {
                "description": "Given an old style 'handle', set the field pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current field valid."
            },
            "tag_get": {
                "description": "If the field is indexed, return the tagname, else return an empty string."
            },
            "expr_get": {
                "description": "Return the expression if field is a calculated field."
            },
            "expr_set": {
                "description": "Change the expression if field is a calculated field.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "link_type_get": {
                "description": "Returns type of link if field is a linking key, blank if field is not a linking key."
            },
            "link_table_get": {
                "description": "Returns table of link if field is a linking key, blank if field is not a linking key."
            },
            "has_rules": {
                "description": "Returns TRUE if field has loaded rules."
            },
            "rules_get": {
                "description": "Returns active field rule information for this field."
            },
            "is_null": {
                "description": "Returns TRUE if the field's optional null flag is set."
            },
            "initial_is_null": {
                "description": "Returns TRUE if the field's initial value optional null flag is set."
            },
            "null_put": {
                "description": "Sets a field's optional null flag on or off (if the field is blank).",
                "arguments": [
                    {
                        "name": "null",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "memo_block_get": {
                "description": "Gets the 'block' for a memo field."
            }
        },
        "__name__": "Field"
    },
    "file": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "copy2": {
                "description": "Same as File.Copy(), but if the dest_filename folder does not exist, then creates it.",
                "arguments": [
                    {
                        "name": "source_filename",
                        "type": "C"
                    },
                    {
                        "name": "dest_filename",
                        "type": "C"
                    },
                    {
                        "name": "only_copy_if_newer",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "copy_folder": {
                "name": "Copy_Folder",
                "description": "Copy all of the files in a folder from one folder to another. All sub-folders are copies as well.",
                "arguments": [
                    {
                        "name": "sourcefolder",
                        "type": "C"
                    },
                    {
                        "name": "targetfolder",
                        "type": "C"
                    },
                    {
                        "name": "only_copy_if_newer",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_time": {
                "description": "Returns the date/time at which a file was created",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "dir_create_recurse": {
                "description": " Creates a folder, creating as many sub-folders as necessary.",
                "arguments": [
                    {
                        "name": "folder",
                        "type": "C"
                    }
                ]
            },
            "fromproperty_saveas": {
                "name": "FromProperty_SaveAs",
                "description": "save a file from a property as a specific type, such as 'blob', 'string', 'json', 'json-schema:UX'",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "props",
                        "type": "P"
                    },
                    {
                        "name": "saveas",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "read_time": {
                "description": "Returns the date/time at which a file was last read",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "send": {
                "name": "Send",
                "description": "Send one or more files to an address. Options: C or Z = compress (i.e. zip) files before sending.",
                "arguments": [
                    {
                        "name": "filenames",
                        "type": "C"
                    },
                    {
                        "name": "emailaddress",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "zipname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "comment",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "use_a5_email_client",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "store_in_outbox",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "show_client",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "size": {
                "description": "Returns the size of a file",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "update_time": {
                "description": "Returns the date/time at which a file was last updated",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "open": {
                "description": "Open an existing file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N"
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current file valid."
            },
            "create": {
                "description": "Create a new file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N"
                    }
                ]
            },
            "close": {
                "description": "Close an open file."
            },
            "read": {
                "description": "Read bytes from file into string.",
                "arguments": [
                    {
                        "name": "length",
                        "type": "N"
                    }
                ]
            },
            "write": {
                "description": "Write string to file.",
                "arguments": [
                    {
                        "name": "string",
                        "type": "C"
                    },
                    {
                        "name": "length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "readb": {
                "description": "Read bytes from file into a blob.",
                "arguments": [
                    {
                        "name": "length",
                        "type": "N"
                    }
                ]
            },
            "writeb": {
                "description": "Write blob to file.",
                "arguments": [
                    {
                        "name": "blob",
                        "type": "B"
                    }
                ]
            },
            "seek": {
                "description": "Set the position in the file.",
                "arguments": [
                    {
                        "name": "position",
                        "type": "N"
                    }
                ]
            },
            "pos_get": {
                "description": "Get the position in the file."
            },
            "bytes_get": {
                "description": "Get the length of the file in bytes."
            },
            "text_encoding": {
                "description": "Get the encoding type of a text file.\n\nPossible Values Include: (ASCII, UTF16LE, UTF16BE, UTF32LE, UTF32BE)"
            },
            "chars_get": {
                "description": "Get the length of the file in characters."
            },
            "flush": {
                "description": "Flush contents of file to disk."
            },
            "write_line": {
                "description": "Write string to file, add a trailing <CR>-<LF>.",
                "arguments": [
                    {
                        "name": "string",
                        "type": "C"
                    }
                ]
            },
            "read_line": {
                "description": "Read a line from the file."
            },
            "eof": {
                "description": "Return TRUE if positioned at the end of the file."
            },
            "scan": {
                "description": "Scans foreward from location in file for case-sensitive text, returns offset >= 0 if found, else returns -1.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "scani": {
                "description": "Scans foreward from location in file for case-insensitive text, returns offset >= 0 if found, else returns -1.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "insert_write": {
                "description": "Inserts text into file at position (first following content).",
                "arguments": [
                    {
                        "name": "pos",
                        "type": "N"
                    },
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "rename": {
                "description": "Rename a file.",
                "arguments": [
                    {
                        "name": "old_name",
                        "type": "C"
                    },
                    {
                        "name": "new_name",
                        "type": "C"
                    }
                ]
            },
            "copy": {
                "description": "Copy a file.",
                "arguments": [
                    {
                        "name": "source_filename",
                        "type": "C"
                    },
                    {
                        "name": "dest_filename",
                        "type": "C"
                    }
                ]
            },
            "remove": {
                "description": "Remove a file.",
                "arguments": [
                    {
                        "name": "file_name",
                        "type": "C"
                    }
                ]
            },
            "exists": {
                "description": "Does file exist.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "fullname_get": {
                "description": "Return full filename (as resolved by system).",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "zip": {
                "description": "Zip files listed - expects a comma separated list.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "files",
                        "type": "C"
                    },
                    {
                        "name": "zip_flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "base_path",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "zip_from_blob": {
                "description": "Zip content from a blob.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "content",
                        "type": "B"
                    }
                ]
            },
            "zip_from_string": {
                "description": "Zip content from a content.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "content",
                        "type": "C"
                    }
                ]
            },
            "unzip": {
                "description": "Extract files from a zip file - use optional name/path.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "files",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "path",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "unzip_flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "unzip_to_blob": {
                "description": "Extract a zip file to a blob.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "unzip_to_string": {
                "description": "Extract a zip file to a string.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "unzip_exists": {
                "description": "Returns true if filename exists inside the zip file.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "ziplist": {
                "description": "Report on the contents of a zip file.",
                "arguments": [
                    {
                        "name": "zipfilename",
                        "type": "C"
                    },
                    {
                        "name": "separator",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "drives_get": {
                "description": "Returns a list of the valid drives.",
                "arguments": [
                    {
                        "name": "separator",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "machines_get": {
                "description": "Returns a list of the valid servers - options S-storage,P-drinters,D-include domains,F=<format> - special format options C-omment,P-rovider,L-ocalname,T-ype,B-ase,M-achine,R-esource.",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "drive_type": {
                "description": "Returns The type of the drive.",
                "arguments": [
                    {
                        "name": "drive",
                        "type": "C"
                    }
                ]
            },
            "temp_path_get": {
                "description": "Returns the windows temporary file path."
            },
            "package_path_get": {
                "description": "Returns the folder alpha anywhere installs and looks for packages in."
            },
            "attributes_get": {
                "description": "Returns A list of file attribute flags for the file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "attributes_set": {
                "description": "Sets file attributes for a file (-/+ R-readonly H-hidden A-Archive N-Normal).",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "attributes",
                        "type": "C"
                    }
                ]
            },
            "shortname_to_longname": {
                "description": "Converts a shortname to a longname.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "longname_to_shortname": {
                "description": "Converts a longname to a shortname.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "drive_space_avail": {
                "description": "Returns the number of bytes free on the disk.",
                "arguments": [
                    {
                        "name": "drive",
                        "type": "C"
                    }
                ]
            },
            "drive_space_total": {
                "description": "Returns the number of bytes that can be stored on the drive."
            },
            "filename_parse": {
                "description": "Returns the component(s) of the filename in the order specified (D=drive,P=Path,N=Name,E=Extension).",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "component",
                        "type": "C"
                    }
                ]
            },
            "path_normalize": {
                "description": "Given a base path and a relative path return the resulting normalized path.",
                "arguments": [
                    {
                        "name": "basepath",
                        "type": "C"
                    },
                    {
                        "name": "realitivepath",
                        "type": "C"
                    }
                ]
            },
            "path_relative": {
                "description": "Given a base path and a fully qualified path return the resulting relative path.",
                "arguments": [
                    {
                        "name": "basepath",
                        "type": "C"
                    },
                    {
                        "name": "fullpath",
                        "type": "C"
                    }
                ]
            },
            "path_final": {
                "description": "Returns the 'final' path.",
                "arguments": [
                    {
                        "name": "path",
                        "type": "C"
                    }
                ]
            },
            "dir_create": {
                "description": "Creates A new directory.",
                "arguments": [
                    {
                        "name": "newdirectory",
                        "type": "C"
                    }
                ]
            },
            "dir_put": {
                "description": "Change to a directory.",
                "arguments": [
                    {
                        "name": "directory",
                        "type": "C"
                    }
                ]
            },
            "dir_remove": {
                "description": "Remove a directory.",
                "arguments": [
                    {
                        "name": "directory",
                        "type": "C"
                    }
                ]
            },
            "dir_get": {
                "description": "Get the current working directory."
            },
            "temp_create": {
                "description": "Create a temp filename.",
                "arguments": [
                    {
                        "name": "path",
                        "type": "C"
                    }
                ]
            },
            "to_string": {
                "description": "Reads a file to a in memory string.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "to_blob": {
                "description": "Reads a file to a in memory blob.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "to_property": {
                "description": "Reads a file to a in dot variable - returns file contents as string.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "pointer",
                        "type": "P"
                    }
                ]
            },
            "append": {
                "description": "Writes a string or blob to a file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "string",
                        "type": "C"
                    }
                ]
            },
            "append_line": {
                "description": "Writes a string to a file followed by a carriage return and line feed.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "string",
                        "type": "C"
                    }
                ]
            },
            "from_string": {
                "description": "Writes a string to a file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "string",
                        "type": "C"
                    }
                ]
            },
            "from_blob": {
                "name": "From_blob",
                "description": "Writes a blob to a file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "B"
                    }
                ]
            },
            "from_property": {
                "name": "From_property",
                "description": "Writes pointer contents to a file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "pointer",
                        "type": "P"
                    }
                ]
            },
            "watch_create": {
                "description": "Executes code on change of some aspect of a path changes (flags F= files renamed/add/delete D= sub-directory renamed/added/deleted A=Attributes changed L=Length of file(s) changed T=Time Changed S=File security changed  R=recurse).",
                "arguments": [
                    {
                        "name": "watchname",
                        "type": "C"
                    },
                    {
                        "name": "path",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "C"
                    },
                    {
                        "name": "code",
                        "type": "C"
                    }
                ]
            },
            "watch_destroy": {
                "description": "Removes a registered 'watch'.",
                "arguments": [
                    {
                        "name": "watchname",
                        "type": "C"
                    }
                ]
            },
            "watch_enumerate": {
                "description": "Enumerate all file watches - format F=File/Path, N=Wwatch Name O=Option Flags.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "stream_copy": {
                "description": "Perform a streamed copy - control variables include .exit and .bytes .",
                "arguments": [
                    {
                        "name": "stream_from",
                        "type": "P"
                    },
                    {
                        "name": "stream_to",
                        "type": "P"
                    },
                    {
                        "name": "control",
                        "type": "P"
                    },
                    {
                        "name": "chunksize",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "max_length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "stream_to_string": {
                "description": "Perform a streamed copy to a string- control variables include .exit and .bytes .",
                "arguments": [
                    {
                        "name": "stream_from",
                        "type": "P"
                    },
                    {
                        "name": "control",
                        "type": "P"
                    },
                    {
                        "name": "chunksize",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "max_length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "stream_to_blob": {
                "description": "Perform a streamed copy to a blob- control variables include .exit and .bytes .",
                "arguments": [
                    {
                        "name": "stream_from",
                        "type": "P"
                    },
                    {
                        "name": "control",
                        "type": "P"
                    },
                    {
                        "name": "chunksize",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "max_length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "stream_from_string": {
                "description": "Perform a streamed copy from a string- control variables include .exit and .bytes .",
                "arguments": [
                    {
                        "name": "stream_to",
                        "type": "P"
                    },
                    {
                        "name": "string",
                        "type": "C"
                    },
                    {
                        "name": "control",
                        "type": "P"
                    },
                    {
                        "name": "chunksize",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "max_length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "stream_from_blob": {
                "description": "Perform a streamed copy from a blob- control variables include .exit and .bytes .",
                "arguments": [
                    {
                        "name": "stream_to",
                        "type": "P"
                    },
                    {
                        "name": "string",
                        "type": "C"
                    },
                    {
                        "name": "control",
                        "type": "P"
                    },
                    {
                        "name": "chunksize",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "max_length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "ftp_parse": {
                "description": "Process FTP list data.",
                "arguments": [
                    {
                        "name": "ftp_data",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "dependencies": {
                "description": "Pass in a list of dependencies (file that must be >= is always first separate with '|') - returns list of dependencies that are not >=.",
                "arguments": [
                    {
                        "name": "file_dependencies",
                        "type": "C"
                    }
                ]
            },
            "enum_open": {
                "description": "Get a list of all the open files.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "local_to_network": {
                "description": "Convert mapped names to UNC names.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "sys_path": {
                "description": "Retreive a windows system path given a pathType (admintools,appdata,common_admintools,common_appdata,common_documents,common_program_files,cookies,history,internet_cache,local_appdata,local_appdata,mypictures,personal,program_files,system,windows) with options ,(create,dont_verify) .",
                "arguments": [
                    {
                        "name": "pathtype",
                        "type": "C"
                    }
                ]
            },
            "change_access": {
                "description": "Grant/Deny security to all users. accessFlags are characters for  +/i arwe  for  +(grant) - (deny) a(ll) r(ead) w(rite) e(x)ecute.",
                "arguments": [
                    {
                        "name": "path",
                        "type": "C"
                    },
                    {
                        "name": "accessflags",
                        "type": "C"
                    }
                ]
            },
            "typeof_property": {
                "description": "Returns the type that the property filename is stored as (property_to_blob, property_to_string, json , json-template etc).",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "format_size": {
                "description": "Returns the size formatted in bytes, KB, MB, GB, etc.",
                "arguments": [
                    {
                        "name": "size",
                        "type": "N"
                    },
                    {
                        "name": "decimal_places",
                        "type": "N"
                    }
                ]
            }
        },
        "__name__": "File"
    },
    "filefind": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "get_recurse": {
                "description": " wrapper for filefind.get() that recursively finds all files in pattern.  Path is the starting path.",
                "arguments": [
                    {
                        "name": "path",
                        "type": "C"
                    },
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "filefindformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "skipfolders",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "list_new_files": {
                "name": "List_New_Files",
                "description": "Scan folders and sub-folders for all files updated after date/time specified by datestring and timestring. If datestring and timestring are not specified, then files modified today are returned.",
                "arguments": [
                    {
                        "name": "path",
                        "type": "C"
                    },
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "datestring",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "timestring",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "am_pm",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "first": {
                "description": "Find first file, returns a new FileFind property.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "get": {
                "description": "Returns a string containing all the files - you can specify what gets listed.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "filefindformat",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "get_recurse_low": {
                "description": "Same as Get() but recurses subdirectories.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "filefindformat",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "grep": {
                "name": "Grep",
                "description": "Returns a string containing all the files - you can specify what greps listed.",
                "arguments": [
                    {
                        "name": "file_pattern",
                        "type": "C"
                    },
                    {
                        "name": "regular_expression",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "grep_format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "regex_options",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "grep_recurse": {
                "name": "Grep_Recurse",
                "description": "Same as grep() but recurses subdirectories.",
                "arguments": [
                    {
                        "name": "file_pattern",
                        "type": "C"
                    },
                    {
                        "name": "regular_expression",
                        "type": "C"
                    },
                    {
                        "name": "file_attribute",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "grep_format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "regex_options",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "next": {
                "description": "Find next file in directory."
            },
            "eof": {
                "description": "Returns TRUE if the last operation read past end."
            },
            "name": {
                "description": "Return the current filename for the file search."
            },
            "is_archive": {
                "description": "Return TRUE if the current file is a archive file."
            },
            "is_directory": {
                "description": "Return TRUE if the current file is a directory."
            },
            "is_hidden": {
                "description": "Return TRUE if the current file is hidden."
            },
            "is_system": {
                "description": "Return TRUE if the current file is a system file."
            },
            "last_write_time": {
                "description": "Return the last time the file was written to."
            },
            "creation_time": {
                "description": "Return the time the file was created."
            },
            "last_access_time": {
                "description": "Return the last time the file was accessed."
            }
        },
        "__name__": "FileFind"
    },
    "filesystemdictionary": {
        "__functions__": {
            "filenameget": {
                "name": "FileNameGet",
                "description": "Based of a filename,name,type and mapping, determine what (if any) filename would be mapped to.",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "c"
                    },
                    {
                        "name": "type",
                        "type": "c"
                    },
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "mapping",
                        "type": "c"
                    }
                ]
            },
            "filecontentsmemoget": {
                "name": "FileContentsMemoGet",
                "description": "Based of a filename,name,type and mapping, determine contents of the memo component.",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "c"
                    },
                    {
                        "name": "type",
                        "type": "c"
                    },
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "mapping",
                        "type": "c"
                    }
                ]
            },
            "filecontentsmemoput": {
                "name": "FileContentsMemoPut",
                "description": "Based of a filename,name,type and mapping, set contents of the memo component.",
                "arguments": [
                    {
                        "name": "dictionaryname",
                        "type": "c"
                    },
                    {
                        "name": "type",
                        "type": "c"
                    },
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "mapping",
                        "type": "c"
                    },
                    {
                        "name": "data",
                        "type": "a"
                    }
                ]
            },
            "batchbegin": {
                "name": "BatchBegin",
                "description": "Re-use cached filesystem dictionaries untill batchend()."
            },
            "batchend": {
                "name": "BatchEnd",
                "description": "Re-use cached filesystem dictionaries untill batchend()."
            },
            "preloadbegin": {
                "name": "PreloadBegin",
                "description": "cached files get populated up front."
            },
            "preloadend": {
                "name": "PreloadEnd",
                "description": "end cached files getting populated up front."
            }
        },
        "__methods__": {
            "loadrecord": {
                "name": "LoadRecord",
                "description": "Load a record from the dictionary.",
                "arguments": [
                    {
                        "name": "recno",
                        "type": "N"
                    }
                ]
            },
            "loadandmarkrecord": {
                "name": "LoadAndMarkRecord",
                "description": "Mark a record as loaded (avoid reloads).",
                "arguments": [
                    {
                        "name": "recno",
                        "type": "N"
                    }
                ]
            },
            "commitrecord": {
                "name": "CommitRecord",
                "description": "Commit current table record to filesystem copy."
            },
            "deleterecord": {
                "name": "DeleteRecord",
                "description": "Delete the current record from the filesystem dictionary."
            },
            "modifiedtime": {
                "name": "ModifiedTime",
                "description": "Return the latest time of any file in the dictionary."
            },
            "shadowfilename": {
                "name": "ShadowFileName",
                "description": "Return the original 'shadow file' for the instance."
            },
            "setshortcutfile": {
                "name": "SetShortcutFile",
                "description": "Set the name of the file.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "FileSystemDictionary"
    },
    "geometry": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new geometry manager.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    },
                    {
                        "name": "states",
                        "type": "c",
                        "optional": true
                    }
                ]
            }
        },
        "__methods__": {
            "makecurrentvisible": {
                "name": "MakeCurrentVisible",
                "description": "Scroll current shape to be visible."
            },
            "scrolllockcurrentinst": {
                "name": "ScrollLockCurrentInst",
                "description": "Set a new current Instance shape, attempting to keep it at the same location.",
                "arguments": [
                    {
                        "name": "instname",
                        "type": "c"
                    }
                ]
            },
            "extentwidth": {
                "name": "ExtentWidth",
                "description": "Get the extent."
            },
            "extentheight": {
                "name": "ExtentHeight",
                "description": "Get the extent."
            },
            "formatter": {
                "name": "Formatter",
                "description": "Create a geometry output formatter object.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "C"
                    }
                ]
            },
            "viewport": {
                "name": "ViewPort",
                "description": "Create a viewport to use for output/queries.",
                "arguments": [
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    },
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "viewportx",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "viewporty",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "viewportwidth",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "viewportheight",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "shapeexists": {
                "name": "ShapeExists",
                "description": "Does of name a shape exist.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getshape": {
                "name": "GetShape",
                "description": "Get a pointer to a shape.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "outerdefinition": {
                "name": "OuterDefinition",
                "description": "Represent control and children as definition."
            },
            "innerdefinition": {
                "name": "InnerDefinition",
                "description": "Represent children as definition."
            }
        },
        "__name__": "Geometry"
    },
    "geometryformatter": {
        "__methods__": {
            "dump": {
                "name": "Dump",
                "description": "Get contents of geometry formatter."
            }
        },
        "__name__": "GeometryFormatter"
    },
    "imageresource": {
        "__functions__": {
            "get": {
                "name": "Get",
                "description": "Gets the current image resource object from the environment."
            }
        },
        "__methods__": {
            "getbitmapnamemap": {
                "name": "GetBitmapNameMap",
                "description": "Get the bitmap alias dictionary, for directly translated bitmap aliases."
            },
            "cleanupimages": {
                "name": "CleanupImages",
                "description": "Unloads all resource bitmaps (i.e. file, system or dictionary)."
            }
        },
        "__name__": "ImageResource"
    },
    "importoperationbuilder": {
        "__methods__": {
            "addfield": {
                "name": "Addfield",
                "description": "Add a field.",
                "arguments": [
                    {
                        "name": "field",
                        "type": "Alpha5::ImportOperationField"
                    }
                ]
            },
            "age": {
                "name": "Age",
                "description": "Return age counter."
            },
            "bumpage": {
                "name": "BumpAge",
                "description": "Bump the age counter."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "closesampletable": {
                "name": "CloseSampleTable",
                "description": "Close the sample table."
            },
            "deletefield": {
                "name": "Deletefield",
                "description": "Delete a field.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "fieldnamefixup": {
                "name": "FieldNameFixup",
                "description": "Rename duplicate field names in field list."
            },
            "fieldnamelookup": {
                "name": "FieldNameLookup",
                "description": "Return index of field of name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "fixedenabled": {
                "name": "FixedEnabled",
                "description": "Returns true if current import allows used to add/remove columns."
            },
            "getcolumnnames": {
                "name": "GetColumnNames",
                "description": "Return list of names displayed for each column."
            },
            "getcolumnwidths": {
                "name": "GetColumnWidths",
                "description": "Returns column widths for fixed imports."
            },
            "getdefaults": {
                "name": "GetDefaults",
                "description": "Examine the file & fill in import type & defaults."
            },
            "getsampleline": {
                "name": "GetSampleLine",
                "description": "Returns sample data line for fixed imports (returns blank if we are past the end).",
                "arguments": [
                    {
                        "name": "line",
                        "type": "N"
                    }
                ]
            },
            "getsamplelinecount": {
                "name": "GetSampleLineCount",
                "description": "Returns sample data lines for fixed imports."
            },
            "getsampletable": {
                "name": "GetSampleTable",
                "description": "Returns pointer to sample table data."
            },
            "getseparators": {
                "name": "GetSeparators",
                "description": "Examine ascii file & determime separators."
            },
            "importsample": {
                "name": "ImportSample",
                "description": "Import sample data to memory."
            },
            "insertfield": {
                "name": "Insertfield",
                "description": "Insert a new field.",
                "arguments": [
                    {
                        "name": "field",
                        "type": "Alpha5::ImportOperationField"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "mergecolumn": {
                "name": "MergeColumn",
                "description": "Split a column at a location.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "N"
                    }
                ]
            },
            "movefield": {
                "name": "Movefield",
                "description": "Move a block of field items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "reloadsample": {
                "name": "ReloadSample",
                "description": "Sample data (i.e. GetSampleLineCount() etc) - needs to be done."
            },
            "resizecolumn": {
                "name": "ResizeColumn",
                "description": "Resize a fixed column (change to field definition).",
                "arguments": [
                    {
                        "name": "column",
                        "type": "N"
                    },
                    {
                        "name": "width",
                        "type": "N"
                    }
                ]
            },
            "saveimport": {
                "name": "SaveImport",
                "description": "Save Import record content."
            },
            "splitcolumn": {
                "name": "SplitColumn",
                "description": "Split a column at a location.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "N"
                    },
                    {
                        "name": "offset",
                        "type": "N"
                    }
                ]
            }
        },
        "__name__": "ImportOperationBuilder"
    },
    "importoperationfield": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ImportOperationField"
    },
    "index": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "close": {
                "description": "Close the index."
            },
            "drop": {
                "description": "Drop the index from its table."
            },
            "handle": {
                "description": "Returns the old style handle."
            },
            "handle_set": {
                "description": "Given an old style 'handle', set the index pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "name_get": {
                "description": "Gets the index tag name."
            },
            "update": {
                "description": "Updates an index."
            },
            "table_get": {
                "description": "Returns the table that the index is on."
            },
            "filename_get": {
                "description": "Gets the index filename."
            },
            "order_get": {
                "description": "Gets the index order expression."
            },
            "filter_get": {
                "description": "Gets the index filter expression."
            },
            "flags_get": {
                "description": "Gets the index flags."
            },
            "records_get": {
                "description": "Gets the number of records in an index."
            },
            "type_get": {
                "description": "Gets the type of index."
            },
            "is_valid": {
                "description": "Is the current index valid."
            },
            "find": {
                "description": "Find a key in the index - returns the key found.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "P"
                    }
                ]
            },
            "find_next": {
                "description": "Find the key After the specified key - returns the key found.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "P"
                    }
                ]
            },
            "find_previous": {
                "description": "Find the key Before the specified key, true TRUE if exact match, else returns key found.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "P"
                    }
                ]
            },
            "key_get": {
                "description": "Returns the current key value."
            },
            "find_first": {
                "description": "Returns the first key value."
            },
            "find_last": {
                "description": "Returns the last key value."
            },
            "recno_list_get": {
                "description": "Returns list of record numbers from head or tail of index/query (direction depends on +/- records).",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    },
                    {
                        "name": "step",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "key_list_get": {
                "description": "Returns cr-lf separated list of keys from head or tail of index/query (direction depends on +/- records).",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    },
                    {
                        "name": "step",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "match_prefix",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "key_position_get": {
                "description": "Returns position of the record within the index.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N"
                    }
                ]
            },
            "key_record_get": {
                "description": "Returns record at position within the index.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N"
                    }
                ]
            },
            "fetch_state_list_get": {
                "description": "Returns list of fetch states from head or tail of an ASX file (direction depends on +/- records).",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    },
                    {
                        "name": "step",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "refresh": {
                "description": "Refresh an query if the table the query is based on is newer, returns TRUE if rebuild was needed."
            },
            "persist": {
                "description": "If the index is a query, then set flag to indicate if it should stay around.",
                "arguments": [
                    {
                        "name": "keep",
                        "type": "L"
                    }
                ]
            },
            "external_key_dump": {
                "description": "Dumps keys from an index file using optional filter/order - format K-key,R-record.",
                "arguments": [
                    {
                        "name": "indexfile",
                        "type": "c"
                    },
                    {
                        "name": "order",
                        "type": "c"
                    },
                    {
                        "name": "filter",
                        "type": "c"
                    },
                    {
                        "name": "format",
                        "type": "c"
                    },
                    {
                        "name": "matchingkey",
                        "type": "A",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "Index"
    },
    "invarientresolver": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a resolver with an expression and the ID's that get resolved to.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "argnames",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "eval": {
                "name": "Eval",
                "description": "In the positions of the registered names, put the values.",
                "arguments": [
                    {
                        "name": "arg1",
                        "type": "a"
                    },
                    {
                        "name": ".."
                    }
                ]
            }
        },
        "__name__": "InvarientResolver"
    },
    "layoutblock": {
        "__methods__": {
            "savecontrol": {
                "name": "SaveControl",
                "description": "Save a control.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "controldef",
                        "type": "p"
                    },
                    {
                        "name": "saveall",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "addcontrol": {
                "name": "AddControl",
                "description": "Add a control to a layout block.",
                "arguments": [
                    {
                        "name": "controldef",
                        "type": "p"
                    }
                ]
            }
        },
        "__name__": "LayoutBlock"
    },
    "layoutdefinition": {
        "__methods__": {
            "savelayout": {
                "name": "SaveLayout",
                "description": "Save layout to a propdef.",
                "arguments": [
                    {
                        "name": "layoutdef",
                        "type": "p"
                    },
                    {
                        "name": "saveall",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "loadlayout": {
                "name": "LoadLayout",
                "description": "Load the contents from a propdef.",
                "arguments": [
                    {
                        "name": "layoutdef",
                        "type": "p"
                    }
                ]
            },
            "savefields": {
                "name": "SaveFields",
                "description": "Save layout fields to a propdef.",
                "arguments": [
                    {
                        "name": "layoutfielddef",
                        "type": "p"
                    },
                    {
                        "name": "saveall",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "loadfields": {
                "name": "LoadFields",
                "description": "Load the contents of the layout fields from a propdef.",
                "arguments": [
                    {
                        "name": "layoutfielddef",
                        "type": "p"
                    }
                ]
            },
            "addwarning": {
                "name": "AddWarning",
                "description": "Active layout places any warnings in the layout pointer.",
                "arguments": [
                    {
                        "name": "warning",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "LayoutDefinition"
    },
    "metacontrolcontainer": {
        "__methods__": {
            "sendevent": {
                "name": "SendEvent",
                "description": "Send an event to the meta control container.",
                "arguments": [
                    {
                        "name": "event",
                        "type": "c"
                    },
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "refresh": {
                "name": "Refresh",
                "description": "Refresh container, with optional depedencies (for targetted changes).",
                "arguments": [
                    {
                        "name": "dependencies",
                        "type": "c",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "MetaControlContainer"
    },
    "metacontrolcreateargs": {
        "implementationtype": {
            "__enumeration__": [
                "Windowless",
                "Activex"
            ],
            "__name__": "ImplementationType"
        },
        "sourcetype": {
            "__enumeration__": [
                "XML",
                "Arguments"
            ],
            "__name__": "SourceType"
        },
        "__name__": "MetaControlCreateArgs"
    },
    "metaevalcontext": {
        "__functions__": {
            "getfromenvironment": {
                "name": "GetFromEnvironment",
                "description": "From an environment pointer, create an environment",
                "arguments": [
                    {
                        "name": "env",
                        "type": "p"
                    }
                ]
            }
        },
        "__methods__": {
            "getproperty": {
                "name": "GetProperty",
                "description": "Get a property for the context.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getpropertyvalue": {
                "name": "GetPropertyValue",
                "description": "Get a property value for the context.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "setpropertyvalue": {
                "name": "SetPropertyValue",
                "description": "Set a property value for the context.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            },
            "haspropertyvalue": {
                "name": "HasPropertyValue",
                "description": "Test if property exists.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "comparepropertyvalue": {
                "name": "ComparePropertyValue",
                "description": "Compare a property value to another value for the context.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            }
        },
        "__name__": "MetaEvalContext"
    },
    "metaevalproperty": {
        "__methods__": {
            "compare": {
                "name": "Compare",
                "description": "Compare property to a value.",
                "arguments": [
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            }
        },
        "__name__": "MetaEvalProperty"
    },
    "quickcontrolentry": {
        "__enumeration__": [
            "factory",
            "capabilities"
        ],
        "__name__": "QuickControlEntry"
    },
    "quickcontrolinstance": {
        "__enumeration__": [
            "definition",
            "instance"
        ],
        "__name__": "QuickControlInstance"
    },
    "quickcontrollibrary": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new control library."
            }
        },
        "__methods__": {
            "addcontrol": {
                "name": "AddControl",
                "description": "Add a control at index (and optional name).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "controldef",
                        "type": "p"
                    },
                    {
                        "name": "controlname",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "addborder": {
                "name": "AddBorder",
                "description": "Add a border (and optional name).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "borderdef",
                        "type": "p"
                    }
                ]
            }
        },
        "__name__": "QuickControlLibrary"
    },
    "quickcontrolpredefs": {
        "__functions__": {
            "get": {
                "name": "Get",
                "description": "Get a pointer to the quickControl predefs."
            }
        },
        "__methods__": {
            "addcontrol": {
                "name": "AddControl",
                "description": "Add a control at index.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "controldef",
                        "type": "p"
                    },
                    {
                        "name": "controlname",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "addborder": {
                "name": "AddBorder",
                "description": "Add a border (and optional name).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "borderdef",
                        "type": "p"
                    }
                ]
            }
        },
        "__name__": "QuickControlPredefs"
    },
    "quickdraw": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new quick draw object (with settings/windows).",
                "arguments": [
                    {
                        "name": "initialization",
                        "type": "c"
                    },
                    {
                        "name": "controllibrary",
                        "type": "p",
                        "optional": true
                    }
                ]
            }
        },
        "__methods__": {
            "render": {
                "name": "Render",
                "description": "Render to the current draw environment.",
                "arguments": [
                    {
                        "name": "drawcode",
                        "type": "c"
                    }
                ]
            },
            "renderbitmap": {
                "name": "RenderBitmap",
                "description": "Render to a bitmap.",
                "arguments": [
                    {
                        "name": "bitmapname",
                        "type": "c"
                    },
                    {
                        "name": "drawcode",
                        "type": "c"
                    }
                ]
            },
            "initialize": {
                "name": "Initialize",
                "description": "Register more resources / establish window(s).",
                "arguments": [
                    {
                        "name": "initialization",
                        "type": "c"
                    }
                ]
            },
            "eval": {
                "name": "Eval",
                "description": "Evaluate expression in the context that the quick draw object was created.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "getextent": {
                "name": "GetExtent",
                "description": "Get an extent for draw code.",
                "arguments": [
                    {
                        "name": "drawcode",
                        "type": "c"
                    }
                ]
            },
            "getlayoutcontrol": {
                "name": "GetLayoutControl",
                "description": "Get a pointer to a layout control we registered.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "droplayoutcontrol": {
                "name": "DropLayoutControl",
                "description": "Remove a layout control we registered.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "addlayoutcontrol": {
                "name": "AddLayoutControl",
                "description": "Register a layout control with a name.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    },
                    {
                        "name": "control",
                        "type": "control::control"
                    }
                ]
            },
            "openlayout": {
                "name": "OpenLayout",
                "description": "Open a layout view in a new window.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    },
                    {
                        "name": "windowdef",
                        "type": "c"
                    }
                ]
            },
            "close": {
                "name": "Close",
                "description": "Close quick draw object (causes unbind from environment)."
            }
        },
        "__name__": "QuickDraw"
    },
    "quickdrawextent": {
        "__enumeration__": [
            "defined",
            "x",
            "y",
            "width",
            "height"
        ],
        "__name__": "QuickDrawExtent"
    },
    "quickwindow": {
        "__methods__": {
            "rendercontrols": {
                "name": "RenderControls",
                "description": "Resolves control definitions (using controlLibrary) in drawcode.",
                "arguments": [
                    {
                        "name": "drawcode",
                        "type": "c"
                    }
                ]
            },
            "close": {
                "name": "Close",
                "description": "Closes an open window (keeps the definition)."
            },
            "open": {
                "name": "Open",
                "description": "Opens a window (if not already open)."
            },
            "destroy": {
                "name": "Destroy",
                "description": "Destroy a window."
            },
            "move": {
                "name": "Move",
                "description": "Move (and optionally resize) a window.",
                "arguments": [
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "height",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "eventhandle": {
                "name": "EventHandle",
                "description": "Pass in an event handler.",
                "arguments": [
                    {
                        "name": "eventhandler",
                        "type": "p"
                    }
                ]
            },
            "arrive": {
                "name": "Arrive",
                "description": "Attempt to arrive at a control with an id (must be visible) - return true on success.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "update": {
                "name": "Update",
                "description": "Send an update message to a window.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "controlvisible": {
                "name": "ControlVisible",
                "description": "is control visible (defined in the window quickDraw).",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "controlexists": {
                "name": "ControlExists",
                "description": "indicates that calling GetControl() will work - a control instance exist or is retrievable.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "getcontrol": {
                "name": "GetControl",
                "description": "attempt to get a pointer to a control.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "createcontrol": {
                "name": "CreateControl",
                "description": "Create a control instance from a definition.",
                "arguments": [
                    {
                        "name": "controldef",
                        "type": "c"
                    }
                ]
            },
            "eval": {
                "name": "Eval",
                "description": "Evaluate expression in the context that the quick draw object was created.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "clippeddrawcode": {
                "name": "ClippedDrawCode",
                "description": "Extract draw code from window needed to render an area of the window.",
                "arguments": [
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    }
                ]
            },
            "invalidatecontrol": {
                "name": "InvalidateControl",
                "description": "Invalidate a control by name.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    }
                ]
            },
            "notifycontrol": {
                "name": "NotifyControl",
                "description": "Send a controls OnNotify method an event.",
                "arguments": [
                    {
                        "name": "id",
                        "type": "c"
                    },
                    {
                        "name": "event",
                        "type": "c"
                    }
                ]
            },
            "dumpcontrols": {
                "name": "DumpControls",
                "description": "Dump the control index information."
            },
            "dumphotspots": {
                "name": "DumpHotSpots",
                "description": "Dump the control index information."
            }
        },
        "__name__": "QuickWindow"
    },
    "registry": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "save_settings": {
                "description": "Saves settings to the registry.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "settings",
                        "type": "P"
                    }
                ]
            },
            "load_settings": {
                "description": "Load settings from the registry.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "settings",
                        "type": "P"
                    }
                ]
            },
            "drop_settings": {
                "description": "Drop settings from the registry.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "sys_get": {
                "description": "Retrieve a system setting (requires full registry path) - arch(itecture) - '32', ' 64' or 'Any' - default 'Any'.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "arch",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sys_set": {
                "description": "Set an existing system setting (requires full registry path) - arch(itecture) - '32', ' 64' or 'Any' - default '32'.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "arch",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sys_list": {
                "description": "List the child keys.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "arch",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sys_create": {
                "description": "Create a new system setting (requires full registry path).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "C",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "Registry"
    },
    "reportdefgeneratetype": {
        "__enumeration__": [
            "HTMLFlow",
            "HTMLTable",
            "HTMLDiv"
        ],
        "__name__": "ReportDefGenerateType"
    },
    "reportdefimportoptions": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ReportDefImportOptions"
    },
    "reportdefimporttemplates": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ReportDefImportTemplates"
    },
    "reportdefoutputsections": {
        "__methods__": {
            "addcssstylesheet": {
                "name": "AddCssStyleSheet",
                "description": "Output to html styleSheet section.",
                "arguments": [
                    {
                        "name": "cssstylesheet",
                        "type": "C"
                    }
                ]
            },
            "addhtml": {
                "name": "AddHtml",
                "description": "Output to html layout/template section.",
                "arguments": [
                    {
                        "name": "html",
                        "type": "C"
                    }
                ]
            },
            "addjavascriptcode": {
                "name": "AddJavaScriptCode",
                "description": "Output to html code section.",
                "arguments": [
                    {
                        "name": "javascriptcode",
                        "type": "C"
                    }
                ]
            },
            "addjsondata": {
                "name": "AddJsonData",
                "description": "Add Json data to fill the json template.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "addjsontemplate": {
                "name": "AddJsonTemplate",
                "description": "Output to json template - for reports that separate data from presentation (via AJAX popupulation using JSon data).",
                "arguments": [
                    {
                        "name": "jsontemplate",
                        "type": "C"
                    }
                ]
            },
            "addlinks": {
                "name": "AddLinks",
                "description": "Output to dependency links section.",
                "arguments": [
                    {
                        "name": "links",
                        "type": "C"
                    }
                ]
            },
            "addsubreport": {
                "name": "AddSubReport",
                "description": "Add Subreport Definition (json objects should reference these for linked subreports).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "definition",
                        "type": "C"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "emitimagesrc": {
                "name": "EmitImageSrc",
                "description": "Emit image using approriate format for embedded versus remote HTML.",
                "arguments": [
                    {
                        "name": "logicalname",
                        "type": "C"
                    }
                ]
            },
            "emitrtffontchange": {
                "name": "EmitRTFFontChange",
                "description": "Emits font change (from an old font).",
                "arguments": [
                    {
                        "name": "tofontdef",
                        "type": "C"
                    },
                    {
                        "name": "fromfontdef",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "extractrtfheader": {
                "name": "ExtractRTFHeader",
                "description": "Given RTF text or A5Report template, get the RTF header portion.",
                "arguments": [
                    {
                        "name": "rtftext",
                        "type": "C"
                    }
                ]
            },
            "getcurrentrtfheader": {
                "name": "GetCurrentRTFHeader",
                "description": "Returns the Current RTF header."
            },
            "getsubreport": {
                "name": "GetSubReport",
                "description": "Return report definition for a name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "getsubreportnames": {
                "name": "GetSubReportNames",
                "description": "Return list of subreport names."
            },
            "getsubreports": {
                "name": "GetSubReports",
                "description": "Get sub reports object."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "resolvertfcolor": {
                "name": "ResolveRTFColor",
                "description": "Returns RTF color table color index, maintains RTF color table.",
                "arguments": [
                    {
                        "name": "color",
                        "type": "C"
                    }
                ]
            },
            "resolvertffont": {
                "name": "ResolveRTFFont",
                "description": "Returns RTF font table font index, maintains RTF font table.",
                "arguments": [
                    {
                        "name": "font",
                        "type": "C"
                    }
                ]
            },
            "setcurrentrtfheader": {
                "name": "SetCurrentRTFHeader",
                "description": "Sets new RTF header (makes sure that existing elements still in header).",
                "arguments": [
                    {
                        "name": "rtfheader",
                        "type": "C"
                    }
                ]
            },
            "statichtmltortf": {
                "name": "StaticHtmlToRTF",
                "description": "Emit embedded html inside rtf section.",
                "arguments": [
                    {
                        "name": "html",
                        "type": "C"
                    },
                    {
                        "name": "width",
                        "type": "N"
                    },
                    {
                        "name": "height",
                        "type": "N"
                    },
                    {
                        "name": "depth",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "staticrtftoembeddedrtf": {
                "name": "StaticRTFToEmbeddedRTF",
                "description": "Emit RTF template inside rtf section.",
                "arguments": [
                    {
                        "name": "staticrtf",
                        "type": "C"
                    },
                    {
                        "name": "width",
                        "type": "N"
                    },
                    {
                        "name": "height",
                        "type": "N"
                    }
                ]
            },
            "striprtfheader": {
                "name": "StripRTFHeader",
                "description": "Given RTF text or A5Report template, remove the header & the end (for embedding).",
                "arguments": [
                    {
                        "name": "rtftext",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "ReportDefOutputSections"
    },
    "reportdefresourcetype": {
        "__enumeration__": [
            "ResourceEmbedded",
            "ResourceServer",
            "ResourceStandalone"
        ],
        "__name__": "ReportDefResourceType"
    },
    "reportdefsubreports": {
        "__methods__": {
            "addsubreport": {
                "name": "AddSubReport",
                "description": "Add Subreport Definition (json objects should reference these for linked subreports).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "definition",
                        "type": "C"
                    }
                ]
            },
            "cachesubreportinstance": {
                "name": "CacheSubReportInstance",
                "description": "Cache an instance of a subreport (based on subreport name & filter used).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "filter",
                        "type": "C"
                    },
                    {
                        "name": "instance",
                        "type": "C"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "getsubreport": {
                "name": "GetSubReport",
                "description": "Return report definition for a name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "getsubreportinstance": {
                "name": "GetSubReportInstance",
                "description": "Returns (if found) a subreport instance - empty string if nothing was found.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "filter",
                        "type": "C"
                    }
                ]
            },
            "getsubreportnames": {
                "name": "GetSubReportNames",
                "description": "Return list of subreport names."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ReportDefSubreports"
    },
    "rowinstance": {
        "p_ambient": {
            "__enumeration__": [
                "*IsRowCurrent",
                "*IsRowActive",
                "*IsRowSelected",
                "*IsRowDirty",
                "*IsRowRecord",
                "*IsRowNewRecord",
                "*IsRowNewTarget",
                "*IsRowNull",
                "*Counter"
            ],
            "__name__": "P_Ambient"
        },
        "__name__": "RowInstance"
    },
    "rowrelation": {
        "__methods__": {
            "tabletorowsource": {
                "name": "TableToRowSource",
                "description": "Convert a table pointer to a member of the row source.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "arraytorowsource": {
                "name": "ArrayToRowSource",
                "description": "Create a row source for an array.",
                "arguments": [
                    {
                        "name": "array",
                        "type": "P"
                    },
                    {
                        "name": "arraydef",
                        "type": "C"
                    }
                ]
            },
            "isactive": {
                "name": "IsActive",
                "description": "Return true if this is the active row relation."
            }
        },
        "__name__": "RowRelation"
    },
    "rowsource": {
        "__methods__": {
            "openview": {
                "name": "OpenView",
                "description": "Open a view onto a data source.",
                "arguments": [
                    {
                        "name": "size",
                        "type": "n",
                        "optional": true
                    },
                    {
                        "name": "order",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "isactive": {
                "name": "IsActive",
                "description": "Return true if this is the active rowsource."
            },
            "close": {
                "name": "Close",
                "description": "Close the rowsource."
            }
        },
        "__name__": "RowSource"
    },
    "rowview": {
        "commitbehaviortype": {
            "__enumeration__": [
                "CommitField",
                "CommitRecord",
                "CommitPage"
            ],
            "__name__": "CommitBehaviorType"
        },
        "__name__": "RowView"
    },
    "rowviewevent": {
        "__enumeration__": [
            "Name",
            "EventType",
            "Expression"
        ],
        "__name__": "RowViewEvent"
    },
    "rtf": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "onedit": {
                "description": "Public user defined function."
            },
            "create": {
                "description": "Create an RTF object for manipulating RTF text directly.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "insert": {
                "description": "Insert text into an RTF.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    },
                    {
                        "name": "pos",
                        "type": "N"
                    },
                    {
                        "name": "processed",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "insert_expr": {
                "description": "Insert expression into an RTF.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    },
                    {
                        "name": "pos",
                        "type": "N"
                    }
                ]
            },
            "insert_command": {
                "description": "Insert command (left,center,right,justify) into an RTF.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    },
                    {
                        "name": "pos",
                        "type": "N"
                    }
                ]
            },
            "delete": {
                "description": "Delete text from an RTF.",
                "arguments": [
                    {
                        "name": "pos",
                        "type": "N"
                    },
                    {
                        "name": "chars",
                        "type": "N"
                    },
                    {
                        "name": "processed",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "set_font": {
                "description": "Set RTF font (for all new insertions).",
                "arguments": [
                    {
                        "name": "fontname",
                        "type": "C"
                    },
                    {
                        "name": "color",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "get_font": {
                "description": "Get the font for a position of the RTF.",
                "arguments": [
                    {
                        "name": "pos",
                        "type": "N"
                    }
                ]
            },
            "get_font_color": {
                "description": "Get the font color for a position of the RTF.",
                "arguments": [
                    {
                        "name": "pos",
                        "type": "N"
                    }
                ]
            },
            "set_style": {
                "description": "Set the style (for all new insertions).",
                "arguments": [
                    {
                        "name": "style",
                        "type": "C"
                    }
                ]
            },
            "get_style": {
                "description": "Get the style for a position in the RTF object.",
                "arguments": [
                    {
                        "name": "pos",
                        "type": "N"
                    }
                ]
            }
        },
        "__name__": "Rtf"
    },
    "schemacategory": {
        "__enumeration__": [
            "Name",
            "Description",
            "Label"
        ],
        "__name__": "SchemaCategory"
    },
    "schemaenum": {
        "__methods__": {
            "enumerate": {
                "name": "Enumerate",
                "description": "Get a list of defined schema tags."
            }
        },
        "__name__": "SchemaEnum"
    },
    "schemamapper": {
        "__methods__": {
            "hastag": {
                "name": "HasTag",
                "description": "Ask if a requested schema tag is available.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "c"
                    }
                ]
            },
            "gettag": {
                "name": "GetTag",
                "description": "Get a pointer to a loaded schema tag.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "c"
                    }
                ]
            },
            "hasenum": {
                "name": "HasEnum",
                "description": "Ask if a requested schema enum is available.",
                "arguments": [
                    {
                        "name": "enumname",
                        "type": "c"
                    }
                ]
            },
            "getenum": {
                "name": "GetEnum",
                "description": "Get a pointer to a loaded schema enum.",
                "arguments": [
                    {
                        "name": "enumname",
                        "type": "c"
                    }
                ]
            },
            "hastype": {
                "name": "HasType",
                "description": "Ask if a requested schema type is available.",
                "arguments": [
                    {
                        "name": "typename",
                        "type": "c"
                    }
                ]
            },
            "gettype": {
                "name": "GetType",
                "description": "Get a pointer to a loaded schema type.",
                "arguments": [
                    {
                        "name": "typename",
                        "type": "c"
                    }
                ]
            },
            "hascategory": {
                "name": "HasCategory",
                "description": "Ask if a requested schema category is available.",
                "arguments": [
                    {
                        "name": "categoryname",
                        "type": "c"
                    }
                ]
            },
            "getcategory": {
                "name": "GetCategory",
                "description": "Get a pointer to a loaded schema category.",
                "arguments": [
                    {
                        "name": "categoryname",
                        "type": "c"
                    }
                ]
            },
            "enumeratetags": {
                "name": "EnumerateTags",
                "description": "Get a list of defined schema tags."
            },
            "enumerateenums": {
                "name": "EnumerateEnums",
                "description": "Get a list of defined schema enums."
            },
            "enumeratetypes": {
                "name": "EnumerateTypes",
                "description": "Get a list of defined schema attribute types."
            },
            "enumeratecategories": {
                "name": "EnumerateCategories",
                "description": "Get a list of defined schema attribute categorys."
            },
            "populatepropsheet": {
                "name": "PopulatePropSheet",
                "description": "",
                "arguments": [
                    {
                        "name": "ptr",
                        "type": "p"
                    },
                    {
                        "name": "htmltext",
                        "type": "c"
                    }
                ]
            },
            "readpropsheet": {
                "name": "ReadPropSheet",
                "description": "",
                "arguments": [
                    {
                        "name": "ptr",
                        "type": "p"
                    },
                    {
                        "name": "htmltext",
                        "type": "c"
                    }
                ]
            },
            "enumeratepropsheet": {
                "name": "EnumeratePropSheet",
                "description": "Added logic to enumerate property sheet variables.",
                "arguments": [
                    {
                        "name": "htmltext",
                        "type": "c"
                    },
                    {
                        "name": "format",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "SchemaMapper"
    },
    "schemamappermanager": {
        "__functions__": {
            "get": {
                "name": "Get",
                "description": "Get the default schema manager."
            }
        },
        "__methods__": {
            "load": {
                "name": "Load",
                "description": "Load schemas from passed in XML.",
                "arguments": [
                    {
                        "name": "xml",
                        "type": "c"
                    }
                ]
            },
            "hasschema": {
                "name": "HasSchema",
                "description": "Ask if a requested schema is available.",
                "arguments": [
                    {
                        "name": "schemaname",
                        "type": "c"
                    }
                ]
            },
            "getschema": {
                "name": "GetSchema",
                "description": "Get a pointer to a loaded schema.",
                "arguments": [
                    {
                        "name": "schemaname",
                        "type": "c"
                    }
                ]
            },
            "enumerateschemas": {
                "name": "EnumerateSchemas",
                "description": "Get a list of defined schemas ."
            }
        },
        "__name__": "SchemaMapperManager"
    },
    "schematype": {
        "__enumeration__": [
            "Name",
            "Enum",
            "Variable"
        ],
        "__name__": "SchemaType"
    },
    "set": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "external_field_name_get": {
                "description": " retrieve external sets field names into a crlf delimited list.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_record_content_get": {
                "description": "Extacts data from a set in a cr-lf delimited string",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "get_primary": {
                "description": " Return a pointer to the primary table in a set"
            },
            "in_use": {
                "description": "Returns .t. if any of the tables in a set are in use.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "merge_data": {
                "description": "Public user defined function.",
                "arguments": [
                    {
                        "name": "template",
                        "type": "C"
                    }
                ]
            },
            "send": {
                "name": "Send",
                "description": "Zip and send a table. Options \"d\" - include Dictionary, \"x\" - include Indexes, \"p\" - display prompt dialog, \"c\" - compress before sending.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "emailaddress",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "use_a5_email_client",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "store_in_outbox",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "show_client",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "zip": {
                "name": "Zip",
                "description": "Zip a set. Options \"d\" - include Dictionary, \"x\" - include Indexes, \"p\" - display prompt dialog, \"c\" - pack tables first.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "zipfilename",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open": {
                "description": "Open a set - primary table of set becomes primary table of session. TIP: It is generally better to use set.open_session().",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open_repair": {
                "description": "Open an existing set - repair problems interactively if encoutered.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open_session": {
                "description": "Open an existing set in its own session - the session will be closed when the set is closed.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current set valid."
            },
            "eval": {
                "description": "Evaluate an expression in the context of the set.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "eval_valid": {
                "description": "Returns TRUE if expression is valid in the context of the table.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "table_get": {
                "description": "Return pointer to a table of an open set (primary if unnamed, else named table).",
                "arguments": [
                    {
                        "name": "table_name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "close": {
                "description": "Close an open set."
            },
            "current": {
                "description": "Returns the current set."
            },
            "rename": {
                "description": "Renames the set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "duplicate": {
                "description": "Create a copy of the set, with all records and layouts.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "erase": {
                "description": "Delete the set if safety is TRUE.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "safety",
                        "type": "L"
                    }
                ]
            },
            "primary_get": {
                "description": "Retrieve the primary table for a named set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "structure_get": {
                "description": "Retrieve the structure for a named set (format N=name,A=Alias,D=Dad,P=Parent Eqn,C=Child Eqn,F=Filter,I=Index flags,E=restrict parent Exist/Not_Exist/None flags).",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "filename_get": {
                "description": "Get the filename of the set."
            },
            "sessionhandle": {
                "description": "Return the session that the set is opened under."
            },
            "fetch_eof": {
                "description": "returns TRUE if the last record was fetched."
            },
            "fetch_find": {
                "description": "Using the current index, find specified key value, return record number.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "A"
                    }
                ]
            },
            "fetch_first": {
                "description": "Fetch the first record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_goto": {
                "description": "Goto a specific record number in the table, returns positive if record found, else negitive record number.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N"
                    }
                ]
            },
            "fetch_last": {
                "description": "Fetch the last record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_next": {
                "description": "Fetch the next record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_prev": {
                "description": "Fetch the previous record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_prev": {
                "description": "Fetch the previous record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "generate_sample_definition": {
                "description": "Generates samples for records in the format of <fullname> = <value expression>."
            },
            "optimization_get": {
                "description": "Returns if the sets' optimization flag is set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "default",
                        "type": "L"
                    }
                ]
            },
            "structure_save": {
                "description": "Saves set definition, (described in format,saved in data) to a set dictionary.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    },
                    {
                        "name": "data",
                        "type": "C"
                    }
                ]
            },
            "link_expression_split": {
                "description": "Returns child link expression and order expression separated by a CR-LF.",
                "arguments": [
                    {
                        "name": "parenttabledef",
                        "type": "c"
                    },
                    {
                        "name": "childtabledef",
                        "type": "c"
                    },
                    {
                        "name": "parentexpression",
                        "type": "c"
                    },
                    {
                        "name": "childexpression",
                        "type": "c"
                    }
                ]
            },
            "link_expression_combine": {
                "description": "Returns the child expression, combined result of link and order expression.",
                "arguments": [
                    {
                        "name": "childtabledef",
                        "type": "c"
                    },
                    {
                        "name": "linkexpression",
                        "type": "c"
                    },
                    {
                        "name": "orderexpression",
                        "type": "c"
                    }
                ]
            },
            "link_expression_validate": {
                "description": "Validate the parent,link expression against one another - make sure the order and filter expression are valid relative to childTableDef.",
                "arguments": [
                    {
                        "name": "parenttabledef",
                        "type": "c"
                    },
                    {
                        "name": "childtabledef",
                        "type": "c"
                    },
                    {
                        "name": "parentexpression",
                        "type": "c"
                    },
                    {
                        "name": "linkexpression",
                        "type": "c"
                    },
                    {
                        "name": "orderexpression",
                        "type": "c"
                    },
                    {
                        "name": "filterexpression",
                        "type": "c"
                    }
                ]
            },
            "calculated_get": {
                "description": "Return the calculated fields saved with the set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "global_variable_get": {
                "description": "Read Global variables from set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "session_variable_get": {
                "description": "Read Session variables from set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    }
                ]
            },
            "variable_save": {
                "description": "Save all the variable elements of a set.",
                "arguments": [
                    {
                        "name": "setname",
                        "type": "C"
                    },
                    {
                        "name": "globalvariables",
                        "type": "C"
                    },
                    {
                        "name": "sessionvariables",
                        "type": "C"
                    },
                    {
                        "name": "calcfields",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "Set"
    },
    "shape": {
        "__methods__": {
            "addchildren": {
                "name": "AddChildren",
                "description": "Add child shapes.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            },
            "dropchildren": {
                "name": "DropChildren",
                "description": "Drop child shapes."
            },
            "replacechildren": {
                "name": "ReplaceChildren",
                "description": "Replace child shapes.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            },
            "outerdefinition": {
                "name": "OuterDefinition",
                "description": "Represent control and children as definition."
            },
            "innerdefinition": {
                "name": "InnerDefinition",
                "description": "Represent children as definition."
            },
            "getstate": {
                "name": "GetState",
                "description": "Get a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    }
                ]
            },
            "setstate": {
                "name": "SetState",
                "description": "Set a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    }
                ]
            },
            "clearstate": {
                "name": "ClearState",
                "description": "Clear a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    }
                ]
            },
            "setareastate": {
                "name": "SetAreaState",
                "description": "Set state for area.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    },
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    }
                ]
            }
        },
        "__name__": "Shape"
    },
    "shapemultiple": {
        "__methods__": {
            "getstatearray": {
                "name": "GetStateArray",
                "description": "Get a pointer to the user state array."
            },
            "addchildren": {
                "name": "AddChildren",
                "description": "Add child shapes.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            },
            "dropchildren": {
                "name": "DropChildren",
                "description": "Drop child shapes."
            },
            "replacechildren": {
                "name": "ReplaceChildren",
                "description": "Replace child shapes.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            },
            "outerdefinition": {
                "name": "OuterDefinition",
                "description": "Represent control and children as definition."
            },
            "innerdefinition": {
                "name": "InnerDefinition",
                "description": "Represent children as definition."
            },
            "getstate": {
                "name": "GetState",
                "description": "Get a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    }
                ]
            },
            "setstate": {
                "name": "SetState",
                "description": "Set a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    }
                ]
            },
            "clearstate": {
                "name": "ClearState",
                "description": "Clear a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    }
                ]
            },
            "setareastate": {
                "name": "SetAreaState",
                "description": "Set state for area.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    },
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    }
                ]
            }
        },
        "__name__": "ShapeMultiple"
    },
    "sockets": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "open": {
                "description": "Open an existing socket - mode is S for server, C for client, L for Listen (server without accept), R for server with reuse address flag.",
                "arguments": [
                    {
                        "name": "host",
                        "type": "C"
                    },
                    {
                        "name": "tcp_port",
                        "type": "N"
                    },
                    {
                        "name": "mode",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "connecttimeout",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "isopen": {
                "description": "Check to see if a socket has been opened successfully.  Does not guarantee that subsequent calls will succeed!"
            },
            "accept": {
                "description": "Accept an open sockets input.  Returns a new accepted socket.  flags - 'B' = blocking .",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "timeout",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "close": {
                "description": "Close an open socket."
            },
            "read": {
                "description": "Read bytes from socket into string.",
                "arguments": [
                    {
                        "name": "length",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "timeout",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "handle_id": {
                "description": "Get the integer handle id for the socket variable."
            },
            "readline": {
                "description": "Reads a line from the socket, if one is available (else returns blank)."
            },
            "readb": {
                "description": "Read bytes from socket into blob.",
                "arguments": [
                    {
                        "name": "length",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "timeout",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "peek": {
                "description": "Read bytes from socket into string without removing the bytes from the socket stream.",
                "arguments": [
                    {
                        "name": "length",
                        "type": "N"
                    }
                ]
            },
            "write": {
                "description": "Write string to socket.",
                "arguments": [
                    {
                        "name": "string",
                        "type": "C"
                    },
                    {
                        "name": "length",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "writeb": {
                "description": "Write blob to socket.",
                "arguments": [
                    {
                        "name": "blob",
                        "type": "B"
                    }
                ]
            },
            "options_set": {
                "description": "Set options ([-]L-Linger K-Keep Alive R-Reuse Address N-Don't route [-]D-elay X-Debug  - I=#/O=# - internal input output buffer controls T=# TS=# TR=# timout in milliseconds for timeout on send/receive or timeout [S]end,[R]ecieve ).",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C"
                    }
                ]
            },
            "options_get": {
                "description": "Get options (A-accepting L-Linger K-Keep Alive R-Reuse Address N-Don't route D-elay X-Debug - I=input buffer O=output buffer T=timeout -  '' escapes characters ).",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C"
                    }
                ]
            },
            "address_get": {
                "description": "Get the ip address of an open socket.  (R = remote IP, L = local IP)",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "port_get": {
                "description": "Get the port for an open socket.  (R = remote port, L = local port)",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "C"
                    }
                ]
            },
            "handle_get": {
                "description": "Get a sockets logical slot - used with the 'sockets.wait' function.",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C"
                    }
                ]
            },
            "busy": {
                "description": "Returns a string if the socket is blocked."
            },
            "wait": {
                "description": "Wait list is formatted as cr-lf separated list of R[#] W[#] and E[#] for wait on read/write or error for sockets .",
                "arguments": [
                    {
                        "name": "timeout",
                        "type": "N"
                    },
                    {
                        "name": "wait_list",
                        "type": "C"
                    }
                ]
            },
            "datagram_handler": {
                "description": "Setup an named asynchronous handler - when input matches the 'match string' , the code will be invoked with the incoming string in a_message.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "tcp_port",
                        "type": "N"
                    },
                    {
                        "name": "match",
                        "type": "C"
                    },
                    {
                        "name": "code",
                        "type": "C"
                    }
                ]
            },
            "datagram_kill": {
                "description": "Close down a datagram handler.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "datagram_send": {
                "description": "Send data to a host/port.",
                "arguments": [
                    {
                        "name": "host",
                        "type": "C"
                    },
                    {
                        "name": "port",
                        "type": "N"
                    },
                    {
                        "name": "data",
                        "type": "C"
                    }
                ]
            },
            "datagram_send_with_receipt": {
                "description": "Send data to a host/port wait for returned response.",
                "arguments": [
                    {
                        "name": "host",
                        "type": "C"
                    },
                    {
                        "name": "port",
                        "type": "N"
                    },
                    {
                        "name": "data",
                        "type": "C"
                    },
                    {
                        "name": "return_pattern",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "info_get": {
                "description": "Get information for an address.",
                "arguments": [
                    {
                        "name": "ip_info_format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "address",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "query_tcp": {
                "description": "Return if the TCP port is in use.",
                "arguments": [
                    {
                        "name": "local_host",
                        "type": "C"
                    },
                    {
                        "name": "local_port",
                        "type": "N"
                    },
                    {
                        "name": "remote_host",
                        "type": "C"
                    },
                    {
                        "name": "remote_port",
                        "type": "N"
                    },
                    {
                        "name": "state",
                        "type": "N"
                    }
                ]
            },
            "ftp_get_reply": {
                "description": "Get an ftp reply - returns the text '<CONNECTIONRESET>' if connection was reset.",
                "arguments": [
                    {
                        "name": "timeout",
                        "type": "n"
                    },
                    {
                        "name": "vars",
                        "type": "p"
                    }
                ]
            },
            "ftp_put_file": {
                "description": "Put an ftp file up - returns the result code.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "c"
                    },
                    {
                        "name": "remotefilename",
                        "type": "c"
                    },
                    {
                        "name": "vars",
                        "type": "p"
                    }
                ]
            }
        },
        "__name__": "Sockets"
    },
    "spellchecker": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "check": {
                "description": "Check text (can be long text - like a memo).",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            },
            "add_word": {
                "description": "Add a word to the user dictionary.",
                "arguments": [
                    {
                        "name": "word",
                        "type": "C"
                    }
                ]
            },
            "next_word": {
                "description": "Go to the next word."
            },
            "find_error": {
                "description": "Look for spelling error from current location, return FALSE if no errors found."
            },
            "word": {
                "description": "Returns the word."
            },
            "word_pos": {
                "description": "Returns the word position."
            },
            "word_length": {
                "description": "Returns the word length."
            },
            "suggest": {
                "name": "Suggest",
                "description": "Returns the suggestion for correction (starting at 1) - returns all suggest if parameter ommitted.",
                "arguments": [
                    {
                        "name": "suggestion",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "correct": {
                "name": "Correct",
                "description": "Asks the user what action to take, Return TRUE if correct, FALSE if cancled."
            },
            "replace": {
                "name": "Replace",
                "description": "Replace current word with another - by default adds in history, return old word.",
                "arguments": [
                    {
                        "name": "word",
                        "type": "C"
                    },
                    {
                        "name": "add_to_history",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "ignore": {
                "name": "Ignore",
                "description": "If current word is misspelled, Ignore it.",
                "arguments": [
                    {
                        "name": "word",
                        "type": "C"
                    }
                ]
            },
            "done": {
                "description": "Returns TRUE if no more words."
            },
            "in_dictionary": {
                "description": "Returns TRUE if word is in the dictionary."
            },
            "reset_history": {
                "description": "Reset the history (don't remember past ignored words)."
            },
            "text": {
                "name": "Text",
                "description": "Returns the current text (with corrections)."
            },
            "in_replace_history": {
                "description": "Returns TRUE if the 'error' found is in the replacement history."
            },
            "replacement_text": {
                "name": "Replacement_Text",
                "description": "Returns the replacement text."
            }
        },
        "__name__": "SpellChecker"
    },
    "sqlfilterstackitem": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "SqlFilterStackItem"
    },
    "statearray": {
        "__methods__": {
            "getstate": {
                "name": "GetState",
                "description": "Get states value.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "defaultvalue",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "setstate": {
                "name": "SetState",
                "description": "Set a states value.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    }
                ]
            },
            "clearstate": {
                "name": "ClearState",
                "description": "Clear a state flag (no value).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "n"
                    },
                    {
                        "name": "statename",
                        "type": "c"
                    }
                ]
            },
            "clearall": {
                "name": "ClearAll",
                "description": "Clear All instances of all (or specified state) from state array.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "duplicatearray": {
                "name": "DuplicateArray",
                "description": "Create an exact copy of an array."
            },
            "copyarray": {
                "name": "CopyArray",
                "description": "Copy all (or specified) states from another array.",
                "arguments": [
                    {
                        "name": "sourcearray",
                        "type": "Alpha5::StateArray"
                    },
                    {
                        "name": "statename",
                        "type": "c",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "StateArray"
    },
    "statedefinition": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new state definition.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "createinstance": {
                "name": "CreateInstance",
                "description": "Create new state instance."
            },
            "createarray": {
                "name": "CreateArray",
                "description": "Create new state array."
            },
            "dump": {
                "name": "Dump",
                "description": "Dump the state names."
            }
        },
        "__name__": "StateDefinition"
    },
    "stateinstance": {
        "__methods__": {
            "getstate": {
                "name": "GetState",
                "description": "Get states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "defaultvalue",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "setstate": {
                "name": "SetState",
                "description": "Set a states value.",
                "arguments": [
                    {
                        "name": "statename",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "l"
                    }
                ]
            }
        },
        "__name__": "StateInstance"
    },
    "stringdictionary": {
        "__methods__": {
            "set": {
                "name": "Set",
                "description": "Set a value to string dictionary.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    }
                ]
            },
            "get": {
                "name": "Get",
                "description": "Get a value from a dictionary.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "exists": {
                "name": "Exists",
                "description": "Return if an item exists in the dictionary.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "remove": {
                "name": "Remove",
                "description": "Remove a key of a value.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Remove all keys from the string dictionary."
            },
            "initialize": {
                "name": "Initialize",
                "description": "Add several pairs, separated by '=', items separated by cr-lf.",
                "arguments": [
                    {
                        "name": "pairs",
                        "type": "c"
                    },
                    {
                        "name": "clearit",
                        "type": "l",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "StringDictionary"
    },
    "stringscanner": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new string scanner object.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "skiptocharacter": {
                "name": "SkipToCharacter",
                "description": "Skip until one of the characters specified is encountered. Return true if successful.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skipovercharacter": {
                "name": "SkipOverCharacter",
                "description": "Skip until we are on a character not in the group. Return # of characters skipped over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scantocharacter": {
                "name": "ScanToCharacter",
                "description": "Skip until one of the characters specified is encountered. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scanovercharacter": {
                "name": "ScanOverCharacter",
                "description": "Skip until we are on a character not in the group. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skiptostring": {
                "name": "SkipToString",
                "description": "Skip until text matching string is found. Return true if successful.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skipoverstring": {
                "name": "SkipOverString",
                "description": "Skip over matching text. Returns number of characters skipped.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scantostring": {
                "name": "ScanToString",
                "description": "Skip until text matching string is found. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scanoverstring": {
                "name": "ScanOverString",
                "description": "Skip over matching text. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skiptostringi": {
                "name": "SkipToStringI",
                "description": "Skip until text matching string (case insensitive) is found. Return true if successful.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skipoverstringi": {
                "name": "SkipOverStringI",
                "description": "Skip over matching text  (case insensitive). Returns number of characters skipped.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scantostringi": {
                "name": "ScanToStringI",
                "description": "Skip until text matching string  (case insensitive) is found. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "scanoverstringi": {
                "name": "ScanOverStringI",
                "description": "Skip over matching text  (case insensitive). Return text we scanned over.",
                "arguments": [
                    {
                        "name": "characters",
                        "type": "c"
                    }
                ]
            },
            "skiptodigit": {
                "name": "SkipToDigit",
                "description": "Skip until a digit (0-9) is encountered. Return true if successful."
            },
            "skipoverdigit": {
                "name": "SkipOverDigit",
                "description": "Skip over a sequence of digits (0-9). Returns number of characters skipped."
            },
            "scantodigit": {
                "name": "ScanToDigit",
                "description": "Skip until a digit (0-9) is encountered. Return text we scanned over."
            },
            "scanoverdigit": {
                "name": "ScanOverDigit",
                "description": "Skip over a sequence of digits (0-9). Return text we scanned over."
            },
            "skiptoalpha": {
                "name": "SkipToAlpha",
                "description": "Skip until a alphabetic character is encountered. Return true if successful."
            },
            "skipoveralpha": {
                "name": "SkipOverAlpha",
                "description": "Skip over a sequence of alphabetic characters. Returns number of characters skipped."
            },
            "scantoalpha": {
                "name": "ScanToAlpha",
                "description": "Skip until a alphabetic character is encountered. Return text we scanned over."
            },
            "scanoveralpha": {
                "name": "ScanOverAlpha",
                "description": "Skip over a sequence of alphabetic characters. Return text we scanned over."
            },
            "skiptoalphanum": {
                "name": "SkipToAlphaNum",
                "description": "Skip until a alphanumeric character is encountered. Return true if successful."
            },
            "skipoveralphanum": {
                "name": "SkipOverAlphaNum",
                "description": "Skip over a sequence of alphanumeric characters. Returns number of characters skipped."
            },
            "scantoalphanum": {
                "name": "ScanToAlphaNum",
                "description": "Skip until a alphanumeric character is encountered. Return text we scanned over."
            },
            "scanoveralphanum": {
                "name": "ScanOverAlphaNum",
                "description": "Skip over a sequence of alphanumeric characters. Return text we scanned over."
            },
            "skiptowhitespace": {
                "name": "SkipToWhitespace",
                "description": "Skip until a whitespace character is encountered. Return true if successful."
            },
            "skipoverwhitespace": {
                "name": "SkipOverWhitespace",
                "description": "Skip over a sequence of whitespace characters . Returns number of characters skipped."
            },
            "scantowhitespace": {
                "name": "ScanToWhitespace",
                "description": "Skip until a whitespace characters is encountered. Return text we scanned over."
            },
            "scanoverwhitespace": {
                "name": "ScanOverWhitespace",
                "description": "Skip over a sequence of whitespace characters . Return text we scanned over."
            },
            "skiptosmatch": {
                "name": "SkipToSmatch",
                "description": "Skip until a pattern is encountered. Return true if successful.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "skipoversmatch": {
                "name": "SkipOverSmatch",
                "description": "Skip over a pattern . Returns number of characters skipped.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scantosmatch": {
                "name": "ScanToSmatch",
                "description": "Skip until a patterns is encountered. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scanoversmatch": {
                "name": "ScanOverSmatch",
                "description": "Skip over a pattern . Return text we scanned over.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scansmatch": {
                "name": "ScanSmatch",
                "description": "Skip until a pattern is found, and scan over it . Return text that matches the pattern.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "skiptosmatchi": {
                "name": "SkipToSmatchI",
                "description": "Skip until a pattern is encountered. Return true if successful.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "skipoversmatchi": {
                "name": "SkipOverSmatchI",
                "description": "Skip over a pattern . Returns number of characters skipped.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scantosmatchi": {
                "name": "ScanToSmatchI",
                "description": "Skip until a patterns is encountered. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scanoversmatchi": {
                "name": "ScanOverSmatchI",
                "description": "Skip over a pattern . Return text we scanned over.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "scansmatchi": {
                "name": "ScanSmatchI",
                "description": "Skip until a pattern is found, and scan over it . Return text that matches the pattern.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    }
                ]
            },
            "skiptotoken": {
                "name": "SkipToToken",
                "description": "Skip until a token is encountered. kind is combination of (I-identier,F-function,S-string,D-date,N-number,L-logical,U-unary operator,B-binary,A-array operator or '*' for all) Return true if successful.",
                "arguments": [
                    {
                        "name": "kind",
                        "type": "c"
                    }
                ]
            },
            "skipovertoken": {
                "name": "SkipOverToken",
                "description": "Skip over a sequence of tokens . (I-identier,F-function,S-string,D-date,N-number,L-logical,U-unary operator,B-binary,A-array operator or '*' for all), Returns number of characters skipped.",
                "arguments": [
                    {
                        "name": "kind",
                        "type": "c"
                    }
                ]
            },
            "scantotoken": {
                "name": "ScanToToken",
                "description": "Skip until a token is encountered. Return text we scanned over.",
                "arguments": [
                    {
                        "name": "kind",
                        "type": "c"
                    }
                ]
            },
            "scanovertoken": {
                "name": "ScanOverToken",
                "description": "Skip over a sequence of tokens . Return text we scanned over.",
                "arguments": [
                    {
                        "name": "kind",
                        "type": "c"
                    }
                ]
            },
            "scantypedtoken": {
                "name": "ScanTypedToken",
                "description": "Return next token in form of [<Kind>:<Token>].",
                "arguments": [
                    {
                        "name": "kind",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "skipover": {
                "name": "SkipOver",
                "description": "Skip over a number of characters.",
                "arguments": [
                    {
                        "name": "count",
                        "type": "n"
                    }
                ]
            },
            "scanover": {
                "name": "ScanOver",
                "description": "Skip over a number of characters.",
                "arguments": [
                    {
                        "name": "count",
                        "type": "n"
                    }
                ]
            },
            "delete": {
                "name": "Delete",
                "description": "Delete bytes from string at location.",
                "arguments": [
                    {
                        "name": "delete",
                        "type": "n"
                    }
                ]
            },
            "replace": {
                "name": "Replace",
                "description": "Replace text at current position (delete # of bytes).",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    },
                    {
                        "name": "delete",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "replacestring": {
                "name": "ReplaceString",
                "description": "Search for text after current offset, and replace it if found.",
                "arguments": [
                    {
                        "name": "search",
                        "type": "c"
                    },
                    {
                        "name": "replace",
                        "type": "c"
                    }
                ]
            },
            "replacestringi": {
                "name": "ReplaceStringI",
                "description": "Search for text after current offset, and replace it if found.",
                "arguments": [
                    {
                        "name": "search",
                        "type": "c"
                    },
                    {
                        "name": "replace",
                        "type": "c"
                    }
                ]
            },
            "replacesmatch": {
                "name": "ReplaceSmatch",
                "description": "Look for an smatch pattern, and replace it if found.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    },
                    {
                        "name": "replace",
                        "type": "c"
                    }
                ]
            },
            "replacesmatchi": {
                "name": "ReplaceSmatchI",
                "description": "Look for an smatch pattern, and replace it if found.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    },
                    {
                        "name": "replace",
                        "type": "c"
                    }
                ]
            },
            "getremainder": {
                "name": "GetRemainder",
                "description": "Return from current position to end of string."
            },
            "gettooffset": {
                "name": "GetToOffset",
                "description": "Return text up to current offset."
            },
            "getlinenumber": {
                "name": "GetLineNumber",
                "description": "Determine which line we are one."
            },
            "getlinetext": {
                "name": "GetLineText",
                "description": "Return the text of the line we are on, if optional requested line is set, we go to the begginning of the specified line first.",
                "arguments": [
                    {
                        "name": "linenumer",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "gotolinestart": {
                "name": "GotoLineStart",
                "description": "Set the offset to the first character of the specified line, returns offset (returns 0 if line number doesn't exist).",
                "arguments": [
                    {
                        "name": "linenumber",
                        "type": "N"
                    }
                ]
            },
            "reset": {
                "name": "Reset",
                "description": "Set the scanner back to the beggining."
            }
        },
        "__name__": "StringScanner"
    },
    "systemtrayicon": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a new system tray entry.",
                "arguments": [
                    {
                        "name": "icon",
                        "type": "c"
                    },
                    {
                        "name": "handler",
                        "type": "p"
                    },
                    {
                        "name": "tooltip",
                        "type": "c"
                    },
                    {
                        "name": "title",
                        "type": "c",
                        "optional": true
                    }
                ]
            }
        },
        "__methods__": {
            "eventhandle": {
                "name": "EventHandle",
                "description": "Change the event handler.",
                "arguments": [
                    {
                        "name": "eventhandler",
                        "type": "p"
                    }
                ]
            },
            "changeicon": {
                "name": "ChangeIcon",
                "description": "Change icon for handler.",
                "arguments": [
                    {
                        "name": "icon",
                        "type": "c"
                    },
                    {
                        "name": "tooltip",
                        "type": "c"
                    },
                    {
                        "name": "title",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "schedulehandlelicenseerror": {
                "name": "ScheduleHandleLicenseError",
                "description": "Handle a licensing error."
            },
            "destroy": {
                "name": "Destroy",
                "description": "Destroy the object."
            }
        },
        "__name__": "SystemTrayIcon"
    },
    "table": {
        "__methods__": {
            "class": {
                "description": "Get the class name."
            },
            "add_blank_records": {
                "description": "Public user defined function.",
                "arguments": [
                    {
                        "name": "number_of_records",
                        "type": "N"
                    }
                ]
            },
            "add_fields": {
                "name": "Add_Fields",
                "description": "Adds fields to a table.  New_fields is a crlf list of fields to be added in format: fieldname,type,size,decimals",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "new_field_list",
                        "type": "C"
                    }
                ]
            },
            "copy_records_to": {
                "name": "Copy_Records_To",
                "description": "Copies records to another table with similar structure",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "copy_record_to": {
                "name": "Copy_Record_To",
                "description": "Copies current record to another table with similar structure as current table.",
                "arguments": [
                    {
                        "name": "target_table",
                        "type": "C"
                    }
                ]
            },
            "delete_fields": {
                "name": "Delete_Fields",
                "description": "Removes fields from a table.  Field_list is a crlf list of fields to be removed.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "field_list",
                        "type": "C"
                    }
                ]
            },
            "field_info_dump": {
                "name": "Field_Info_Dump",
                "description": "Displays a CRLF delimited list of info about fields in the table. Format is same format as 'table.external_field_name_get()'",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "import_ascii_table": {
                "name": "Import_Ascii_Table",
                "description": "Imports a fixed length ascii file into an existing table. Ascii file must match the structure of the table. If ascii file has fieldnames, set skip_lines to 1",
                "arguments": [
                    {
                        "name": "ascii_filename",
                        "type": "C"
                    },
                    {
                        "name": "skip_lines",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "silent",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "logicalrecord_get": {
                "name": "LogicalRecord_Get",
                "description": "Gets the current record's logical position in the current sort order"
            },
            "logicalrecord_set": {
                "name": "LogicalRecord_Set",
                "description": "Sets the record pointer to a logical record number in the current sort order. Returns .t. if the requested logical record number exits, else .f.",
                "arguments": [
                    {
                        "name": "recno",
                        "type": "N"
                    }
                ]
            },
            "merge_data": {
                "description": "Public user defined function.",
                "arguments": [
                    {
                        "name": "template",
                        "type": "C"
                    }
                ]
            },
            "move": {
                "name": "Move",
                "description": "Moves forward or backwards the specified NumberOfRecords in the current sort order. Returns the record number of the target record.",
                "arguments": [
                    {
                        "name": "numberofrecords",
                        "type": "N"
                    }
                ]
            },
            "move_records_to": {
                "name": "Move_Records_To",
                "description": "Moves records to another table with similar structure",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "move_record_to": {
                "name": "Move_Record_To",
                "description": "Moves the current record to another table with the same structure.",
                "arguments": [
                    {
                        "name": "target_table_name",
                        "type": "C"
                    }
                ]
            },
            "name_real_get": {
                "name": "Name_Real_Get",
                "description": "Returns the real name (not the alias) of the table."
            },
            "openmap": {
                "name": "OpenMap",
                "description": "Open a table with just the specified fieldnames.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "fieldlist",
                        "type": "C"
                    },
                    {
                        "name": "mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption_key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "order": {
                "description": "Public user defined function.",
                "arguments": [
                    {
                        "name": "order",
                        "type": "C"
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "recalc_calcfields": {
                "name": "Recalc_CalcFields",
                "description": "Recalculates all calc fields defined in Field Rules"
            },
            "record_to_vars": {
                "description": " convert a record to a set of variables in vars",
                "arguments": [
                    {
                        "name": "vars",
                        "type": "P"
                    },
                    {
                        "name": "flagtrimtrailingspaces",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "remve_recs_in_list": {
                "description": "Removes the records Remove_List from the Primary_table. Records are matched on the Primary_table_key",
                "arguments": [
                    {
                        "name": "primary_table",
                        "type": "C"
                    },
                    {
                        "name": "remove_list",
                        "type": "C"
                    },
                    {
                        "name": "primary_table_key",
                        "type": "C"
                    },
                    {
                        "name": "transaction_table_key",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "silent",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "send": {
                "name": "Send",
                "description": "Zip and send a table. Options \"d\" - include Dictionary, \"x\" - include Indexes, \"p\" - display prompt dialog, \"c\" - compress before sending.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "emailaddress",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "use_a5_email_client",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "store_in_outbox",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "show_client",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "serversidequeryretract": {
                "name": "ServerSideQueryRetract",
                "description": "Retracts a previously applied server-side filter on an active-link table."
            },
            "serversidequeryretractall": {
                "name": "ServerSideQueryRetractAll",
                "description": "Retracts all previously applied server-side filters on an active-link table."
            },
            "serversidequeryrun": {
                "name": "ServerSideQueryRun",
                "description": "Runs a server-side query on an active-link table.",
                "arguments": [
                    {
                        "name": "filter",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "additive",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "queryflags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "serverside_records_get": {
                "name": "ServerSide_Records_Get",
                "description": "Returns the number of records in an active-link table. Faster than <tbl>.Records_Get() because it does not cause the local record cache to become fully populated.",
                "arguments": [
                    {
                        "name": "forcetruecountiflimiton",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "undelete": {
                "description": "Un-delete records in a table",
                "arguments": [
                    {
                        "name": "start_rec",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "end_rec",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "mark_rec",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "xml_export": {
                "description": "Exports data from a table to an XML file. Specify * to export all fields.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "fields",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "silent",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "open",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "zip": {
                "name": "Zip",
                "description": "Zip a table. Options \"d\" - include Dictionary, \"x\" - include Indexes, \"p\" - display prompt dialog.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "zipfilename",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open": {
                "description": "Open an existing table.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "table_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open": {
                "description": "Open an existing table.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "args",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "local_open": {
                "description": "Open an existing table using a namespace of a table (for opening tables under mappers without name conflicts).",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "open_session": {
                "description": "Open an existing table in a new session.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "is_valid": {
                "description": "Is the current table valid."
            },
            "close": {
                "description": "Close an open table."
            },
            "define_events": {
                "description": "Define an event handler, pass in optional inst variables pointer.",
                "arguments": [
                    {
                        "name": "event_code",
                        "type": "C"
                    },
                    {
                        "name": "variables",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "events_template": {
                "description": "Return a template of all the definable table events."
            },
            "attach_change_auditor": {
                "description": "Define a table to audit the initial record values of the table object - structure must match + audit table needs an extra field at the end called __RECNO__.",
                "arguments": [
                    {
                        "name": "audit_table",
                        "type": "P"
                    }
                ]
            },
            "backend_populate_method": {
                "description": "Return or Change the backend populate method (Bulk/Bulk_Only/Incremental/None).",
                "arguments": [
                    {
                        "name": "new_setting",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "backend_cleanup": {
                "description": "If true, table actual files are deleted when the table is closed.",
                "arguments": [
                    {
                        "name": "new_setting",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "backend_key": {
                "description": "Get/Set the unqiue backend table key expression (used to identify records).",
                "arguments": [
                    {
                        "name": "new_key_expresssion",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "handle": {
                "description": "Get the tables old style 'handle'."
            },
            "handle_raw": {
                "description": "Return the 'raw' table handle (if mapped table)."
            },
            "handles_in_use": {
                "description": "Get a crlf-delimited string of table handles in use.",
                "arguments": [
                    {
                        "name": "handles",
                        "type": "P"
                    }
                ]
            },
            "handle_set": {
                "description": "Given an old style 'handle', set the table pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "from_handle": {
                "name": "From_handle",
                "description": "Given an old style 'handle', return the table pointer.",
                "arguments": [
                    {
                        "name": "handle",
                        "type": "N"
                    }
                ]
            },
            "reset": {
                "description": "Open the primary table for the session.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "encryption key",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "current": {
                "description": "Returns the current table.",
                "arguments": [
                    {
                        "name": "slot",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "get": {
                "description": "Returns table of name.",
                "arguments": [
                    {
                        "name": "table_name",
                        "type": "C"
                    }
                ]
            },
            "batch_begin": {
                "description": "Lock database file for batched changes."
            },
            "batch_end": {
                "description": "Unlocks database file after batched changes."
            },
            "change_begin": {
                "description": "Begin changes to tables current record.",
                "arguments": [
                    {
                        "name": "honor_field_rules",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "change_end": {
                "description": "End changes to tables current record.",
                "arguments": [
                    {
                        "name": "commit",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "updateui",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enter_begin": {
                "description": "Begin a new record for the tables.",
                "arguments": [
                    {
                        "name": "honor_field_rules",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enter_end": {
                "description": "End a new record enter.",
                "arguments": [
                    {
                        "name": "commit",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "updateui",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "field_blank": {
                "description": "Places a blank value in the field specified.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "duplicate": {
                "description": "Create a copy of the table, with all records and layouts.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "flags",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "create_clone": {
                "description": "Create an empty copy of the table.",
                "arguments": [
                    {
                        "name": "filename"
                    },
                    {
                        "name": "flags",
                        "optional": true
                    }
                ]
            },
            "mode_get": {
                "description": "Get the data entry mode for the table."
            },
            "name_get": {
                "description": "Get the name or alias of the table."
            },
            "pack": {
                "description": "Removes all the records that are marked for deletion."
            },
            "record_clone": {
                "description": "Create a new record using the fields from a similar table.",
                "arguments": [
                    {
                        "name": "source_table",
                        "type": "P"
                    }
                ]
            },
            "records_get": {
                "description": "Returns the number of records in the table."
            },
            "rename": {
                "description": "Renames the table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "fetch_eof": {
                "description": "returns TRUE if the last record was fetched."
            },
            "fetch_find": {
                "description": "Using the current index, find specified key value, return record number.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "A"
                    }
                ]
            },
            "fetch_first": {
                "description": "Fetch the first record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_goto": {
                "description": "Goto a specific record number in the table, returns positive if record found, else negitive record number.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N"
                    }
                ]
            },
            "fetch_last": {
                "description": "Fetch the last record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_next": {
                "description": "Fetch the next record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_prev": {
                "description": "Fetch the previous record in the table/set. returns TRUE if record found.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "fetch",
                        "optional": true
                    }
                ]
            },
            "fetch_loc_next": {
                "description": "Locate the next value/pattern if the field specified.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "fetch_loc_prev": {
                "description": "Locate the previos value/pattern if the field specified.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "C"
                    },
                    {
                        "name": "fieldname",
                        "type": "C"
                    }
                ]
            },
            "row_state_get": {
                "description": "Get cursor state(s) can set fetch level or get a count - flags 'F'irst 'L'ast '+<#>' '-<#>' for offset '<' for attempt to fetch a minimum of count minus 1, '=' attempt to fetch minimum of count.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "count",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "firstrowstate",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_state_range_get": {
                "description": "Get cursor state(s) between (including) the provided rowstates.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N"
                    },
                    {
                        "name": "row_state1",
                        "type": "C"
                    },
                    {
                        "name": "row_state2",
                        "type": "C"
                    }
                ]
            },
            "row_state_compare": {
                "description": "Compare two cursor states.",
                "arguments": [
                    {
                        "name": "row_state1",
                        "type": "C"
                    },
                    {
                        "name": "row_state2",
                        "type": "C"
                    }
                ]
            },
            "row_state_put": {
                "description": "Restore a cursor state that was returned by cursor_state_get.",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C"
                    }
                ]
            },
            "row_content_get": {
                "description": "Evaluate content expression for cursor states.",
                "arguments": [
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "cursor_state",
                        "type": "C"
                    }
                ]
            },
            "row_position_get": {
                "description": "Get the sequential record position of the current record (or row state if one is provided).",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "row_state",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_position_extent": {
                "description": "Get the sequential record extent.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "row_position_set": {
                "description": "Get the row state given a position.",
                "arguments": [
                    {
                        "name": "position",
                        "type": "N"
                    },
                    {
                        "name": "level",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "index_primary_put": {
                "description": "Set the primary index for the table, using either name or Index object.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_primary_get": {
                "description": "Get the primary index for the table."
            },
            "range_add": {
                "description": "Add a range filter to the table.",
                "arguments": [
                    {
                        "name": "first_key",
                        "type": "A",
                        "optional": true
                    },
                    {
                        "name": "last_key",
                        "type": "A",
                        "optional": true
                    }
                ]
            },
            "range_drop": {
                "description": "Drop the current range from the table."
            },
            "set_create": {
                "description": "Use the current table to define a new set of provided filename.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    }
                ]
            },
            "field_get": {
                "description": "Get a field given a name or index into current Table.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "recno": {
                "description": "Return the current record for the table."
            },
            "eval": {
                "description": "Evaluate an expression in the context of the table.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "eval_valid": {
                "description": "Returns TRUE if expression is valid in the context of the table.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    }
                ]
            },
            "zap": {
                "description": "Delete all the records in the table if safety is TRUE.",
                "arguments": [
                    {
                        "name": "safety",
                        "type": "L"
                    }
                ]
            },
            "erase": {
                "description": "Delete the table if safety is TRUE.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "safety",
                        "type": "L"
                    }
                ]
            },
            "mark": {
                "description": "Mark the current record."
            },
            "unmark": {
                "description": "Unmarks the current record."
            },
            "delete": {
                "description": "Mark the current record for deletion."
            },
            "compact": {
                "description": "Compact DBF,SET,DDD,ALB files.",
                "arguments": [
                    {
                        "name": "file",
                        "type": "C"
                    }
                ]
            },
            "in_use": {
                "description": "Returns true if the named table/library is in use (does exclusive open test).",
                "arguments": [
                    {
                        "name": "file",
                        "type": "C"
                    },
                    {
                        "name": "physical_file_only",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_begin": {
                "description": "Start defining a new Table, defines the first field.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "fieldtype",
                        "type": "C"
                    },
                    {
                        "name": "field_width",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "field_decimal",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "field_add": {
                "description": "Define the next field in a table.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "fieldtype",
                        "type": "C"
                    },
                    {
                        "name": "field_width",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "field_decimal",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_end": {
                "description": "Complete definition of a new table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "create_end_extended": {
                "description": "Creates a new format .DBF table with extra information embedded in the header.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "extra",
                        "type": "A"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_table": {
                "description": "Create a DBF using a cr-lf ascii list that defines the columns, optional fileMap is crlf delimited list of alias=filename.",
                "arguments": [
                    {
                        "name": "columndefinitions",
                        "type": "C"
                    },
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "extra",
                        "type": "A"
                    },
                    {
                        "name": "file_open_mode",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filemap",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_record_get": {
                "description": "Get the record number order index object for a table."
            },
            "index_tag_add": {
                "description": "Add a tag to the production index for the database.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "is_marked": {
                "description": "Is the current record Marked."
            },
            "is_unmarked": {
                "description": "Is the current record Unmarked."
            },
            "is_deleted": {
                "description": "Is the current record Deleted."
            },
            "index_get": {
                "description": "Returns an index given a name.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    }
                ]
            },
            "index_name_get": {
                "description": "Retrieve open index tag names (from 1 to n) - if parameter ommitted, report ALL names.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "external_index_name_get": {
                "description": "Retrieve external tables index tag names in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    }
                ]
            },
            "external_index_def_from_name_get": {
                "description": "Retrieve a external tag information given a table or setname and description - format E=Error P=Filename O=order,F=filter,X=all flags, U=Unique, D=escending, I=Insensitive T=Type.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "description",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "external_index_def_enum": {
                "description": "Retrieve all tags a table or setname and description - format A=Active E=Error N=Name P=Filename O=order,F=filter,X=all flags, U=nique, D=escending, I=Insensitive T=Type.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C"
                    }
                ]
            },
            "field_name_get": {
                "description": "Retrieve field names in a cr-lf separated list."
            },
            "external_field_name_get": {
                "description": "Retrieve external tables field names (and other optional info) in a cr-lf separated list.\nn - field name \nN - uppercased field name\nt - simple field type\nT - full field type\nW - field width\nD - field decimal\nR - field rule (INCREMENT/CALCULATED=<EXPRESSION>)\n",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_field_info_get": {
                "description": "Retrieve external tables field names (and other optional info) in a cr-lf separated list.\nformat same as External_Field_Name_Get().",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_record_content_get": {
                "description": "Retrieve external tables records in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_record_content_from_key_get": {
                "description": "Retrieve external tables records in a cr-lf separated list given a list of records or keys.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "records",
                        "type": "C"
                    },
                    {
                        "name": "key_expression",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "record_content_get": {
                "description": "Retrieve record data in a cr-lf separated list.",
                "arguments": [
                    {
                        "name": "content_expression",
                        "type": "C"
                    },
                    {
                        "name": "order",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "fetchlevel",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "file_mode_get": {
                "description": "Get the sharing mode of the file the table."
            },
            "filename_get": {
                "description": "Get the filename of the table, if name specified, returns full path to provided database name.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "actual_filename_get": {
                "description": "Get the physical (master) filename of the table, if name specified, returns full path to provided database name.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "query_primary_put": {
                "description": "Returns existing query if already run, else runs and returns saved query.",
                "arguments": [
                    {
                        "name": "query_name",
                        "type": "C"
                    }
                ]
            },
            "query_create": {
                "description": "Create a new query - flags (N)ot remembered - if optional order and filter expressions are specified, then the query variable is ignored.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "order_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "args",
                        "type": "p",
                        "optional": true
                    }
                ]
            },
            "query_from_range": {
                "description": "Create a query from the current range, if one is in effect - returns .T. if new query created."
            },
            "query_detach": {
                "description": "Detach current query (or named query if specified).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "query_detach_all": {
                "description": "Detach all queries."
            },
            "queries_reopen": {
                "description": "Reopen the queries in a session."
            },
            "crosstab": {
                "description": "Cross tabulate records of database into result database."
            },
            "post": {
                "description": "Replace, add, or subtract fields values in the table using fields from a transaction database."
            },
            "join": {
                "description": "Create a new table by merging the records from the table with a secondary table."
            },
            "append": {
                "description": "Append the records of one table to another, optional argument provides a quick way to append records of exact same table structure.",
                "arguments": [
                    {
                        "name": "source_tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "copy": {
                "description": "Copy all or some of the fields from the table to another table or set."
            },
            "update": {
                "description": "Update all records in table using expressions."
            },
            "update_production_index": {
                "description": "Update the production index associated with the table."
            },
            "subtract": {
                "description": "Create a new table of records not common to table and secondary table."
            },
            "intersect": {
                "description": "Create a new table that is the intersection between the table and a secondary table."
            },
            "mark_range": {
                "description": "Mark a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "unmark_range": {
                "description": "Unmark a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "delete_range": {
                "description": "Delete a range of records in the table.",
                "arguments": [
                    {
                        "name": "filter_expr",
                        "type": "C"
                    }
                ]
            },
            "mark_dups": {
                "description": "Marks the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "mark_dups2": {
                "description": "Marks the duplicate records in the table, including the original record.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "unmark_dups": {
                "description": "Unmarks the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "delete_dups": {
                "description": "Deletes the duplicate records in the table.",
                "arguments": [
                    {
                        "name": "dup_key_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C"
                    }
                ]
            },
            "export": {
                "description": "Export records in table to specified output file."
            },
            "import": {
                "description": "Import records from specified input file to the table."
            },
            "summarize": {
                "description": "Summarize the records of the table into a specified output table."
            },
            "fields_get": {
                "description": "Get the number of fields in the table."
            },
            "index_open": {
                "description": "Open an index file for the database.",
                "arguments": [
                    {
                        "name": "index_name",
                        "type": "C"
                    }
                ]
            },
            "records_deleted": {
                "description": "Returns a count of the records deleted."
            },
            "index_create_begin": {
                "description": "Begin creation of a new index, add the first tag.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_add": {
                "description": "Add the next tag.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C"
                    },
                    {
                        "name": "order_expression",
                        "type": "C"
                    },
                    {
                        "name": "filter_expression",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "index_type",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "index_create_end": {
                "description": "Complete creation of an index.",
                "arguments": [
                    {
                        "name": "indexname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "isopen": {
                "description": "Test if a table is open - return .T. if table is currently open.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "record_data_get": {
                "description": "Return the all the data from the current records field as a blob.",
                "arguments": [
                    {
                        "name": "record_number",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "record_data_set": {
                "description": "Set all the feilds int the current record using data from a blob.",
                "arguments": [
                    {
                        "name": "data",
                        "type": "B"
                    }
                ]
            },
            "rules_get": {
                "description": "Provides access to the tables field rules."
            },
            "relation_add": {
                "description": "Add a relation to a table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "relation_add_mapped": {
                "description": "Add an internal relation to a mapped table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "relation_change": {
                "description": "Change a relation's settings."
            },
            "relation_drop": {
                "description": "Remove a relation from a table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "eof": {
                "description": "Returns TRUE if we are on the last record of the specified (or current) search order.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "bof": {
                "description": "Returns TRUE if we are on the first record of the specified (or current) search order.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "persist": {
                "description": "Flags opened table to not be closed automatically on termination of script."
            },
            "encrypt": {
                "description": "Encrypt a database file."
            },
            "decrypt": {
                "description": "Decrypt a database file."
            },
            "encrypted": {
                "description": "Returns TRUE if table is encrypted."
            },
            "sql_exec": {
                "description": "Execute a SQL statement (for ODBC tables) - returns error string if error occured.",
                "arguments": [
                    {
                        "name": "statement",
                        "type": "C"
                    },
                    {
                        "name": "options",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "fields",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "enum_capability": {
                "description": "Enumerate capabilities (ODBC data sources) - returns parameter name.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "get_capability": {
                "description": "Get a capability (if defined) for a table.",
                "arguments": [
                    {
                        "name": "parameter",
                        "type": "C"
                    }
                ]
            },
            "enum_syntax": {
                "description": "Enumerate ODBC driver syntax elements.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "get_syntax": {
                "description": "Get syntax for an ODBC setting.",
                "arguments": [
                    {
                        "name": "parameter",
                        "type": "C"
                    }
                ]
            },
            "get_memo_extension": {
                "description": "Returns the Memo file extension that would be associated with the passed in Table extension.",
                "arguments": [
                    {
                        "name": "table_extension",
                        "type": "C"
                    }
                ]
            },
            "get_index_extension": {
                "description": "Returns the Index file extension that would be associated with the passed in Table extension.",
                "arguments": [
                    {
                        "name": "table_extension",
                        "type": "C"
                    }
                ]
            },
            "get_source_type": {
                "description": "Returns the type of source the table is - Native, ODBC , Native-Encrypted.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "getlocation",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_shadow": {
                "description": "Create a shadow table - the shadowfilename is the table created, it points to the actualfilename.",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    },
                    {
                        "name": "actualfilename",
                        "type": "C"
                    },
                    {
                        "name": "shadow_associated_files",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "create_backend_loader": {
                "description": "Create a shadow table for a backend - causes the backend loaded to be invoked with the filename.",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_mapping_loader": {
                "description": "Create a shadow table for a table re-mapper (alternate names for a table or tables).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_filesystem_library": {
                "description": "Create a shadow table for a file-system library, can have an optional path (which can be relative to shadow location).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    },
                    {
                        "name": "alternatepath",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "create_json_loader": {
                "description": "Create a shadow table for a json file of the same name (with a json extension).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "create_bson_loader": {
                "description": "Create a shadow table for a bson file of the same name (with a bson extension).",
                "arguments": [
                    {
                        "name": "shadowfilename",
                        "type": "C"
                    }
                ]
            },
            "get_group_name": {
                "description": "Returns name of associated groups (table or report level if defined).",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "previous_record": {
                "description": "Returns the previous record data entry was performed on."
            },
            "is_record_locked": {
                "description": "return TRUE if the record is locked."
            },
            "child_get": {
                "description": "Returns names of children of table [or a single child if number is provided].",
                "arguments": [
                    {
                        "name": "child_number",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "parent_get": {
                "description": "Returns name of the parent table."
            },
            "parent_link_expr_get": {
                "description": "Returns the parent linking expression."
            },
            "link_expr_get": {
                "description": "Returns the linking key expression."
            },
            "link_filter_expr_get": {
                "description": "Returns the link filter expression."
            },
            "link_index_flags_get": {
                "description": "Returns the link index flags."
            },
            "relation_get": {
                "description": "Returns the tables relation type (Single/Many)."
            },
            "relation_key_expression": {
                "description": "If table is a child table, get the key expression part of the index order."
            },
            "relation_order_expression": {
                "description": "If table is a child table, get the order expression part of the index order."
            },
            "relation_tag": {
                "description": "Builds and Returns an index handle for the relation_change and relation_add commands.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "C"
                    },
                    {
                        "name": "filter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "refresh": {
                "description": "Perform network refresh, return True if changed."
            },
            "need_refresh": {
                "description": "Return True if table data in memory is out of date."
            },
            "field_statistics": {
                "description": "Collects statistics for passed in expression/field.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "C"
                    },
                    {
                        "name": "stats",
                        "type": "P"
                    }
                ]
            },
            "temporary_open": {
                "description": "Opens temporary tables for caching (named tables stay in memory till temporary close).",
                "arguments": [
                    {
                        "name": "table_name_list",
                        "type": "C"
                    }
                ]
            },
            "temporary_close": {
                "description": "Close temporary tables (ignores non-cached tables).",
                "arguments": [
                    {
                        "name": "table_name_list",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sessionhandle": {
                "description": "Return the session that the table is opened under."
            },
            "related_tables_get": {
                "description": "Return the tables in a set that can be represented with a lookup expression to the table.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_variables_get": {
                "description": "Get externally defined variables.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "variable_context",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "external_calcs_get": {
                "description": "Get externally defined calc fields.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "reference_expression_get": {
                "description": "Get the expression needed to reconstruct a pointer."
            },
            "name_normalize": {
                "description": "Normalize a table name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "fieldname_change": {
                "description": "Change the names of fields in a table without restructuring the table.",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "fieldnames_old",
                        "type": "C"
                    },
                    {
                        "name": "fieldnames_new",
                        "type": "C"
                    }
                ]
            },
            "keylist_exclude": {
                "description": "Returns a list of key values to exclude for the result fieldname - not including the current record.",
                "arguments": [
                    {
                        "name": "fieldname",
                        "type": "C"
                    },
                    {
                        "name": "unique_expression",
                        "type": "C"
                    }
                ]
            },
            "row_position_override_add": {
                "description": "Sets override for presented row state position(s).",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C"
                    },
                    {
                        "name": "relative_row_states",
                        "type": "C"
                    }
                ]
            },
            "row_position_override_drop": {
                "description": "Remove one (or all) row state position overrides from a table.",
                "arguments": [
                    {
                        "name": "row_state",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "row_state_unmark": {
                "description": "Unmark all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "row_state_mark": {
                "description": "Mark all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "row_state_delete": {
                "description": "Delete all the rows in the list.",
                "arguments": [
                    {
                        "name": "row_states",
                        "type": "C"
                    }
                ]
            },
            "relation_link_manual": {
                "description": "Turn the automatic refresh of links off.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_link_automatic": {
                "description": "Turn the automatic refresh of links back on.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_link_query_info": {
                "description": "Get relation query info - O-rder F-ilter X-flags.",
                "arguments": [
                    {
                        "name": "flags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "relation_partitions": {
                "description": "Return all the partitions in a manually partitioned set."
            },
            "populate_from_string": {
                "description": "Populate a table from a string.",
                "arguments": [
                    {
                        "name": "record_format",
                        "type": "C"
                    },
                    {
                        "name": "record_sep",
                        "type": "C"
                    },
                    {
                        "name": "record_data",
                        "type": "C"
                    }
                ]
            },
            "extended_interface": {
                "description": "Get pointer to properties and methods specfic to the table (internals)."
            },
            "mapper_create": {
                "description": "Create a mapping table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "mapping",
                        "type": "C"
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "mapper_change": {
                "description": "Change a mapping tables field maps (keeps same structure of table).",
                "arguments": [
                    {
                        "name": "mapping",
                        "type": "C"
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "backend_create": {
                "description": "Create a backend table (with optional provided cache - which can be provided later by the backend_cache_change).",
                "arguments": [
                    {
                        "name": "unqiue_key",
                        "type": "C"
                    },
                    {
                        "name": "page_size",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "tbl",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "backend_cache_change": {
                "description": "Change the backend table for a created backend.",
                "arguments": [
                    {
                        "name": "tbl",
                        "type": "P"
                    }
                ]
            },
            "context": {
                "description": "Get any context information for the table as it was opened."
            },
            "populate_grid": {
                "description": "Populate via arrays a grid - use $row$ and $column$ as placeholders for the row/column index.\nB - don't resize the array to be bigger\nS - don't resize the array to be smaller\nF - fill (letover) empty fields in array with blanks\nD - include the deleted/marked/unmarked psuedofield in the list of fields (as field #1)\nR+# - start rows at +# position\nC+# - start column at +# position",
                "arguments": [
                    {
                        "name": "expression_template",
                        "type": "C"
                    },
                    {
                        "name": "start_row_state",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "end_row_state",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "variable_frame",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "table_restructure": {
                "description": "field_definitions is a cr-lf delimited list of <fieldname>,<type>,<width>,<dec>.\n",
                "arguments": [
                    {
                        "name": "field_definitions",
                        "type": "C"
                    }
                ]
            },
            "table_create": {
                "description": "field_definitions is a cr-lf delimited list of <fieldname>,<type>,<width>,<dec>.\n",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "field_definitions",
                        "type": "C"
                    }
                ]
            },
            "paged_records_create": {
                "description": "Adds a number of paged records to a table.",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    }
                ]
            },
            "extra_info": {
                "description": "Gets raw extra information embedded in a DBF header.",
                "arguments": [
                    {
                        "name": "records",
                        "type": "N"
                    }
                ]
            },
            "memo_check": {
                "description": "Validate the structure of a memo file flags (v-alidate,f-ilemapping,fs-file mapping with sample,r=# - start at record).",
                "arguments": [
                    {
                        "name": "options",
                        "type": "C"
                    },
                    {
                        "name": "repair",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "enum_open": {
                "description": "Enumerate all open tables.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "enum_session_open": {
                "description": "Enumerate all open tables in the current session.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "field_space_usage": {
                "description": "Visits all records and dumps field name + space used."
            },
            "generate_sample_definition": {
                "description": "Generates samples for records in the format of <fullname> = <value expression>."
            },
            "suggest": {
                "description": "Suggest a list of possible values given a sample value (to drive auto-complete).",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    },
                    {
                        "name": "limit",
                        "type": "n"
                    },
                    {
                        "name": "moretext",
                        "type": "c"
                    },
                    {
                        "name": "filter",
                        "type": "c"
                    }
                ]
            },
            "external_suggest": {
                "description": "Suggest a list of possible values given a sample value (to drive auto-complete).",
                "arguments": [
                    {
                        "name": "tableorset",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    },
                    {
                        "name": "limit",
                        "type": "n"
                    },
                    {
                        "name": "moretext",
                        "type": "c"
                    },
                    {
                        "name": "filter",
                        "type": "c"
                    }
                ]
            },
            "to_sql_expression": {
                "description": "If convertable to a SQL level expression, return than expression.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "to_sql_columns_format": {
                "description": "Extract SQL field references + a format transform expression.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "to_sql_order": {
                "description": "If expression can be converted in whole OR partically to a SQL filter, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "to_sql_filter": {
                "description": "If expression can be converted in whole OR partically to a SQL order, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "external_to_sql_expression": {
                "description": "If convertable to a SQL level expression, return than expression.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_to_sql_columns_format": {
                "description": "Extract SQL field references + a format transform expression.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_to_sql_order": {
                "description": "If expression can be converted in whole OR partically to a SQL filter, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "external_to_sql_filter": {
                "description": "If expression can be converted in whole OR partically to a SQL order, return the SQL portion, or both portions if a separator is provided.",
                "arguments": [
                    {
                        "name": "columnnamemap",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "sep",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "sql_fetch_behind": {
                "description": "Start populating table (if not already populated) returns .t. if already populated.",
                "arguments": [
                    {
                        "name": "position",
                        "type": "n"
                    },
                    {
                        "name": "flags",
                        "type": "c"
                    },
                    {
                        "name": "oncomplete",
                        "type": "c"
                    },
                    {
                        "name": "onabort",
                        "type": "c"
                    }
                ]
            },
            "sql_fetch_cutoff": {
                "description": "Return the number of records that have already been fetched for the table."
            },
            "background_locate": {
                "description": "Search sequentially through a table (by record order) for record that matches criteria.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "flags",
                        "type": "c"
                    },
                    {
                        "name": "oncomplete",
                        "type": "c"
                    },
                    {
                        "name": "onabort",
                        "type": "c"
                    },
                    {
                        "name": "statusmessage",
                        "type": "c"
                    }
                ]
            },
            "background_locate_busy": {
                "description": "Returns true if locate is still going on.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "background_locate_result": {
                "description": "Returns the locate record number result (0 if not found or busy).",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "external_eval_typeof": {
                "description": "Returns 'sample' data given a column map (to glean type and size information).",
                "arguments": [
                    {
                        "name": "columndefinitions",
                        "type": "c"
                    },
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "mapping_list_get": {
                "description": "For a low level table representing multiple logic table, get the multiple table definitions."
            },
            "ui_enabled": {
                "description": "Returns if UI enabled flag is set for the table, setting topMost means ignore ui_disable blocks.",
                "arguments": [
                    {
                        "name": "topmost",
                        "type": "L"
                    }
                ]
            },
            "ui_enabled_set": {
                "description": "Set the top ui enabled flag.",
                "arguments": [
                    {
                        "name": "enabled",
                        "type": "L"
                    }
                ]
            },
            "ui_disable_begin": {
                "description": "Disable UI for table for operation within block."
            },
            "ui_disable_end": {
                "description": "End a disabled UI block."
            },
            "get_cursor": {
                "description": "Returns 'cursor' for table (keeps own position)."
            },
            "get_navigation": {
                "description": "Returns a named navigation object bound to the table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "has_navigation": {
                "description": "Returns if the named navigation object exists for a table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "enum_navigation": {
                "description": "Returns the navigation objects attached to the table (N=name,V=viewport size,I=child#,T=tablename which shows children too)).",
                "arguments": [
                    {
                        "name": "format",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "nextrow": {
                "description": "Get the first or next row - return true if the row was found."
            },
            "data": {
                "name": "Data",
                "description": "Get data for a named field.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "column_order": {
                "description": "Return 'A', 'D' or '' for column order status.",
                "arguments": [
                    {
                        "name": "columnname",
                        "type": "c"
                    }
                ]
            },
            "dataentry_get": {
                "description": "Returns a field rules 'data entry object' for table."
            },
            "validate_record": {
                "description": "Returns field rule validation of the current record - format has placeholders $(field), $(error) and  $(errorhtml).",
                "arguments": [
                    {
                        "name": "format",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "change_record": {
                "description": "Change current record, honoring field rules, returns an error object - record not changed if any errors occurred.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "enter_record": {
                "description": "Enter a new record, honoring field rules, returns an error object - record not changed if any errors occurred.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "delete_record": {
                "description": "Delete current record, honoring field rules, returns an error object - record not deleted if any errors occurred."
            },
            "get_record": {
                "description": "Populate field values with record content.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "sql_open_arguments": {
                "description": "Get open arguments for an open active link table.",
                "arguments": [
                    {
                        "name": "fieldvalues",
                        "type": "p"
                    }
                ]
            },
            "activelink": {
                "name": "activeLink",
                "description": "Retrieves active link automation api - (always returns an api - for non-activelink tables, returns appropriate values)."
            },
            "record_identity": {
                "description": "Express the current record as a filter expression (based on key expression), if no expression passed, uses default record identity (based on definition of table).",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "invoke_event": {
                "description": "Invoke a low-level field rule record event (i.e. enter,change,mark,unmark,delete, canenter, canchange etc).",
                "arguments": [
                    {
                        "name": "eventtype",
                        "type": "c"
                    }
                ]
            },
            "sql_open": {
                "description": "Open a just-in-time SQL as a table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "C"
                    },
                    {
                        "name": "selectstatement",
                        "type": "C"
                    },
                    {
                        "name": "portable",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_named_open": {
                "description": "Open a just-in-time named SQL as a table.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_reset": {
                "description": "Open a just-in-time SQL as the primary table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "C"
                    },
                    {
                        "name": "selectstatement",
                        "type": "C"
                    },
                    {
                        "name": "portable",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "sql_named_reset": {
                "description": "Open a just-in-time named SQL as the primary table.",
                "arguments": [
                    {
                        "name": "named",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "dictionary",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "overridedefinitions",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "flush_indexes": {
                "description": "Force indexes to be reloaded."
            },
            "define_extra_fields": {
                "description": "Define mapping of crlf delimited (flatname|field name|json path).",
                "arguments": [
                    {
                        "name": "fields"
                    }
                ]
            },
            "get_extra_fields": {
                "description": "Get the extra JSON fields associated with the table."
            },
            "pending_query_order": {
                "description": ""
            }
        },
        "__name__": "Table"
    },
    "tagschemamapper": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Ask if a requested schema tag attribute is available.",
                "arguments": [
                    {
                        "name": "attributename",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Get a pointer to a loaded schema tag attribute.",
                "arguments": [
                    {
                        "name": "attributename",
                        "type": "c"
                    }
                ]
            },
            "enumerateattributes": {
                "name": "EnumerateAttributes",
                "description": "Get a list of defined schema attributes."
            }
        },
        "__name__": "TagSchemaMapper"
    },
    "texteditstate": {
        "__methods__": {
            "select": {
                "name": "Select",
                "description": "Set text selection.",
                "arguments": [
                    {
                        "name": "start",
                        "type": "n"
                    },
                    {
                        "name": "end",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "undo": {
                "name": "Undo",
                "description": "Undo a number of operations.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "redo": {
                "name": "Redo",
                "description": "Redo a number of operations.",
                "arguments": [
                    {
                        "name": "level",
                        "type": "n",
                        "optional": true
                    }
                ]
            },
            "undobegin": {
                "name": "UndoBegin",
                "description": "Begin an undo operation.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "undoend": {
                "name": "UndoEnd",
                "description": "End of an undo operation."
            },
            "indentselection": {
                "name": "IndentSelection",
                "description": "Indent a selection.",
                "arguments": [
                    {
                        "name": "indentchar",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "outdentselection": {
                "name": "OutdentSelection",
                "description": "Indent a selection.",
                "arguments": [
                    {
                        "name": "indentchar",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getundocount": {
                "name": "GetUndoCount",
                "description": "Get Undo buffer count."
            },
            "getredocount": {
                "name": "GetRedoCount",
                "description": "Get Redo buffer count."
            },
            "getundolist": {
                "name": "GetUndoList",
                "description": "Get undo buffer list."
            },
            "getredolist": {
                "name": "GetRedoList",
                "description": "Get undo buffer list."
            },
            "setmaxcharacters": {
                "name": "SetMaxCharacters",
                "description": "Set new limit for editor, will not set to less than existing text.",
                "arguments": [
                    {
                        "name": "limit",
                        "type": "N"
                    }
                ]
            },
            "has_variables": {
                "name": "Has_Variables",
                "description": "Returns true if state variables already exist for text state."
            },
            "get_variables": {
                "name": "Get_Variables",
                "description": "Gets (or creates) state variable frame for text state."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of the state."
            }
        },
        "__name__": "TextEditState"
    },
    "thread": {
        "priority": {
            "__enumeration__": [
                "Above_Normal",
                "Below_Normal",
                "Normal",
                "Highest",
                "Idle",
                "Lowest",
                "Critical",
                "InvalidThreadHandle"
            ],
            "__name__": "Priority"
        },
        "__name__": "Thread"
    },
    "uidisableobject": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "disable": {
                "name": "Disable",
                "description": "Disables UI for the current thread."
            },
            "enable": {
                "name": "Enable",
                "description": "Enables UI for the current thread."
            },
            "isdisabled": {
                "name": "IsDisabled",
                "description": "Returns true if UI is currently disabled for the thread."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "UiDisableObject"
    },
    "uifreezeobject": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a ui freeze object."
            }
        },
        "__name__": "UiFreezeObject"
    },
    "variablebinding": {
        "__methods__": {
            "bind": {
                "name": "Bind",
                "description": "Create a new binding.",
                "arguments": [
                    {
                        "name": "host",
                        "type": "P"
                    },
                    {
                        "name": "binding",
                        "type": "C"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "close": {
                "name": "Close",
                "description": "Remove binding from the host."
            },
            "commit": {
                "name": "Commit",
                "description": "Refresh the the host from the variables."
            },
            "dirty": {
                "name": "Dirty",
                "description": "Check to see if any of the variables have changed since the last refresh."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "refresh": {
                "name": "Refresh",
                "description": "Refresh the variables with the latest host(s) values."
            }
        },
        "__name__": "VariableBinding"
    },
    "variablebindinghost": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "VariableBindingHost"
    },
    "variablecontainer": {
        "__functions__": {
            "createcacheproperty": {
                "name": "CreateCacheProperty",
                "description": "Create a property of type 'P' that will not be wrapped by the VariableContainer."
            },
            "getmetrics": {
                "name": "GetMetrics",
                "description": "Get an object interface pointer (that you can set against).",
                "arguments": [
                    {
                        "name": "dump",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "setarraycachecutoff": {
                "name": "SetArrayCacheCutoff",
                "description": "Set the minimum array to cache.",
                "arguments": [
                    {
                        "name": "cutoff",
                        "type": "N"
                    }
                ]
            }
        },
        "__methods__": {
            "cleanup": {
                "name": "Cleanup",
                "description": "Force cleanup on object (to break links)."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "getchanged": {
                "name": "GetChanged",
                "description": "Returned changed properties."
            },
            "getobject": {
                "name": "GetObject",
                "description": "Get an object interface pointer (that you can set against)."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "wrapdefinition": {
                "name": "WrapDefinition",
                "description": "Wrap a definiton (to override).",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "P"
                    }
                ]
            }
        },
        "__name__": "VariableContainer"
    },
    "viewport": {
        "__methods__": {
            "format": {
                "name": "Format",
                "description": "Do formatted output.",
                "arguments": [
                    {
                        "name": "formatter",
                        "type": "p"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "pointintersect": {
                "name": "PointIntersect",
                "description": "Do formatted output.",
                "arguments": [
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "formatter",
                        "type": "p"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "getcontainer": {
                "name": "GetContainer",
                "description": "Do formatted output.",
                "arguments": [
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    },
                    {
                        "name": "formatter",
                        "type": "p"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "rectangleintersect": {
                "name": "RectangleIntersect",
                "description": "Do formatted output.",
                "arguments": [
                    {
                        "name": "x",
                        "type": "n"
                    },
                    {
                        "name": "y",
                        "type": "n"
                    },
                    {
                        "name": "width",
                        "type": "n"
                    },
                    {
                        "name": "height",
                        "type": "n"
                    },
                    {
                        "name": "formatter",
                        "type": "p"
                    },
                    {
                        "name": "flags",
                        "type": "C",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "ViewPort"
    },
    "waitdialog": {
        "__methods__": {
            "allowcancel": {
                "name": "AllowCancel",
                "description": "Wait dialog has a cancel button.",
                "arguments": [
                    {
                        "name": "flag",
                        "type": "L"
                    }
                ]
            },
            "cancel_cancel": {
                "name": "Cancel_Cancel",
                "description": "Continue processing after a cancle."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "close": {
                "name": "Close",
                "description": "Close the open wait dialog."
            },
            "create": {
                "name": "Create",
                "description": "Create a wait dialog.",
                "arguments": [
                    {
                        "name": "message_lines",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "style",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "width",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "has_close_button": {
                "name": "Has_Close_Button",
                "description": "Wait dialog has a close button.",
                "arguments": [
                    {
                        "name": "flag",
                        "type": "L"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "pause": {
                "name": "Pause",
                "description": "Depracated call."
            },
            "refresh": {
                "name": "Refresh",
                "description": "Force a dialog refresh."
            },
            "resume": {
                "name": "Resume",
                "description": "Depracated call."
            },
            "set_bottom_message": {
                "name": "Set_Bottom_Message",
                "description": "Set the bottom message for the wait dialog.",
                "arguments": [
                    {
                        "name": "message",
                        "type": "C"
                    }
                ]
            },
            "set_color": {
                "name": "Set_Color",
                "description": "Set the text color for the wait dialog.",
                "arguments": [
                    {
                        "name": "color",
                        "type": "C"
                    }
                ]
            },
            "set_dialog_color": {
                "name": "Set_Dialog_Color",
                "description": "Set the color of the wait dialog.",
                "arguments": [
                    {
                        "name": "color",
                        "type": "C"
                    }
                ]
            },
            "set_message": {
                "name": "Set_Message",
                "description": "Set the message for the wait dialog.",
                "arguments": [
                    {
                        "name": "message",
                        "type": "C"
                    }
                ]
            },
            "set_percent": {
                "name": "Set_Percent",
                "description": "Set the percentage meter for the wait dialog.",
                "arguments": [
                    {
                        "name": "count",
                        "type": "N"
                    },
                    {
                        "name": "total_count",
                        "type": "N"
                    }
                ]
            },
            "set_title": {
                "name": "Set_Title",
                "description": "Set the title for the wait dialog.",
                "arguments": [
                    {
                        "name": "title",
                        "type": "C"
                    }
                ]
            },
            "user_canceled": {
                "name": "User_Canceled",
                "description": "Check to see if the user has cancelled."
            }
        },
        "__name__": "WaitDialog"
    },
    "webcomponent": {
        "__functions__": {
            "createscriptcomponent": {
                "name": "CreateScriptComponent",
                "description": "Create a script Component.",
                "arguments": [
                    {
                        "name": "pattern",
                        "type": "c"
                    },
                    {
                        "name": "designtimetemplate",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "WebComponent"
    },
    "webcomponentinstance": {},
    "webcomponentinstancecollection": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create a standalone instance collection."
            }
        },
        "__methods__": {
            "todesign": {
                "name": "ToDesign",
                "description": "Converts A5W text to Design-time HTML with a5_tag attributes.",
                "arguments": [
                    {
                        "name": "html",
                        "type": "c"
                    }
                ]
            },
            "toa5w": {
                "name": "ToA5W",
                "description": "Converts marked up Design-time HTML back into A5W text.",
                "arguments": [
                    {
                        "name": "html",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "WebComponentInstanceCollection"
    },
    "webcomponentlibrary": {
        "__functions__": {
            "getdefault": {
                "name": "GetDefault",
                "description": "Return a pointer to the default WebComponent libary."
            }
        },
        "__methods__": {
            "clearlibrary": {
                "name": "ClearLibrary",
                "description": "Re-initialize the component library."
            },
            "addcomponent": {
                "name": "AddComponent",
                "description": "Add a component to the library.",
                "arguments": [
                    {
                        "name": "component",
                        "type": "WebComponent"
                    }
                ]
            }
        },
        "__name__": "WebComponentLibrary"
    },
    "webcomponentscriptinstance": {
        "__enumeration__": [
            "CodeBehind"
        ],
        "__name__": "WebComponentScriptInstance"
    },
    "xbasicevalcontext": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create an xbasic eval environment that allows for registration and trackingh of expression.",
                "arguments": [
                    {
                        "name": "env",
                        "type": "p",
                        "optional": true
                    }
                ]
            }
        },
        "__methods__": {
            "getproperty": {
                "name": "GetProperty",
                "description": "Return property from xbasic eval.",
                "arguments": [
                    {
                        "name": "property",
                        "type": "c"
                    }
                ]
            },
            "setproperty": {
                "name": "SetProperty",
                "description": "Set property from xbasic eval.",
                "arguments": [
                    {
                        "name": "property",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "A"
                    }
                ]
            },
            "compareproperty": {
                "name": "CompareProperty",
                "description": "Set property from xbasic eval.",
                "arguments": [
                    {
                        "name": "property",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "A"
                    }
                ]
            },
            "enumerateproperties": {
                "name": "EnumerateProperties",
                "description": "Returns a cr-lf delimited list of properties that are registered with the environment."
            },
            "listenonpropertychange": {
                "name": "ListenOnPropertyChange",
                "description": "Listen for property being changed.",
                "arguments": [
                    {
                        "name": "listener",
                        "type": "p"
                    },
                    {
                        "name": "handlebusy",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "propertylistenersbusy": {
                "name": "PropertyListenersBusy",
                "description": "Return the number of property listeners that are busy."
            },
            "populateactivexonchange": {
                "name": "PopulateActivexOnChange",
                "description": "Creates a listener on an activex control.",
                "arguments": [
                    {
                        "name": "activex",
                        "type": "p"
                    },
                    {
                        "name": "defaultfontproperty",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getxmldocument": {
                "name": "GetXMLDocument",
                "description": "Get the associated XML document."
            },
            "hasxmlpropertydata": {
                "name": "HasXMLPropertyData",
                "description": "Returns true if the property named has XML data.",
                "arguments": [
                    {
                        "name": "property",
                        "type": "c"
                    }
                ]
            },
            "getxmlpropertydata": {
                "name": "GetXMLPropertyData",
                "description": "Returns XML instance element for named property.",
                "arguments": [
                    {
                        "name": "property",
                        "type": "c"
                    }
                ]
            },
            "getinstance": {
                "name": "GetInstance",
                "description": "Return a pointer that can access all properties in context."
            },
            "createonget": {
                "name": "CreateOnGet",
                "description": "Calling this method causes the eval context GET method to always succeed (return value).",
                "arguments": [
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear all registered properties (because we are starting over)."
            },
            "close": {
                "name": "Close",
                "description": "Close down environment."
            },
            "rebind": {
                "name": "Rebind",
                "description": "Rebind environment."
            }
        },
        "__name__": "XBasicEvalContext"
    },
    "xbasicolefonthelper": {
        "__methods__": {
            "handle": {
                "name": "Handle",
                "description": "Return a handle to the font."
            },
            "close": {
                "name": "Close",
                "description": "Close the font handle, and unhook the font."
            }
        },
        "__name__": "XBasicOLEFontHelper"
    },
    "xbasicpropertydelegateargs": {
        "__enumeration__": [
            "Name",
            "Value",
            "Data"
        ],
        "__name__": "XBasicPropertyDelegateArgs"
    },
    "xmla5viewcontrol": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLA5ViewControl"
    },
    "xmlattribute": {
        "__methods__": {
            "setcomplexdata": {
                "name": "SetComplexData",
                "description": "Set a complex data type.",
                "arguments": [
                    {
                        "name": "complexdata",
                        "type": "XMLCompleData"
                    }
                ]
            },
            "hascomplexdata": {
                "name": "HasComplexData",
                "description": "Return true if data is complex."
            },
            "getcomplexdata": {
                "name": "GetComplexData",
                "description": "Get a complex data type (if exists)."
            },
            "isnull": {
                "name": "IsNull",
                "description": "Returns true if attribute is NULL."
            }
        },
        "__name__": "XMLAttribute"
    },
    "xmlattributequery": {
        "__methods__": {
            "dumpformat": {
                "name": "DumpFormat",
                "description": "Dumps data from the attribute list N-ame, V-alue,E-lement, I-d for element.",
                "arguments": [
                    {
                        "name": "format",
                        "type": "c"
                    }
                ]
            },
            "getvalues": {
                "name": "GetValues",
                "description": "Dump values in cr-lf format (for processing)."
            },
            "setvalues": {
                "name": "SetValues",
                "description": "Set attributes values from data in cr-lf list.",
                "arguments": [
                    {
                        "name": "values",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLAttributeQuery"
    },
    "xmlautonumbercollection": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create an XML auto-number data collection.",
                "arguments": [
                    {
                        "name": "start",
                        "type": "n"
                    }
                ]
            },
            "create": {
                "name": "Create",
                "description": "Create an XML generic data collection."
            }
        },
        "__methods__": {
            "getautonumber": {
                "name": "GetAutoNumber",
                "description": "Gets the number associated with a name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getstring": {
                "name": "GetString",
                "description": "Get string represented by XML node."
            },
            "setstring": {
                "name": "SetString",
                "description": "Set string from XML node to complex type.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLAutoNumberCollection"
    },
    "xmlchangehandlerargs": {
        "__enumeration__": [
            "element",
            "attribute"
        ],
        "__name__": "XMLChangeHandlerArgs"
    },
    "xmlcollectionentry": {
        "__methods__": {
            "getname": {
                "name": "GetName",
                "description": "Returns an entries name."
            },
            "getstring": {
                "name": "GetString",
                "description": "Get string represented by XML node."
            },
            "setstring": {
                "name": "SetString",
                "description": "Set string from XML node to complex type.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLCollectionEntry"
    },
    "xmlcomplexdata": {
        "__methods__": {
            "getstring": {
                "name": "GetString",
                "description": "Get string represented by XML node."
            },
            "setstring": {
                "name": "SetString",
                "description": "Set string from XML node to complex type.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLComplexData"
    },
    "xmldatacollection": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create an XML generic data collection."
            }
        },
        "__methods__": {
            "getstring": {
                "name": "GetString",
                "description": "Get string represented by XML node."
            },
            "setstring": {
                "name": "SetString",
                "description": "Set string from XML node to complex type.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLDataCollection"
    },
    "xmldocument": {
        "__methods__": {
            "findelement": {
                "name": "FindElement",
                "description": "Find element that matches XMLElement expression - returns src_index.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "queryelement": {
                "name": "QueryElement",
                "description": "Return a list of elements that match criteria.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "queryattributes": {
                "name": "QueryAttributes",
                "description": "Returns a list of attributes from the documents elements.",
                "arguments": [
                    {
                        "name": "attributes",
                        "type": "c"
                    }
                ]
            },
            "markelements": {
                "name": "MarkElements",
                "description": "Mark elements that match criteria, returns true if any elements were 'marked'. optionally mark children as well.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "markchildren",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "unmarkelements": {
                "name": "UnmarkElements",
                "description": "Unmark elements that match criteria, returns true if any elements were 'unmarked'. optionally mark children as well.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    },
                    {
                        "name": "unmarkchildren",
                        "type": "l",
                        "optional": true
                    }
                ]
            },
            "unmarkallelements": {
                "name": "UnmarkAllElements",
                "description": "Umark any marked elements in document."
            },
            "deletemarked": {
                "name": "DeleteMarked",
                "description": "Delete marked elements."
            },
            "output": {
                "name": "Output",
                "description": "Returns formatted results from all the tags.",
                "arguments": [
                    {
                        "name": "formatexpr",
                        "type": "c"
                    },
                    {
                        "name": "fullnameexpr",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "resolve": {
                "name": "Resolve",
                "description": "Returns a resolved tag or attribute given a name.",
                "arguments": [
                    {
                        "name": "objectspec",
                        "type": "c"
                    }
                ]
            },
            "reformat": {
                "name": "Reformat",
                "description": "Reformats the XML so that OuterXML will be indented.",
                "arguments": [
                    {
                        "name": "spacing",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "prefix",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "setattributes": {
                "name": "SetAttributes",
                "description": "set multi attributes.",
                "arguments": [
                    {
                        "name": "attribute",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            },
            "dropattributes": {
                "name": "DropAttributes",
                "description": "drop multi attributes.",
                "arguments": [
                    {
                        "name": "attribute",
                        "type": "c"
                    }
                ]
            },
            "todom": {
                "name": "ToDOM",
                "description": "Create a dom for the document using a dom mapper.",
                "arguments": [
                    {
                        "name": "mapper",
                        "type": "XMLDomMapper"
                    }
                ]
            }
        },
        "__name__": "XMLDocument"
    },
    "xmldommapper": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Given a definition, create a DOM mapper.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLDomMapper"
    },
    "xmlelementeventhandler": {
        "__methods__": {
            "onchildchange": {
                "name": "OnChildChange",
                "description": "Handle changes to XML element children.",
                "arguments": [
                    {
                        "name": "args",
                        "type": "XMLChangeHandlerArgs"
                    }
                ]
            },
            "onautomation": {
                "name": "OnAutomation",
                "description": "Automation event, gets called whenever there a automation node becomes populated.",
                "arguments": [
                    {
                        "name": "node",
                        "type": "XMLInstance"
                    }
                ]
            }
        },
        "__name__": "XMLElementEventHandler"
    },
    "xmlelementquery": {
        "__methods__": {
            "output": {
                "name": "Output",
                "description": "Returns formatted results from all the tags.",
                "arguments": [
                    {
                        "name": "formatexpr",
                        "type": "c"
                    },
                    {
                        "name": "fullnameexpr",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "queryattributes": {
                "name": "QueryAttributes",
                "description": "Returns a list of attributes from the queries elements.",
                "arguments": [
                    {
                        "name": "attributes",
                        "type": "c"
                    }
                ]
            },
            "setattributes": {
                "name": "SetAttributes",
                "description": "set multi attributes.",
                "arguments": [
                    {
                        "name": "attribute",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "a"
                    }
                ]
            },
            "dropattributes": {
                "name": "DropAttributes",
                "description": "drop multi attributes.",
                "arguments": [
                    {
                        "name": "attribute",
                        "type": "c"
                    }
                ]
            }
        },
        "__name__": "XMLElementQuery"
    },
    "xmlexpression": {
        "__functions__": {
            "create": {
                "name": "Create",
                "description": "Create an XMLExpression object.",
                "arguments": [
                    {
                        "name": "expression",
                        "type": "c"
                    }
                ]
            }
        },
        "__methods__": {
            "eval": {
                "name": "Eval",
                "description": "Evaluate XML Expression in the context of an XML Node.",
                "arguments": [
                    {
                        "name": "instance",
                        "type": "XMLInstance"
                    }
                ]
            }
        },
        "__name__": "XMLExpression"
    },
    "xmlformatter": {
        "__methods__": {
            "importdocument": {
                "name": "ImportDocument",
                "description": "Returns formatted results from all the tags.",
                "arguments": [
                    {
                        "name": "formatexpr",
                        "type": "c"
                    },
                    {
                        "name": "fullnameexpr",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "importdocumentsafe": {
                "name": "ImportDocumentSafe",
                "description": "Returns formatted results from all the tags / checks for <> in content and wraps them.",
                "arguments": [
                    {
                        "name": "formatexpr",
                        "type": "c"
                    },
                    {
                        "name": "fullnameexpr",
                        "type": "c",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "XMLFormatter"
    },
    "xmlinstance": {
        "__methods__": {
            "_internalmethod1": {
                "name": "_internalMethod1",
                "description": "Added to fix MARKED properties eating the next definition."
            },
            "parent": {
                "name": "Parent",
                "description": "Get the parent tag."
            },
            "document": {
                "name": "Document",
                "description": "Get the containing document."
            },
            "attributeexists": {
                "name": "AttributeExists",
                "description": "Return true if attribute exists.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "attributeget": {
                "name": "AttributeGet",
                "description": "Get the value of an attribute (blank string if it doesn't exist).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "attributeset": {
                "name": "AttributeSet",
                "description": "Sets an attributes value (creates attribute if it doesn't already exist).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "value",
                        "type": "c"
                    }
                ]
            },
            "attributegetlogical": {
                "name": "AttributeGetLogical",
                "description": "Get the value of an attribute (.F. if it doesn't exists).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "attributegetnumber": {
                "name": "AttributeGetNumber",
                "description": "Get the value of an attribute (.F. if it doesn't exists).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "childexists": {
                "name": "ChildExists",
                "description": "Returns true if child tag is defined.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "c"
                    }
                ]
            },
            "childget": {
                "name": "ChildGet",
                "description": "Gets a child element by tagname.",
                "arguments": [
                    {
                        "name": "tagname",
                        "type": "c"
                    }
                ]
            },
            "appendchildren": {
                "name": "AppendChildren",
                "description": "Add xml node after current children.",
                "arguments": [
                    {
                        "name": "xml",
                        "type": "c"
                    }
                ]
            },
            "attributedrop": {
                "name": "AttributeDrop",
                "description": "Remove an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getviewcontrol": {
                "name": "GetViewControl",
                "description": "Gets associated container control name (NULL if none)."
            },
            "hasbounddocument": {
                "name": "HasBoundDocument",
                "description": "Has a bound document."
            },
            "getbounddocument": {
                "name": "GetBoundDocument",
                "description": "Get bound document."
            },
            "binddocument": {
                "name": "BindDocument",
                "description": "Associate a document with the given tag.",
                "arguments": [
                    {
                        "name": "document",
                        "type": "Alpha5::XMLDocument"
                    }
                ]
            },
            "isnull": {
                "name": "IsNull",
                "description": "Returns true if element is NULL."
            },
            "isanonymous": {
                "name": "IsAnonymous",
                "description": "Returns true if element is anonymous."
            },
            "querystyle": {
                "name": "QueryStyle",
                "description": "Query styles for an element.",
                "arguments": [
                    {
                        "name": "def",
                        "type": "c"
                    }
                ]
            },
            "batchbegin": {
                "name": "BatchBegin",
                "description": "Begin changes to node (or children of node)."
            },
            "batchend": {
                "name": "BatchEnd",
                "description": "End changes to node (or children of node)."
            },
            "addeventhandler": {
                "name": "AddEventHandler",
                "description": "Add an event handler watch flags 'A'=attributes, 'E'=any descendent element contents, 'C' means child elements and attributes of children, '*' means attributes, child tags, and there attributes (default).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "eventhandler",
                        "type": "XMLElementEventHandler"
                    },
                    {
                        "name": "watchflags",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "dropeventhandler": {
                "name": "DropEventHandler",
                "description": "Delete an event handler.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "setcomplexdata": {
                "name": "SetComplexData",
                "description": "Set a complex data type.",
                "arguments": [
                    {
                        "name": "complexdata",
                        "type": "XMLCompleData"
                    }
                ]
            },
            "hascomplexdata": {
                "name": "HasComplexData",
                "description": "Return true if data is complex."
            },
            "getcomplexdata": {
                "name": "GetComplexData",
                "description": "Get a complex data type (if exists)."
            },
            "queryelement": {
                "name": "QueryElement",
                "description": "Return a list of child elements that match criteria.",
                "arguments": [
                    {
                        "name": "expr",
                        "type": "c"
                    }
                ]
            },
            "output": {
                "name": "Output",
                "description": "Returns formatted results from all the tags under this tag.",
                "arguments": [
                    {
                        "name": "formatexpr",
                        "type": "c"
                    },
                    {
                        "name": "fullnameexpr",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "collectiontoelements": {
                "name": "CollectionToElements",
                "description": "Copies collection of complex data into name/value pair tags."
            },
            "movemarkedbefore": {
                "name": "MoveMarkedBefore",
                "description": "Move all marked elements to be prior siblings to node."
            },
            "movemarkedafter": {
                "name": "MoveMarkedAfter",
                "description": "Move all marked elements to be subsequent siblings to node."
            },
            "movemarkedinside": {
                "name": "MoveMarkedInside",
                "description": "Move all marked elements to be appended to the children of the node."
            },
            "todom": {
                "name": "ToDOM",
                "description": "Create a dom for the element using a dom mapper.",
                "arguments": [
                    {
                        "name": "mapper",
                        "type": "XMLDomMapper"
                    }
                ]
            },
            "mergeinnerxml": {
                "name": "MergeInnerXML",
                "description": "Combines nodes innerXML with defaultXML.",
                "arguments": [
                    {
                        "name": "defaultxml",
                        "type": "C"
                    }
                ]
            },
            "tojson": {
                "name": "ToJSON",
                "description": "Gets JSON that represents the XML content - tagMappings comma separated list of 'a/<array>', 'c/<charater>' , 'm/<parent>/<child>[/<replacename>], 'v/<content value tagname>, 'x/expression/name' .",
                "arguments": [
                    {
                        "name": "tagmappings",
                        "type": "C",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "XMLInstance"
    },
    "xmlschema": {
        "__methods__": {
            "loadxml": {
                "name": "LoadXML",
                "description": "Load XML string into an XML document.",
                "arguments": [
                    {
                        "name": "xmldef",
                        "type": "c"
                    }
                ]
            },
            "createformatter": {
                "name": "CreateFormatter",
                "description": "Create a formatter from an XML formatter definition.",
                "arguments": [
                    {
                        "name": "def",
                        "type": "XMLDocument"
                    }
                ]
            },
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchema"
    },
    "xmlschemaall": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAll"
    },
    "xmlschemaannotation": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAnnotation"
    },
    "xmlschemaany": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAny"
    },
    "xmlschemaanyattribute": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAnyAttribute"
    },
    "xmlschemaappinfo": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAppinfo"
    },
    "xmlschemaattribute": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAttribute"
    },
    "xmlschemaattributegroup": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaAttributeGroup"
    },
    "xmlschemachoice": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaChoice"
    },
    "xmlschemacomplexcontent": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaComplexContent"
    },
    "xmlschemacomplextype": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaComplexType"
    },
    "xmlschemadocumentation": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaDocumentation"
    },
    "xmlschemaelement": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaElement"
    },
    "xmlschemaenumeration": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaEnumeration"
    },
    "xmlschemaextension": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaExtension"
    },
    "xmlschemafield": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaField"
    },
    "xmlschemafractiondigits": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaFractionDigits"
    },
    "xmlschemagroup": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaGroup"
    },
    "xmlschemaimport": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaImport"
    },
    "xmlschemainclude": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaInclude"
    },
    "xmlschemakey": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaKey"
    },
    "xmlschemakeyref": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaKeyref"
    },
    "xmlschemalength": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaLength"
    },
    "xmlschemalist": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaList"
    },
    "xmlschemamanager": {
        "__functions__": {
            "get": {
                "name": "Get",
                "description": "Get the default xml schema manager."
            }
        },
        "__methods__": {
            "load": {
                "name": "Load",
                "description": "Load schemas from passed in XML.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    },
                    {
                        "name": "xml",
                        "type": "c"
                    }
                ]
            },
            "schemaexists": {
                "name": "SchemaExists",
                "description": "Return true if schema exists.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getschema": {
                "name": "GetSchema",
                "description": "Get a named XML schema.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "loadxml": {
                "name": "LoadXML",
                "description": "Load XML string into an XML  document.",
                "arguments": [
                    {
                        "name": "xmldef",
                        "type": "c"
                    }
                ]
            },
            "loadunbalancedxml": {
                "name": "LoadUnbalancedXML",
                "description": "Load unbalanced XML (i.e. HTML) string into an XML document.",
                "arguments": [
                    {
                        "name": "xmldef",
                        "type": "c"
                    }
                ]
            },
            "createformatter": {
                "name": "CreateFormatter",
                "description": "Create a formatter from an XML formatter definition.",
                "arguments": [
                    {
                        "name": "def",
                        "type": "XMLDocument"
                    }
                ]
            }
        },
        "__name__": "XMLSchemaManager"
    },
    "xmlschemamaxexclusive": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMaxExclusive"
    },
    "xmlschemamaxinclusive": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMaxInclusive"
    },
    "xmlschemamaxlength": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMaxLength"
    },
    "xmlschemaminexclusive": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMinExclusive"
    },
    "xmlschemamininclusive": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMinInclusive"
    },
    "xmlschemaminlength": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaMinLength"
    },
    "xmlschemanotation": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaNotation"
    },
    "xmlschemapattern": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaPattern"
    },
    "xmlschemaredefine": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaRedefine"
    },
    "xmlschemarestriction": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaRestriction"
    },
    "xmlschemaselector": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaSelector"
    },
    "xmlschemasequence": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaSequence"
    },
    "xmlschemasimplecontent": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaSimpleContent"
    },
    "xmlschemasimpletype": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaSimpleType"
    },
    "xmlschematag": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaTag"
    },
    "xmlschematotaldigits": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaTotalDigits"
    },
    "xmlschemaunion": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaUnion"
    },
    "xmlschemaunique": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaUnique"
    },
    "xmlschemawhitespace": {
        "__methods__": {
            "hasattribute": {
                "name": "HasAttribute",
                "description": "Returns if an attribute is defined for the tag.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "getattribute": {
                "name": "GetAttribute",
                "description": "Returns an attribute.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "c"
                    }
                ]
            },
            "format": {
                "name": "Format",
                "description": "Generate a string from tag.",
                "arguments": [
                    {
                        "name": "elementformat",
                        "type": "c"
                    },
                    {
                        "name": "elementformat",
                        "type": "c",
                        "optional": true
                    },
                    {
                        "name": "separator",
                        "type": "c",
                        "optional": true
                    }
                ]
            },
            "getrawcontent": {
                "name": "GetRawContent",
                "description": "Get raw content (keep spaces)."
            },
            "getnormalizedcontent": {
                "name": "GetNormalizedContent",
                "description": "Get raw content (keep spaces)."
            },
            "getcollapsedcontent": {
                "name": "GetCollapsedContent",
                "description": "Get raw content (keep spaces)."
            }
        },
        "__name__": "XMLSchemaWhiteSpace"
    },
    "xmlstylequery": {
        "__enumeration__": [
            "results"
        ],
        "__name__": "XMLStyleQuery"
    },
    "xmlstylequerycache": {},
    "xmlstyleresult": {
        "__enumeration__": [
            "Path",
            "Attrib"
        ],
        "__name__": "XMLStyleResult"
    },
    "__name__": "Alpha5"
}