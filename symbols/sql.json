{
    "argument": {
        "__properties__": {
            "name": {
                "name": "Name"
            },
            "data": {
                "name": "Data"
            },
            "usage": {
                "name": "Usage"
            },
            "xml": {
                "name": "XML"
            },
            "isnull": {
                "name": "IsNull"
            },
            "json": {
                "name": "JSON"
            }
        },
        "__name__": "Argument"
    },
    "arguments": {
        "__properties__": {
            "count": {
                "name": "Count"
            },
            "xml": {
                "name": "XML"
            },
            "json": {
                "name": "JSON"
            }
        },
        "__methods__": {
            "add": {
                "name": "Add",
                "description": "Add an argument to the collection.\nor\nL Add(SQL::Argument Argument)",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "value",
                        "type": "A",
                        "optional": true
                    },
                    {
                        "name": "usage",
                        "type": "SQL::ArgumentUsage",
                        "optional": true
                    },
                    {
                        "name": "isnull",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear out the collection."
            },
            "find": {
                "name": "Find",
                "description": "Find an argument in the collection.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "remove": {
                "name": "Remove",
                "description": "Remove an argument from the collection.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "set": {
                "name": "Set",
                "description": "Set the value and (optionally) the usage of an argument.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "value",
                        "type": "A"
                    },
                    {
                        "name": "usage",
                        "type": "SQL::ArgumentUsage",
                        "optional": true
                    },
                    {
                        "name": "isnull",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "argumentnumber": {
                "name": "ArgumentNumber",
                "description": "Get the sequence number of the named argument.  \nReturns -1 if not found.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "setnull": {
                "name": "SetNull",
                "description": "Set a value to NULL and (optionally) the usage of an argument.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "type",
                        "type": "C"
                    },
                    {
                        "name": "usage",
                        "type": "SQL::ArgumentUsage",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "Arguments"
    },
    "argumentusage": {
        "__enumeration__": [
            "InputArgument",
            "OutputArgument",
            "InputOutputArgument"
        ],
        "__name__": "ArgumentUsage"
    },
    "callresult": {
        "__properties__": {
            "code": {
                "name": "Code"
            },
            "text": {
                "name": "Text"
            },
            "nativecode": {
                "name": "NativeCode"
            },
            "nativetext": {
                "name": "NativeText"
            },
            "syntax": {
                "name": "Syntax"
            },
            "api": {
                "name": "API"
            },
            "rowsaffected": {
                "name": "RowsAffected"
            },
            "success": {
                "name": "Success"
            },
            "error": {
                "name": "Error"
            },
            "canceled": {
                "name": "Canceled"
            },
            "warnings": {
                "name": "Warnings"
            },
            "lastinsertedidentity": {
                "name": "LastInsertedIdentity"
            },
            "rowsreturned": {
                "name": "RowsReturned"
            },
            "messagetodisplay": {
                "name": "MessageToDisplay"
            }
        },
        "__methods__": {
            "fromtext": {
                "name": "FromText",
                "description": "Set the error value from the supplied text.",
                "arguments": [
                    {
                        "name": "text",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "CallResult"
    },
    "columnvalue": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "ColumnValue"
    },
    "columnvaluesource": {
        "__enumeration__": [
            "Column",
            "Expression"
        ],
        "__name__": "ColumnValueSource"
    },
    "connection": {
        "__properties__": {
            "currentapi": {
                "name": "CurrentAPI"
            },
            "currentsyntax": {
                "name": "CurrentSyntax"
            },
            "isopen": {
                "name": "IsOpen"
            },
            "callresult": {
                "name": "CallResult"
            },
            "resultset": {
                "name": "ResultSet"
            },
            "connectionstring": {
                "name": "ConnectionString"
            },
            "schemacacheenabled": {
                "name": "SchemaCacheEnabled"
            },
            "bulkreadenabled": {
                "name": "BulkReadEnabled"
            },
            "bulkwriteenabled": {
                "name": "BulkWriteEnabled"
            },
            "portablesqlenabled": {
                "name": "PortableSQLEnabled"
            },
            "logintimeout": {
                "name": "LoginTimeout"
            },
            "connectiontimeout": {
                "name": "ConnectionTimeout"
            },
            "querytimeout": {
                "name": "QueryTimeout"
            },
            "tracesql": {
                "name": "TraceSQL"
            },
            "tracecontext": {
                "name": "TraceContext"
            },
            "initialcommand": {
                "name": "InitialCommand"
            },
            "currentprovider": {
                "name": "CurrentProvider"
            },
            "currentproviderdatasource": {
                "name": "CurrentProviderDatasource"
            },
            "ssl": {
                "name": "SSL"
            },
            "useserversideprepare": {
                "name": "UseServerSidePrepare"
            },
            "tlsclientkeyfile": {
                "name": "TLSClientKeyFile"
            },
            "tlsclientcertificatefile": {
                "name": "TLSClientCertificateFile"
            },
            "tlscertificateauthorityfile": {
                "name": "TLSCertificateAuthorityFile"
            },
            "tlstrustedcertificatepath": {
                "name": "TLSTrustedCertificatePath"
            },
            "tlsservercertificatedistinguishedname": {
                "name": "TLSServerCertificateDistinguishedName"
            },
            "tlscipherlist": {
                "name": "TLSCipherList"
            },
            "issecurelyconnected": {
                "name": "IsSecurelyConnected"
            },
            "tlscertificaterevocationfile": {
                "name": "TLSCertificateRevocationFile"
            },
            "tlsmode": {
                "name": "TLSMode"
            },
            "jsondateformat": {
                "name": "JSONDateFormat"
            },
            "jsondatetimeformat": {
                "name": "JSONDateTimeFormat"
            },
            "jsondecimalseparator": {
                "name": "JSONDecimalSeparator"
            },
            "readonly": {
                "name": "ReadOnly"
            },
            "allowipv6": {
                "name": "AllowIPV6"
            },
            "createonopen": {
                "name": "CreateOnOpen"
            },
            "busytimeout": {
                "name": "BusyTimeout"
            },
            "tlstrustedcertificatefile": {
                "name": "TLSTrustedCertificateFile"
            },
            "tlscertificatename": {
                "name": "TLSCertificateName"
            },
            "tlscertificatecompany": {
                "name": "TLSCertificateCompany"
            },
            "tlscertificateunit": {
                "name": "TLSCertificateUnit"
            },
            "tlsfipscertifiedrsa": {
                "name": "TLSFIPSCertifiedRSA"
            },
            "reportnotfoundaswarning": {
                "name": "ReportNotFoundAsWarning"
            },
            "sshtunnel": {
                "name": "SSHTunnel"
            },
            "sshhost": {
                "name": "SSHHost"
            },
            "sshport": {
                "name": "SSHPort"
            },
            "sshpreferredlocalport": {
                "name": "SSHPreferredLocalPort"
            },
            "sshuser": {
                "name": "SSHUser"
            },
            "sshauthenticationmethod": {
                "name": "SSHAuthenticationMethod"
            },
            "sshpassword": {
                "name": "SSHPassword"
            },
            "sshpublickey": {
                "name": "SSHPublicKey"
            },
            "sshprivatekey": {
                "name": "SSHPrivateKey"
            },
            "sshtrace": {
                "name": "SSHTrace"
            },
            "sshtracename": {
                "name": "SSHTraceName"
            },
            "pool": {
                "name": "Pool"
            },
            "pooltimeoutinseconds": {
                "name": "PoolTimeoutInSeconds"
            },
            "poolsize": {
                "name": "PoolSize"
            },
            "tracesqlfile": {
                "name": "TraceSQLFile"
            },
            "dbtimezoneisutc": {
                "name": "DBTimeZoneisUTC"
            },
            "tracesqlformat": {
                "name": "TraceSQLFormat"
            },
            "tracesqllevel": {
                "name": "TraceSQLLevel"
            }
        },
        "__methods__": {
            "open": {
                "name": "Open",
                "description": "Connect to a database. (See help for SetConnectionString for details on constructing a connect string.)",
                "arguments": [
                    {
                        "name": "sqlconnectionstring",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "username",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "password",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "close": {
                "name": "Close",
                "description": "Close a SQL connection.\nNote:  Set CloseSSHTunnel to .t. if you are connected through a tunnel and you want to close it.\nNormally, you want to leave the tunnel open for performance purposes.",
                "arguments": [
                    {
                        "name": "closesshtunnel",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "clearschemacache": {
                "name": "ClearSchemaCache",
                "description": "Clear any schema data cached by the connection."
            },
            "clearportablesqlcache": {
                "name": "ClearPortableSQLCache",
                "description": "Clear any parsed and translated portable SQL statements cached by the connection."
            },
            "maskpassword": {
                "name": "MaskPassword",
                "description": "Changes the characters in a password string so they will not display well.\nPlease Note! \nThis is not a form of encryption!!!\nThe purpose of masking a password is to prevent it from displaying in a readable form.\nIf you choose to embed a password in a script, it is only as secure as your script.",
                "arguments": [
                    {
                        "name": "password",
                        "type": "C"
                    }
                ]
            },
            "unmaskpassword": {
                "name": "UnmaskPassword",
                "description": "Changes the characters in a password string so they will display clearly after MaskPassword() has been calleed.\nPlease Note! \nThis is not a form of encryption!!!\nThe purpose of masking a password is to prevent it from displaying in a readable form.\nIf you choose to embed a password in a script, it is only as secure as your script.",
                "arguments": [
                    {
                        "name": "password",
                        "type": "C"
                    }
                ]
            },
            "geographysupported": {
                "name": "GeographySupported",
                "description": "Returns true if the syntax passed supports geography features.\nIf you do not provide a syntax name, the current syntax is used.\nIf no syntax is assigned yet, the function will return false.",
                "arguments": [
                    {
                        "name": "syntax",
                        "type": "C"
                    }
                ]
            },
            "listapis": {
                "name": "ListAPIs",
                "description": "Create a crlf() delimited list of installed SQL Application Programming Interfaces."
            },
            "listsupportedapis": {
                "name": "ListSupportedAPIs",
                "description": "Create a crlf() delimited list of SQL Application Programming Interfaces supported."
            },
            "listapiswithcatagories": {
                "name": "ListAPIsWithCatagories",
                "description": "Create a crlf() delimited list of installed SQL Application Programming Interfaces with categories."
            },
            "listsyntaxes": {
                "name": "ListSyntaxes",
                "description": "Create a crlf() delimited list of installed SQL Syntaxes."
            },
            "listautoincrementimplementations": {
                "name": "ListAutoIncrementImplementations",
                "description": "Create a crlf() delimited list of auto-increment implementations for the current SQL syntax."
            },
            "listprocedurelanguages": {
                "name": "ListProcedureLanguages",
                "description": "Create a crlf() delimited list of procedure languages for the current SQL syntax."
            },
            "listportablesqlfunctions": {
                "name": "ListPortableSQLFunctions",
                "description": "Create a crlf() delimited list of portable SQL functions.\n\nWithin each row, the tab delimited columns are: Name, Prototype, Description, Aggregate=Y/N, Summary=Y/N, Category\n\nIf you provide a syntax name, only functions supported by that syntax will be included.\nIf you do not provide a syntax name, all functions will be included.\n\nNote: Geography functions are only supported for some databases.",
                "arguments": [
                    {
                        "name": "syntax",
                        "type": "C"
                    }
                ]
            },
            "listproperties": {
                "name": "ListProperties",
                "description": "Create a list of all connection property names and values in the format <name>tab<value>crlf."
            },
            "getadditionalproperties": {
                "name": "GetAdditionalProperties",
                "description": "Create a list of additional (database specific) connection properties as they were entered in the connection string dialog.",
                "arguments": [
                    {
                        "name": "exceptionlist",
                        "type": "C"
                    },
                    {
                        "name": "syntaxformat",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "syntaxdelimiter",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "includesyntaxquotes",
                        "optional": true
                    }
                ]
            },
            "setconnectionstring": {
                "name": "SetConnectionString",
                "description": "Set the connection string with required parameters:\nThe actual values will depend on how you are connecting to your database.\nThe connect string can be in one of two formats:\n\n  Format 1 - {name1='value1',name2='value2'...nameN='valueN'}\n     Example:\n     connectstring = \"{UserName='Fred',Password='secret'}\"\n     myconn.SetConnectionString(connectstring)\n\n  Format 2 - name1<tab>value1<crlf> for each entry:\n     Example:\n     connectstring = \"UserName\" + chr(9) + \"Fred\" + crlf()\n     connectstring = connectstring + \"Password\" + chr(9) + \"secret\" + crlf()\n     myconn.SetConnectionString(connectstring)",
                "arguments": [
                    {
                        "name": "sqlconnectionstring",
                        "type": "C"
                    }
                ]
            },
            "setsyntaxhandlerscript": {
                "name": "SetSyntaxHandlerScript",
                "description": "Assign a handler script for the connection to override the default behavior of some or all of the event functions below:\n    Note: Syntax generation functions return true if a statement has been created and false if it has not.\nExamples:\n\n  GenerateAddUserStatement as L (UserName as C, Statement BYREF AS C)\n\n  GenerateSelectStatement as L (TableInfo as SQL::TableInfo, Statement BYREF AS C)",
                "arguments": [
                    {
                        "name": "scriptsource",
                        "type": "C"
                    }
                ]
            },
            "selectaftersupported": {
                "name": "SelectAfterSupported",
                "description": "Returns true if the syntax and database version passed supports the portable SQL syntax 'SELECT FIRST n AFTER m'.\nIf you do not provide a syntax name, the current syntax is used.\nIf you do not provide a database version, the current version (if specified) is used.\nIf no syntax is assigned yet, the function will return false.",
                "arguments": [
                    {
                        "name": "syntax",
                        "type": "C"
                    },
                    {
                        "name": "dbversion",
                        "type": "C"
                    }
                ]
            },
            "addeventscript": {
                "name": "AddEventScript",
                "description": "Add a connection event script with functions to handle one or more of the following events: \n\n    UpdateBegin(Connection as SQL::Connection, RowsExpected as N, BYREF ProgressInterval as N, Cancel BYREF as L)\n    UpdateProgress(Connection as SQL::Connection, RowsUpdated as N, RowsExpected as N, Cancel BYREF as L)\n    UpdateEnd(Connection as SQL::Connection, RowsUpdated as N)",
                "arguments": [
                    {
                        "name": "scriptsource",
                        "type": "C"
                    },
                    {
                        "name": "name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "removeeventscript": {
                "name": "RemoveEventScript",
                "description": "Remove an event script previously added with AddEventScript.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "generatealtertableaddcolumnstatement": {
                "name": "GenerateAlterTableAddColumnStatement",
                "description": "Generate a SQL ALTER TABLE statement to add a column to a table.\n\nNOTE: Not all databases support this operation.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "generatealtertabledropcolumnstatement": {
                "name": "GenerateAlterTableDropColumnStatement",
                "description": "Generate a SQL ALTER TABLE statement to drop a column from a table.\n\nNOTE: Not all databases support this operation.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "generateselectstatement": {
                "name": "GenerateSelectStatement",
                "description": "Generate a SQL Select statement for the table passed in.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "generateinsertstatement": {
                "name": "GenerateInsertStatement",
                "description": "Generate a SQL Insert statement for the table passed in.\nNote: If UseBatchQualifiers is true then field values will be generated as arguments prefaced with 'new.' \nso a result set can be the source of the data.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "replicateidentity",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "usebatchqualifiers",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "sourcetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generateupdatestatement": {
                "name": "GenerateUpdateStatement",
                "description": "Generate a SQL Update statement for the table passed in.\nNote: If UseBatchQualifiers is true then field values will be generated as arguments \nprefaced with 'new.'  and 'old.' so a result set can be the source of the data.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "usebatchqualifiers",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "sourcetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generatedeletestatement": {
                "name": "GenerateDeleteStatement",
                "description": "Generate a SQL Delete statement for the table passed in.\nNote: If UseBatchQualifiers is true then field values will be generated as arguments \nprefaced with and 'old.' so a result set can be the source of the data.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "usebatchqualifiers",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "criteria",
                        "type": "SQL::UpdateWhereCriteria",
                        "optional": true
                    },
                    {
                        "name": "sourcetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generateretrieverowquery": {
                "name": "GenerateRetrieveRowQuery",
                "description": "Generate a SQL statement to retrieve a specific row for the table passed in.\nKey columns are generated as arguments.\nIf Rows is greater than 1 then a set of of arguments will be generated for each row in \nthe following format:\n    <first 20 characters of the key column name> + \"_\" + the row number.\n\t\tFor example:\t\tCustomerID becomes CustomerID_1, CustomerID_2 and so on.\nNote:  If the table has no primary key, retrieve is meaningless and no string is returned.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "rows",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "localtableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generaterowqualifiers": {
                "name": "GenerateRowQualifiers",
                "description": "Generate a crlf delimited list of row qualifiers in the format: \n\n  <field_name><tab>argument_name<crlf>\nNote:  If the table has no primary key, row qualifiers are meaningless and no qualifiers are returned.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "localtableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generatewhereclause": {
                "name": "GenerateWhereClause",
                "description": "Generate a SQL WHERE clause for a table, based on the update criteria specified.\nNote: If UseBatchQualifiers is true then fields will be prefaced with ':old.' \nso a result set can be the source of the data.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "criteria",
                        "type": "SQL::UpdateWhereCriteria"
                    },
                    {
                        "name": "usebatchqualifiers",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "useoldnewprefix",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "sourcetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generatecolumnwhereclause": {
                "name": "GenerateColumnWhereClause",
                "description": "Generate a SQL WHERE clause for a table column.\nNote: If UseBatchQualifiers is true then fields will be prefaced with ':old.' so a result set can be the source of the data.",
                "arguments": [
                    {
                        "name": "datatypeinfo",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "usebatchqualifiers",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "useoldnewprefix",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "generatenativetypestring": {
                "name": "GenerateNativeTypeString",
                "description": "Generate a SQL type string for type passed in using the current syntax.\nTableInfo is optional, but provides additional information that is useful.",
                "arguments": [
                    {
                        "name": "typeinfo",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generatenativetablename": {
                "name": "GenerateNativeTableName",
                "description": "Generate a formatted table name suitable for a SQL query in using the current syntax.",
                "arguments": [
                    {
                        "name": "typeinfo",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "generatenativecolumnname": {
                "name": "GenerateNativeColumnName",
                "description": "Generate a formatted column name suitable for a SQL query in using the current syntax.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "generatecreateschemascript": {
                "name": "GenerateCreateSchemaScript",
                "description": "Generate a SQL script containing CREATE TABLE statements for each of the tables in the schema definition passed in.",
                "arguments": [
                    {
                        "name": "schema",
                        "type": "SQL::Schema"
                    }
                ]
            },
            "generatedropschemascript": {
                "name": "GenerateDropSchemaScript",
                "description": "Generate a SQL script containing DROP TABLE statements for each of the tables in the schema definition passed in.",
                "arguments": [
                    {
                        "name": "schema",
                        "type": "SQL::Schema"
                    }
                ]
            },
            "generatecreatetablestatement": {
                "name": "GenerateCreateTableStatement",
                "description": "Generate a SQL CREATE TABLE statement for the table passed in.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "generatedroptablestatement": {
                "name": "GenerateDropTableStatement",
                "description": "Generate a SQL DROP TABLE statement for the table passed in.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "generatecreatedatabasestatement": {
                "name": "GenerateCreateDatabaseStatement",
                "description": "Generate a SQL Create Database statement for the table passed in.\n Note: Not all databases vendors support creating a database through SQL.",
                "arguments": [
                    {
                        "name": "database",
                        "type": "C"
                    }
                ]
            },
            "generatedropdatabasestatement": {
                "name": "GenerateDropDatabaseStatement",
                "description": "Generate a SQL Drop Database statement for the table passed in.\n Note: Not all database vendors support dropping a database through SQL.",
                "arguments": [
                    {
                        "name": "database",
                        "type": "C"
                    }
                ]
            },
            "generatecreateindexstatement": {
                "name": "GenerateCreateIndexStatement",
                "description": "Generate a SQL Create Index statement for the table and index passed in.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "indexinfo",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "generatedropindexstatement": {
                "name": "GenerateDropIndexStatement",
                "description": "Generate a SQL Drop Index statement for the table passed in.\n\nNote: GenerateDropIndexStatement as C (Owner as C, Table as C, Index as C) is deprecated but should still work.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "indexinfo",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "generateadduserstatement": {
                "name": "GenerateAddUserStatement",
                "description": "Generate a SQL Add User statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    },
                    {
                        "name": "password",
                        "type": "C"
                    }
                ]
            },
            "generatedropuserstatement": {
                "name": "GenerateDropUserStatement",
                "description": "Generate a SQL Drop User statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    }
                ]
            },
            "generateaddusergroupstatement": {
                "name": "GenerateAddUserGroupStatement",
                "description": "Generate a SQL Add User Group statement.",
                "arguments": [
                    {
                        "name": "group",
                        "type": "C"
                    }
                ]
            },
            "generatedropusergroupstatement": {
                "name": "GenerateDropUserGroupStatement",
                "description": "Generate a SQL Drop User Group statement.",
                "arguments": [
                    {
                        "name": "group",
                        "type": "C"
                    }
                ]
            },
            "generateaddusertogroupstatement": {
                "name": "GenerateAddUserToGroupStatement",
                "description": "Generate a SQL Add User To Group statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    },
                    {
                        "name": "group",
                        "type": "C"
                    }
                ]
            },
            "generatedropuserfromgroupstatement": {
                "name": "GenerateDropUserFromGroupStatement",
                "description": "Generate a SQL Drop User From Group statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    },
                    {
                        "name": "group",
                        "type": "C"
                    }
                ]
            },
            "generategrantaccessstatement": {
                "name": "GenerateGrantAccessStatement",
                "description": "Generate a SQL Grant Access statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    },
                    {
                        "name": "resource",
                        "type": "C"
                    },
                    {
                        "name": "accesstype",
                        "type": "C"
                    }
                ]
            },
            "generaterevokeaccessstatement": {
                "name": "GenerateRevokeAccessStatement",
                "description": "Generate a SQL Revoke Access statement.",
                "arguments": [
                    {
                        "name": "user",
                        "type": "C"
                    },
                    {
                        "name": "resource",
                        "type": "C"
                    },
                    {
                        "name": "accesstype",
                        "type": "C"
                    }
                ]
            },
            "isreservedword": {
                "name": "IsReservedWord",
                "description": "Returns true if Word is a reserved word in the context of the current connection syntax.",
                "arguments": [
                    {
                        "name": "word",
                        "type": "C"
                    }
                ]
            },
            "generatelastinsertedidentitystatement": {
                "name": "GenerateLastInsertedIdentityStatement",
                "description": "Generate a SQL statement to retrieve the identity from the last insert statement (may be specific to the table passed in).",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "generateinsertreturnidentitysuffix": {
                "name": "GenerateInsertReturnIdentitySuffix",
                "description": "Generate a suffix for a SQL INSERT statement to return the identity column after the insert (only supported in limited contexts).",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "getexamplesyntaxscript": {
                "name": "GetExampleSyntaxScript",
                "description": "Retrieve the syntax handler source for an example syntax handler."
            },
            "gettemplatesyntaxscript": {
                "name": "GetTemplateSyntaxScript",
                "description": "Retrieve the template syntax handler source for creating your own syntax handler."
            },
            "getconnectdialogscript": {
                "name": "GetConnectDialogScript",
                "description": "Retrieve the API specific XDialog syntax for the dialog to prompt for a connection string",
                "arguments": [
                    {
                        "name": "apiname",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "getconnectionproperty": {
                "name": "GetConnectionProperty",
                "description": "Retrieve a connection property by name.",
                "arguments": [
                    {
                        "name": "propertyname",
                        "type": "C"
                    }
                ]
            },
            "getconnectionstring": {
                "name": "GetConnectionString",
                "description": "Retrieve the current connection string."
            },
            "showadonetconnectionstringdialog": {
                "name": "ShowADONETConnectionStringDialog",
                "description": "Display a dialog to select an ADO.NET provider and format a connection string.",
                "arguments": [
                    {
                        "name": "providername",
                        "type": "C",
                        "byref": true
                    },
                    {
                        "name": "datasource",
                        "type": "C",
                        "byref": true
                    },
                    {
                        "name": "connectionstring",
                        "type": "C",
                        "byref": true
                    }
                ]
            },
            "listadonetproviders": {
                "name": "ListADONETProviders",
                "description": "Returns a TAB and CRLF delimited list of providers with display names",
                "arguments": [
                    {
                        "name": "includedisplayname",
                        "type": "L"
                    },
                    {
                        "name": "includedescription",
                        "type": "L"
                    }
                ]
            },
            "listadonetproviderdatasources": {
                "name": "ListADONETProviderDataSources",
                "description": "Returns a TAB and CRLF delimited list of data sources for a provider with display names",
                "arguments": [
                    {
                        "name": "providername",
                        "type": "C"
                    },
                    {
                        "name": "includedisplayname",
                        "type": "L"
                    }
                ]
            },
            "flushadonetprovidercache": {
                "name": "FlushADONETProviderCache",
                "description": "Clears out loaded ADO.NET providers after installing a new provider"
            },
            "begintransaction": {
                "name": "BeginTransaction",
                "description": "Begin a batch of SQL updates, inserts and/or deletes that need to succeed or fail as a group."
            },
            "committransaction": {
                "name": "CommitTransaction",
                "description": "Apply a set of changes started with BeginTransaction."
            },
            "rollbacktransaction": {
                "name": "RollBackTransaction",
                "description": "Undo a set of changes started with BeginTransaction, but not yet applied (CommitTransaction hasn't been called)."
            },
            "execute": {
                "name": "Execute",
                "description": "Execute a SQL statement on the connection.\nNote: To execute more than one command in a single call, \n      separate each query with a single line containing only '\\' at the beginning.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "getrowcount",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "executeforvalue": {
                "name": "ExecuteForValue",
                "description": "Execute a SQL statement on the connection and get the first column of the first row of the result.",
                "arguments": [
                    {
                        "name": "value",
                        "type": "A",
                        "byref": true
                    },
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencetableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "getrowcount",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "validatequery": {
                "name": "ValidateQuery",
                "description": "Validate a SQL query on the connection.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    }
                ]
            },
            "affectedrows": {
                "name": "AffectedRows",
                "description": "Return affected rows."
            },
            "freeresult": {
                "name": "FreeResult",
                "description": "Release the result set from the last SQL select statement.\nNote:  Calling FreeResult is not generally necessary.  Call it to free resources when there will be a delay between queries."
            },
            "toopentable": {
                "name": "ToOpenTable",
                "description": "Fetch data to an open .DBF table using a SQL query\nNote:\nThe column types returned for each column by the query must match the respective column in the local table.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "localtable",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "append",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "mapbyposition",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "todbf": {
                "name": "ToDBF",
                "description": "Fetch data to a local .DBF table using a SQL query",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "] filename",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "append",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "mapbyposition",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "localtabledefinition",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "tostring": {
                "name": "ToString",
                "description": "Fetch data to a string using a SQL query.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "columnseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tostringfile": {
                "name": "ToStringFile",
                "description": "Fetch data to a string using a SQL query.",
                "arguments": [
                    {
                        "name": "targetfile",
                        "type": "C"
                    },
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "columnseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toformattedstring": {
                "name": "ToFormattedString",
                "description": "Fetch data to a string using a SQL query.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowformattingoptions",
                        "type": "SQL::RowFormattingOptions",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tojson": {
                "name": "ToJSON",
                "description": "Fetch data to an JSON formatted string using a SQL query.\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tojsonobjectsyntax": {
                "name": "ToJSONObjectSyntax",
                "description": "Fetch data to JSON object syntax using a SQL query.\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tojsonfile": {
                "name": "ToJSONFile",
                "description": "Fetch data to JSON object syntax using a SQL query.\n",
                "arguments": [
                    {
                        "name": "targetfile"
                    },
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tocsv": {
                "name": "ToCSV",
                "description": "Fetch data to Comma Separated Variable format.\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "includeheaderrow",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "texttosubstituteforbinary",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "tocsvfile": {
                "name": "ToCSVFile",
                "description": "Fetch data and store in a file in Comma Separated Variable format.\n",
                "arguments": [
                    {
                        "name": "targetfile",
                        "type": "C"
                    },
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "includeheaderrow",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "texttosubstituteforbinary",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "toxml": {
                "name": "ToXML",
                "description": "Fetch data to an XML formatted string using a SQL query.\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "documentname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "header",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toexcel": {
                "name": "ToExcel",
                "description": "Fetch data to an Excel 2003 xls file using a SQL query.\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "] destinationfilename",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "sheetname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "includeheadings",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "columnreferences",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "topropertyarray": {
                "name": "ToPropertyArray",
                "description": "Fetch data to a property array using a SQL query.\nNote: You must dim the array first:  DIM MyArray[1] as P\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "array",
                        "type": "p",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "togridcomponentdataobject": {
                "name": "ToGridComponentDataObject",
                "description": "Fetch data to a Grid Component Data Object using a SQL Query.\nNote: You must dim the arrays first:  DIM MyArray[1] as P\n",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "arguments",
                        "type": "SQL::Arguments",
                        "optional": true
                    },
                    {
                        "name": "dataarray",
                        "type": "p",
                        "optional": true
                    },
                    {
                        "name": "fieldarray",
                        "type": "p",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertdata": {
                "name": "InsertData",
                "description": "Apply new rows to a table in the currently connected database using a result set.",
                "arguments": [
                    {
                        "name": "tableowner",
                        "type": "C"
                    },
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "replicateidentity",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "updatedata": {
                "name": "UpdateData",
                "description": "Apply changes to existing rows in a table in the currently connected database using a result set.",
                "arguments": [
                    {
                        "name": "tableowner",
                        "type": "C"
                    },
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "deletedata": {
                "name": "DeleteData",
                "description": "Delete rows from a table in the currently connected database using a result set.",
                "arguments": [
                    {
                        "name": "tableowner",
                        "type": "C"
                    },
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "applydata": {
                "name": "ApplyData",
                "description": "Apply the query to a table in the currently connected database using the result set provided.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "maptableinfousingcolumnindex",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "copyfrom": {
                "name": "CopyFrom",
                "description": "Create tables from the source connection (or optionally those in the provided schema) in the current connection and populate them with the data from the source connection.\n\nNote:  Pass in an event script and optionally a UserContext object to handle events for this function.\n\nYou can provide a SQL::DataMasking::Masker object to mask the data as it is being copied.",
                "arguments": [
                    {
                        "name": "sourceconnectionorstring",
                        "type": "SQL::Connection"
                    },
                    {
                        "name": "sourceschema",
                        "type": "SQL::Schema",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "masker",
                        "type": "SQL::DataMasking::Masker",
                        "optional": true
                    }
                ]
            },
            "applycurrentrow": {
                "name": "ApplyCurrentRow",
                "description": "Apply the query to a table in the currently connected database using the current row of the result set provided.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "resultsetfromdbf": {
                "name": "ResultSetFromDBF",
                "description": "Create a SQL::ResultSet object for a table.\nThis object can be passed to SQL update functions.\n\nNote: Use of the ParentTable, ADBPath and AbsolutePositioning arguments is an advanced\nuser feature and requires some understanding of caching for SQL.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    },
                    {
                        "name": "parenttable",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "adbpath",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "absolutepositioning",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "resultsetfromadorecordset": {
                "name": "ResultSetFromADORecordSet",
                "description": "Create a SQL::ResultSet object for an ADODB RecordSet.",
                "arguments": [
                    {
                        "name": "recordset",
                        "type": "P"
                    },
                    {
                        "name": "connection",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "resultsetfromjson": {
                "name": "ResultSetFromJSON",
                "description": "Create a SQL::ResultSet object for a JSON String.",
                "arguments": [
                    {
                        "name": "json",
                        "type": "C"
                    },
                    {
                        "name": "tableinfo",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "alias",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "createdatabase": {
                "name": "CreateDatabase",
                "description": "Create a new database.",
                "arguments": [
                    {
                        "name": "database",
                        "type": "C"
                    }
                ]
            },
            "dropdatabase": {
                "name": "DropDatabase",
                "description": "Remove a database.",
                "arguments": [
                    {
                        "name": "database",
                        "type": "C"
                    }
                ]
            },
            "createschematables": {
                "name": "CreateSchemaTables",
                "description": "Create all tables in the schema in the currently connected database using the TableInfo specifications in the schema.",
                "arguments": [
                    {
                        "name": "schema",
                        "type": "SQL::Schema"
                    },
                    {
                        "name": "dropfirst",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "dropschematables": {
                "name": "DropSchemaTables",
                "description": "Drop all tables defined in the schema from the currently connected database.",
                "arguments": [
                    {
                        "name": "sql::schema"
                    }
                ]
            },
            "createtable": {
                "name": "CreateTable",
                "description": "Create a table in the currently connected database using the TableInfo specification.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "droptable": {
                "name": "DropTable",
                "description": "Drop a table from the currently connected database.",
                "arguments": [
                    {
                        "name": "sql::tableinfo"
                    }
                ]
            },
            "lastinsertedidentity": {
                "name": "LastInsertedIdentity",
                "description": "Get the identity value from the last insert for the current session.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "createindex": {
                "name": "CreateIndex",
                "description": "Create an index on the specified table in the currently connected database using the TableInfo and IndexInfo specifications.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "indexinfo",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "dropindex": {
                "name": "DropIndex",
                "description": "Drop the index named in the index infromation passed from table specified in the currently connected database.\n\nNote: L DropIndex(TableName as C, IndexName as C, [TableOwner as C]) is deprecated, but will still work.",
                "arguments": [
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo"
                    },
                    {
                        "name": "indexinfo",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "gettableinfo": {
                "name": "GetTableInfo",
                "description": "Get the definition of a table.\n",
                "arguments": [
                    {
                        "name": "info",
                        "type": "SQL::TableInfo",
                        "byref": true
                    },
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "owner",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "schema",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "gettableinfofromdbf": {
                "name": "GetTableInfoFromDBF",
                "description": "Get the definition of a DBF table from an open table or by name.\n",
                "arguments": [
                    {
                        "name": "info",
                        "type": "SQL::TableInfo",
                        "byref": true
                    },
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "getschema": {
                "name": "GetSchema",
                "description": "\nGet a schema definition.\n\nExample Usage:\n\n\tdim Schema as SQL::Schema\n\tdim Filter as SQL::TableFilter\n\tFilter.IncludeViews = .t.\n\tFilter.IncludeAllSchemas = .t.\n\tConnection.GetSchema(Schema, \"\", Filter)\n\nNote: The older format of arguments (below) is also supported, but using a filter object is preferable and includes more options.\n\n\tL SQL::TableInfo GetSchema(BYREF Schema as SQL::Schema [, TableOwner as C [, IncludeTables as L [, IncludeViews as L [,IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]]])\n",
                "arguments": [
                    {
                        "name": "schema",
                        "type": "SQL::Schema",
                        "byref": true
                    },
                    {
                        "name": "tableowner",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "SQL::TableFilter",
                        "optional": true
                    }
                ]
            },
            "listdrivers": {
                "name": "ListDrivers",
                "description": "Return a list of installed drivers (currently implemented only for ODBC)."
            },
            "listservers": {
                "name": "ListServers",
                "description": "Return a list of servers for the current connection Application Programming Interface(API)."
            },
            "getpreferredsyntax": {
                "name": "GetPreferredSyntax",
                "description": "Return a the most appropriate syntax for the server specified or an empty string if not known.",
                "arguments": [
                    {
                        "name": "servername",
                        "type": "C"
                    },
                    {
                        "name": "datasource",
                        "type": "C"
                    }
                ]
            },
            "listdatabases": {
                "name": "ListDatabases",
                "description": "Return a list of databases from the current server."
            },
            "listtables": {
                "name": "ListTables",
                "description": "Return a list of tables for the current database.\n\nExample Usage:\n\n\tdim Filter as SQL::TableFilter\n\tFilter.IncludeViews = .t.\n\tConnection.ListTables(Filter)\n\nNote: The overload below is still allowed, but is obsolete.  Use a TableFilter argument instead.\n\n\tC ListTables( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])",
                "arguments": [
                    {
                        "name": "tablefilter",
                        "type": "SQL::TableFilter",
                        "optional": true
                    }
                ]
            },
            "listtableswithtypes": {
                "name": "ListTablesWithTypes",
                "description": "Return a list of tables for the current database suffixed with (<type>).\n\nExample Usage:\n\n\tdim Filter as SQL::TableFilter\n\tFilter.IncludeViews = .t.\n\tConnection.ListTables(Filter)\n\nNote: The overload below is still allowed, but is obsolete.  Use a TableFilter argument instead.\n\n\tC ListTablesWithTypes( [IncludeTables as L [, IncludeViews as L [, IncludeLinkedTables as L [, IncludeSystemTables as L [, IncludeSynonyms as L [, IncludeAliases as L]]]]]])",
                "arguments": [
                    {
                        "name": "tablefilter",
                        "type": "SQL::TableFilter",
                        "optional": true
                    }
                ]
            },
            "primarykeyexpression": {
                "name": "PrimaryKeyExpression",
                "description": "Return the primary key expression for a Table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "C"
                    }
                ]
            },
            "sshtunnelstatus": {
                "name": "SSHTunnelStatus",
                "description": "Check the status of an SSH tunnel for a specific connection string\nThis function is intended for internal use.  Before making this call, you must call SetConnectionString() or Open() with a connection string.\nThe function returns the SSH Tunnel Status in the NativeText property of the CallResult and the assigned port (or -1 if it is not active) in the NativeCode property."
            },
            "adduser": {
                "name": "AddUser",
                "description": "Create a new user in the currently connected database or server.",
                "arguments": [
                    {
                        "name": "username",
                        "type": "C"
                    },
                    {
                        "name": "password",
                        "type": "C"
                    }
                ]
            },
            "dropuser": {
                "name": "DropUser",
                "description": "Remove the user named from the currently connected database or server.",
                "arguments": [
                    {
                        "name": "username",
                        "type": "C"
                    }
                ]
            },
            "addusergroup": {
                "name": "AddUserGroup",
                "description": "Create a new user group in the currently connected database or server.",
                "arguments": [
                    {
                        "name": "groupname",
                        "type": "C"
                    }
                ]
            },
            "dropusergroup": {
                "name": "DropUserGroup",
                "description": "Remove the user group named from the currently connected database or server.",
                "arguments": [
                    {
                        "name": "groupname",
                        "type": "C"
                    }
                ]
            },
            "addusertogroup": {
                "name": "AddUserToGroup",
                "description": "Make the user a member of the group in the currently connected database or server.",
                "arguments": [
                    {
                        "name": "username",
                        "type": "C"
                    },
                    {
                        "name": "groupname",
                        "type": "C"
                    }
                ]
            },
            "dropuserfromgroup": {
                "name": "DropUserFromGroup",
                "description": "Remove the user from the group in the currently connected database or server.",
                "arguments": [
                    {
                        "name": "username",
                        "type": "C"
                    },
                    {
                        "name": "groupname",
                        "type": "C"
                    }
                ]
            },
            "grantaccess": {
                "name": "GrantAccess",
                "description": "Grant to a user or group the access specified, optionally, on the resource named.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "accesstype",
                        "type": "C"
                    },
                    {
                        "name": "resource",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "revokeaccess": {
                "name": "RevokeAccess",
                "description": "Revoke from a user or group the access specified, optionally, on the resource named.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    },
                    {
                        "name": "accesstype",
                        "type": "C"
                    },
                    {
                        "name": "resource",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "getauth": {
                "name": "GetAuth",
                "description": "Get auth object for connection."
            },
            "getresultsetmasker": {
                "name": "GetResultSetMasker",
                "description": "Create and return a result set that uses the provided masker to obfuscate the data returned.\nFor data maskers that are used for multiple tables, include a SQL::TableInfo object to indicate the table.\nThe rules defined in the masker will be applied to the data returned.",
                "arguments": [
                    {
                        "name": "masker",
                        "type": "SQL::DataMasking::Masker",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "Connection"
    },
    "databasesnapshot": {
        "__methods__": {
            "addtable": {
                "name": "AddTable",
                "description": "Add a Table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "SQL::TableSnapshot"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear the snapshot."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deletetable": {
                "name": "DeleteTable",
                "description": "Delete a Table.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "load": {
                "name": "Load",
                "description": "Load schema data into the snapshot.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "schema",
                        "type": "P"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "loaddbf": {
                "name": "LoadDBF",
                "description": "Load current DBF database tables into the snapshot.",
                "arguments": [
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "store": {
                "name": "Store",
                "description": "Store schema data from the snapshot into the database.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "createtables",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "storedbf": {
                "name": "StoreDBF",
                "description": "Store table data from the snapshot into DBF tables in the current database.",
                "arguments": [
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tablenumber": {
                "name": "TableNumber",
                "description": "Get the index of a Table from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "toexcel": {
                "name": "ToExcel",
                "description": "Create an Excel 2003 workbook with a sheet for each table in the snapshot.",
                "arguments": [
                    {
                        "name": "destinationfile",
                        "type": "C"
                    },
                    {
                        "name": "includeheadings",
                        "type": "L",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "DatabaseSnapshot"
    },
    "datamasking": {
        "columnoptions": {
            "__methods__": {
                "clone": {
                    "name": "Clone",
                    "description": "Create a copy of an object instance."
                },
                "newinstance": {
                    "name": "NewInstance",
                    "description": "Create a new object instance of the same type."
                }
            },
            "__name__": "ColumnOptions"
        },
        "datatype": {
            "__enumeration__": [
                "String",
                "Date",
                "Number"
            ],
            "__name__": "DataType"
        },
        "maskdefinition": {
            "__methods__": {
                "addcolumn": {
                    "name": "AddColumn",
                    "description": "Returns .t. if Column can be added to the current definition.",
                    "arguments": [
                        {
                            "name": "tablename",
                            "type": "C"
                        },
                        {
                            "name": "columnname",
                            "type": "C"
                        },
                        {
                            "name": "columnrule",
                            "type": "C"
                        }
                    ]
                },
                "addcolumns": {
                    "name": "AddColumns",
                    "description": "Adds columns from a tab/crlf delimited string in the format table<tab>column<tab>rule<crlf>.  Returns .t. if successfully added.",
                    "arguments": [
                        {
                            "name": "tablescolumnsandrules",
                            "type": "C"
                        }
                    ]
                },
                "addrule": {
                    "name": "AddRule",
                    "description": "Add a Rule.",
                    "arguments": [
                        {
                            "name": "rule",
                            "type": "SQL::DataMasking::MaskRule"
                        }
                    ]
                },
                "addtable": {
                    "name": "AddTable",
                    "description": "Add a Table.",
                    "arguments": [
                        {
                            "name": "table",
                            "type": "SQL::DataMasking::TableOptions"
                        }
                    ]
                },
                "clone": {
                    "name": "Clone",
                    "description": "Create a copy of an object instance."
                },
                "deleterule": {
                    "name": "DeleteRule",
                    "description": "Delete a Rule.",
                    "arguments": [
                        {
                            "name": "index",
                            "type": "N"
                        }
                    ]
                },
                "deletetable": {
                    "name": "DeleteTable",
                    "description": "Delete a Table.",
                    "arguments": [
                        {
                            "name": "index",
                            "type": "N"
                        }
                    ]
                },
                "gettablerowlimit": {
                    "name": "GetTableRowLimit",
                    "description": "Returns .t. if table limit was previously set. If the limit was set, MaximumPercentageOfRows contains the value.",
                    "arguments": [
                        {
                            "name": "tablename",
                            "type": "C"
                        },
                        {
                            "name": "maximumpercentageofrows",
                            "type": "N"
                        }
                    ]
                },
                "listoverrides": {
                    "name": "ListOverrides",
                    "description": "Returns a list of overrides defined.  If you provide a table name, only overrides for that table will be returned.",
                    "arguments": [
                        {
                            "name": "tablename",
                            "type": "C",
                            "optional": true
                        }
                    ]
                },
                "listrules": {
                    "name": "ListRules",
                    "description": "Returns a list of loaded rules with the underlying XBasic types.",
                    "arguments": [
                        {
                            "name": "alphatype",
                            "type": "C",
                            "optional": true
                        },
                        {
                            "name": "includetypes",
                            "type": "L",
                            "optional": true
                        },
                        {
                            "name": "includedescriptions",
                            "type": "L",
                            "optional": true
                        }
                    ]
                },
                "loaddefinition": {
                    "name": "LoadDefinition",
                    "description": "Returns .t. if the Rules and value sets were loaded successfully.",
                    "arguments": [
                        {
                            "name": "includebuiltin",
                            "type": "L",
                            "optional": true
                        },
                        {
                            "name": "rules",
                            "type": "C",
                            "optional": true
                        },
                        {
                            "name": "valuesets",
                            "type": "C",
                            "optional": true
                        }
                    ]
                },
                "newinstance": {
                    "name": "NewInstance",
                    "description": "Create a new object instance of the same type."
                },
                "rulenumber": {
                    "name": "RuleNumber",
                    "description": "Get the index of a Rule from the name.",
                    "arguments": [
                        {
                            "name": "name",
                            "type": "C"
                        }
                    ]
                },
                "settablerowlimit": {
                    "name": "SetTableRowLimit",
                    "description": "Returns .t. if table limit was set.",
                    "arguments": [
                        {
                            "name": "tablename",
                            "type": "C"
                        },
                        {
                            "name": "maximumpercentageofrows",
                            "type": "N"
                        }
                    ]
                },
                "tablenumber": {
                    "name": "TableNumber",
                    "description": "Get the index of a Table from the name.",
                    "arguments": [
                        {
                            "name": "name",
                            "type": "C"
                        }
                    ]
                }
            },
            "__name__": "MaskDefinition"
        },
        "masker": {
            "__methods__": {
                "addcolumn": {
                    "name": "AddColumn",
                    "description": "Returns .t. if Column can be added to the current definition.",
                    "arguments": [
                        {
                            "name": "tablename",
                            "type": "C"
                        },
                        {
                            "name": "columnname",
                            "type": "C"
                        },
                        {
                            "name": "columnrule",
                            "type": "C"
                        }
                    ]
                },
                "addcolumns": {
                    "name": "AddColumns",
                    "description": "Adds columns from a delimited string in the format 'table name<tab>column name<tab>rule name<crlf>'.  Returns .t. if successfully added.",
                    "arguments": [
                        {
                            "name": "tablescolumnsandrules",
                            "type": "C"
                        }
                    ]
                },
                "clone": {
                    "name": "Clone",
                    "description": "Create a copy of an object instance."
                },
                "maskdata": {
                    "name": "MaskData",
                    "description": "Returns .t. if the masking succeeded or there was no masking specified.",
                    "arguments": [
                        {
                            "name": "table",
                            "type": "P"
                        },
                        {
                            "name": "column",
                            "type": "N"
                        },
                        {
                            "name": "value",
                            "type": "P"
                        },
                        {
                            "name": "resultvalue",
                            "type": "P"
                        }
                    ]
                },
                "newinstance": {
                    "name": "NewInstance",
                    "description": "Create a new object instance of the same type."
                }
            },
            "__name__": "Masker"
        },
        "maskrule": {
            "__methods__": {
                "addargument": {
                    "name": "AddArgument",
                    "description": "Add a Argument.",
                    "arguments": [
                        {
                            "name": "argument",
                            "type": "SQL::NamedValue"
                        }
                    ]
                },
                "argumentnumber": {
                    "name": "ArgumentNumber",
                    "description": "Get the index of a Argument from the name.",
                    "arguments": [
                        {
                            "name": "name",
                            "type": "C"
                        }
                    ]
                },
                "clone": {
                    "name": "Clone",
                    "description": "Create a copy of an object instance."
                },
                "deleteargument": {
                    "name": "DeleteArgument",
                    "description": "Delete a Argument.",
                    "arguments": [
                        {
                            "name": "index",
                            "type": "N"
                        }
                    ]
                },
                "insertargument": {
                    "name": "InsertArgument",
                    "description": "Insert a new Argument.",
                    "arguments": [
                        {
                            "name": "argument",
                            "type": "SQL::NamedValue"
                        },
                        {
                            "name": "insertbefore",
                            "type": "N",
                            "optional": true
                        }
                    ]
                },
                "moveargument": {
                    "name": "MoveArgument",
                    "description": "Move a block of Argument items.",
                    "arguments": [
                        {
                            "name": "moveto",
                            "type": "N"
                        },
                        {
                            "name": "movefrom",
                            "type": "N"
                        }
                    ]
                },
                "newinstance": {
                    "name": "NewInstance",
                    "description": "Create a new object instance of the same type."
                }
            },
            "__name__": "MaskRule"
        },
        "ruletype": {
            "__enumeration__": [
                "ValueSet",
                "SequentialString",
                "SequentialNumber",
                "RandomString",
                "RandomNumber",
                "RandomDate",
                "RandomDateTime"
            ],
            "__name__": "RuleType"
        },
        "tableoptions": {
            "__methods__": {
                "addcolumn": {
                    "name": "AddColumn",
                    "description": "Add a Column.",
                    "arguments": [
                        {
                            "name": "column",
                            "type": "SQL::DataMasking::ColumnOptions"
                        }
                    ]
                },
                "clone": {
                    "name": "Clone",
                    "description": "Create a copy of an object instance."
                },
                "columnnumber": {
                    "name": "ColumnNumber",
                    "description": "Get the index of a Column from the name.",
                    "arguments": [
                        {
                            "name": "name",
                            "type": "C"
                        }
                    ]
                },
                "deletecolumn": {
                    "name": "DeleteColumn",
                    "description": "Delete a Column.",
                    "arguments": [
                        {
                            "name": "index",
                            "type": "N"
                        }
                    ]
                },
                "insertcolumn": {
                    "name": "InsertColumn",
                    "description": "Insert a new Column.",
                    "arguments": [
                        {
                            "name": "column",
                            "type": "SQL::DataMasking::ColumnOptions"
                        },
                        {
                            "name": "insertbefore",
                            "type": "N",
                            "optional": true
                        }
                    ]
                },
                "movecolumn": {
                    "name": "MoveColumn",
                    "description": "Move a block of Column items.",
                    "arguments": [
                        {
                            "name": "moveto",
                            "type": "N"
                        },
                        {
                            "name": "movefrom",
                            "type": "N"
                        }
                    ]
                },
                "newinstance": {
                    "name": "NewInstance",
                    "description": "Create a new object instance of the same type."
                }
            },
            "__name__": "TableOptions"
        },
        "__name__": "DataMasking"
    },
    "datatypeinfo": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "formatdata": {
                "name": "FormatData",
                "description": "Return the data value defined by this SQL::DataTypeInfo as follows:\n1.\tIf a named format is provided, and a format has been set by assigning NamedFormatExpressions,\"\n\tthis format will be used.\"\n2.\tOtherwise, if the value is numeric and the DisplayFormat property has been set the value will be formatted\"\n\tas if the value were passed to the system function STR using the values of DBFLength and DBFDecimals\"\n\talong with the format specified in DisplayFormat\"\n3. Otherwise, default conversion to a string will be done.",
                "arguments": [
                    {
                        "name": "row",
                        "type": "P"
                    },
                    {
                        "name": "formatname",
                        "type": "C"
                    },
                    {
                        "name": "usercontext",
                        "type": "P"
                    },
                    {
                        "name": "rowformatting",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "DataTypeInfo"
    },
    "indexcolumninfo": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "IndexColumnInfo"
    },
    "indexinfo": {
        "__methods__": {
            "addcolumn": {
                "name": "AddColumn",
                "description": "Add a Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::IndexColumnInfo"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "columnisinkey": {
                "name": "ColumnIsInKey",
                "description": "Returns .t. if the name passed in matches the name of a column that is in the primary key.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the index of a Column from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "deletecolumn": {
                "name": "DeleteColumn",
                "description": "Delete a Column.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertcolumn": {
                "name": "InsertColumn",
                "description": "Insert a new Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::IndexColumnInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movecolumn": {
                "name": "MoveColumn",
                "description": "Move a block of Column items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "IndexInfo"
    },
    "intermediatetype": {
        "__enumeration__": [
            "Character",
            "VaryingCharacter",
            "NationalCharacter",
            "NationalVaryingCharacter",
            "VaryingCharacterFile",
            "NationalVaryingCharacterFile",
            "Boolean",
            "Integer8",
            "Integer16",
            "Integer24",
            "Integer32",
            "Integer64",
            "Integer128",
            "UnsignedInteger8",
            "UnsignedInteger16",
            "UnsignedInteger24",
            "UnsignedInteger32",
            "UnsignedInteger64",
            "UnsignedInteger128",
            "Real",
            "Double",
            "LongDouble",
            "Number",
            "UnsignedReal",
            "UnsignedDouble",
            "UnsignedLongDouble",
            "UnsignedNumber",
            "Date",
            "SmallDateTime",
            "DateTime",
            "DateTimeZoned",
            "DateTimeLocal",
            "Time",
            "TimeZoned",
            "TimeLocal",
            "TimeStamp",
            "Year",
            "TimeStampZoned",
            "TimeStampLocal",
            "YearInterval",
            "MonthInterval",
            "DayInterval",
            "HourInterval",
            "MinuteInterval",
            "SecondInterval",
            "Enumeration",
            "Set",
            "Currency",
            "SmallCurrency",
            "Binary",
            "VaryingBinary",
            "BinaryFile",
            "Bit",
            "UUID",
            "Counter",
            "Variant",
            "RowID",
            "URowID",
            "DayToHourInterval",
            "DayToMinuteInterval",
            "DayToSecondInterval",
            "HourToMinuteInterval",
            "HourToSecondInterval",
            "MinuteToSecondInterval",
            "Bitmap",
            "JPEGImage",
            "OLEObject",
            "RichText",
            "ImageFileReference",
            "Sound",
            "PNGImage",
            "UserDefined",
            "XML",
            "HTML",
            "BinaryTimeStamp",
            "BinaryTimeStampZoned",
            "BinaryTimeStampLocal",
            "HierarchyId",
            "Geometry",
            "Geography"
        ],
        "__name__": "IntermediateType"
    },
    "linkqueries": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "LinkQueries"
    },
    "localdb": {
        "__functions__": {
            "createinstance": {
                "name": "CreateInstance",
                "description": "Create a LocalDB instance.",
                "arguments": [
                    {
                        "name": "instancename",
                        "type": "C"
                    },
                    {
                        "name": "version",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "deleteinstance": {
                "name": "DeleteInstance",
                "description": "Delete a LocalDB instance.",
                "arguments": [
                    {
                        "name": "instancename",
                        "type": "C"
                    }
                ]
            },
            "getinstanceinfo": {
                "name": "GetInstanceInfo",
                "description": "Get information about a LocalDB instance.",
                "arguments": [
                    {
                        "name": "instancename",
                        "type": "C"
                    },
                    {
                        "name": "info",
                        "type": "P"
                    }
                ]
            },
            "getversioninfo": {
                "name": "GetVersionInfo",
                "description": "Get information about a LocalDB version.",
                "arguments": [
                    {
                        "name": "versionname",
                        "type": "C"
                    },
                    {
                        "name": "info",
                        "type": "P"
                    }
                ]
            },
            "listinstances": {
                "name": "ListInstances",
                "description": "Get a crlf() delimited list of LocalDB instances.",
                "arguments": [
                    {
                        "name": "instancenames",
                        "type": "C"
                    }
                ]
            },
            "listversions": {
                "name": "ListVersions",
                "description": "Get a crlf() delimited list of LocalDB versions.",
                "arguments": [
                    {
                        "name": "versionnames",
                        "type": "C"
                    }
                ]
            },
            "startinstance": {
                "name": "StartInstance",
                "description": "Start a LocalDB instance.",
                "arguments": [
                    {
                        "name": "instancename",
                        "type": "C"
                    }
                ]
            },
            "starttracing": {
                "name": "StartTracing",
                "description": "Start tracing for LocalDB."
            },
            "stopinstance": {
                "name": "StopInstance",
                "description": "Stop a LocalDB instance.",
                "arguments": [
                    {
                        "name": "instancename",
                        "type": "C"
                    },
                    {
                        "name": "timeoutinseconds",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "sendnowait",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "killprocess",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "stoptracing": {
                "name": "StopTracing",
                "description": "Stop tracing for LocalDB."
            }
        },
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "LocalDB"
    },
    "localdbinstanceinfo": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "LocalDBInstanceInfo"
    },
    "localdbversioninfo": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "LocalDBVersionInfo"
    },
    "namedvalue": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "NamedValue"
    },
    "referentialupdaterule": {
        "__enumeration__": [
            "Restrict",
            "Cascade",
            "SetNull",
            "SetDefault"
        ],
        "__name__": "ReferentialUpdateRule"
    },
    "resultset": {
        "__properties__": {
            "rowcount": {
                "name": "RowCount"
            },
            "currentrowindex": {
                "name": "CurrentRowIndex"
            },
            "columninfo": {
                "name": "ColumnInfo"
            },
            "columncount": {
                "name": "ColumnCount"
            },
            "callresult": {
                "name": "CallResult"
            },
            "tableinfo": {
                "name": "TableInfo"
            },
            "tableinfocount": {
                "name": "TableInfoCount"
            },
            "dbfrowsyntax": {
                "name": "DBFRowSyntax"
            },
            "sizetofit": {
                "name": "SizeToFit"
            },
            "activelinkdbfrowsyntax": {
                "name": "ActiveLinkDBFRowSyntax"
            },
            "querysource": {
                "name": "QuerySource"
            },
            "queryarguments": {
                "name": "QueryArguments"
            },
            "streamingmode": {
                "name": "StreamingMode"
            }
        },
        "__methods__": {
            "nextrow": {
                "name": "NextRow",
                "description": "Position to the next row in the ResultSet."
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the number of the column named.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "data": {
                "name": "Data",
                "description": "Get the data for the column name or index specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "dataasgeography": {
                "name": "DataAsGeography",
                "description": "Get the data for the column name or index specified as a Geography object.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    },
                    {
                        "name": "srid",
                        "type": "N"
                    }
                ]
            },
            "dataisnull": {
                "name": "DataIsNull",
                "description": "Determine whether a given element is Null.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "fetchpage": {
                "name": "FetchPage",
                "description": "Fetch a block of one or more rows into a local cache table.\n\nNote: This function is an advanced user feature and requires some understanding of cacheing for SQL.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    },
                    {
                        "name": "startrow",
                        "type": "N"
                    },
                    {
                        "name": "rows",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "remapoffset",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "notificationinterval",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "tostring": {
                "name": "ToString",
                "description": "Copy the ResultSet to a string.",
                "arguments": [
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "displayformat",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "columnseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toxml": {
                "name": "ToXML",
                "description": "Convert ResultSet an XML formatted string.\n",
                "arguments": [
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "documentname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "header",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toexcel": {
                "name": "ToExcel",
                "description": "Convert ResultSet to an Excel 2003 format (.xls) or 2007 format (.xlsx) file.\n",
                "arguments": [
                    {
                        "name": "destinationfilename",
                        "type": "C"
                    },
                    {
                        "name": "sheetname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "includeheadings",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tojson": {
                "name": "ToJSON",
                "description": "Convert a ResultSet to a JSON formatted string.\n",
                "arguments": [
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tojsonobjectsyntax": {
                "name": "ToJSONObjectSyntax",
                "description": "Convert a ResultSet to JSON object syntax.\n",
                "arguments": [
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toopentable": {
                "name": "ToOpenTable",
                "description": "Fetch data from a result set to an open .DBF table\nNotes:\n1. If MapByPosition is false (the default) only column names in the result set that match a local table column will be copied.\n2. The column types in the result set must match the respective column in the local table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rows",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "append",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "mapbyposition",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "todbf": {
                "name": "ToDBF",
                "description": "Create a local copy of the result set in a .DBF table",
                "arguments": [
                    {
                        "name": "filename",
                        "type": "C"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rows",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "append",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "dictionaryname",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "mapbyposition",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "tableinfo",
                        "type": "SQL::TableInfo",
                        "optional": true
                    }
                ]
            },
            "gotorow": {
                "name": "GoToRow",
                "description": "Position to the row requested (Note:  Backward movement is not supported by all databases).",
                "arguments": [
                    {
                        "name": "rowindex",
                        "type": "N"
                    }
                ]
            },
            "topropertyarray": {
                "name": "ToPropertyArray",
                "description": "Convert the ResultSet to a property array.\n",
                "arguments": [
                    {
                        "name": "array",
                        "type": "p"
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "togridcomponentdataobject": {
                "name": "ToGridComponentDataObject",
                "description": "Convert the ResultSet to a Grid Component DataObject data and field arrays.\n",
                "arguments": [
                    {
                        "name": "dataarray",
                        "type": "p"
                    },
                    {
                        "name": "fieldarray",
                        "type": "p",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "nextresult": {
                "name": "NextResult",
                "description": "Position to the next set of rows in the ResultSet (applies only when multiple results are returned)."
            },
            "totableinfo": {
                "name": "ToTableInfo",
                "description": "Return the column definitions as a single SQL::TableInfo."
            },
            "formatdata": {
                "name": "FormatData",
                "description": "Format the data for the column name, index or definition specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    },
                    {
                        "name": "formatname",
                        "type": "C"
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    },
                    {
                        "name": "firstrowonpage",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "toformattedstring": {
                "name": "ToFormattedString",
                "description": "Copy the ResultSet to a string.",
                "arguments": [
                    {
                        "name": "rowformattingoptions",
                        "type": "SQL::RowFormattingOptions",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tocsv": {
                "name": "ToCSV",
                "description": "Convert a ResultSet to Comma Separated Variable format.\n",
                "arguments": [
                    {
                        "name": "includeheaderrow",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "texttosubstituteforbinary",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "executepostprocess": {
                "name": "ExecutePostProcess",
                "description": "Execute portable SQL against a resultset as P.\n",
                "arguments": [
                    {
                        "name": "resultset",
                        "type": "SQL::ResultSet",
                        "byref": true
                    },
                    {
                        "name": "selectstatement",
                        "type": "c"
                    },
                    {
                        "name": "args",
                        "type": "sql::Arguments",
                        "optional": true
                    }
                ]
            },
            "tojsonfile": {
                "name": "ToJSONFile",
                "description": "Convert a ResultSet to JSON object and store in TargetFile.\n",
                "arguments": [
                    {
                        "name": "targetfile"
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "converttotext",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tostringfile": {
                "name": "ToStringFile",
                "description": "Copy the ResultSet to a file as a string.",
                "arguments": [
                    {
                        "name": "targefilename",
                        "type": "C"
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "displayformat",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "columnseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "rowseparator",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "referencecolumns",
                        "type": "SQL::TableInfo",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "tocsvfile": {
                "name": "ToCSVFile",
                "description": "Write a ResultSet to a file in Comma Separated Variable format.\n",
                "arguments": [
                    {
                        "name": "targetfile",
                        "type": "C"
                    },
                    {
                        "name": "rowstocopy",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "startrow",
                        "type": "N",
                        "optional": true
                    },
                    {
                        "name": "uppercasenames",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "datetimeformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "dateformat",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "texttosubstituteforbinary",
                        "type": "C",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "ResultSet"
    },
    "row": {
        "__properties__": {
            "rowindex": {
                "name": "RowIndex"
            },
            "columncount": {
                "name": "ColumnCount"
            },
            "dbfrowsyntax": {
                "name": "DBFRowSyntax"
            },
            "rowindexonpage": {
                "name": "RowIndexOnPage"
            }
        },
        "__methods__": {
            "data": {
                "name": "Data",
                "description": "Get the value of the data column specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the number of the column named.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "dataisnull": {
                "name": "DataIsNull",
                "description": "Determine whether a given element is Null.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "formatdata": {
                "name": "FormatData",
                "description": "Format the data for the column name, index or definition specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    },
                    {
                        "name": "formatname",
                        "type": "C"
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "Row"
    },
    "rowformattingoptions": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "RowFormattingOptions"
    },
    "rowset": {
        "__properties__": {
            "definition": {
                "name": "Definition"
            },
            "availablerows": {
                "name": "AvailableRows"
            },
            "rowfetchsize": {
                "name": "RowFetchSize"
            }
        },
        "__methods__": {
            "open": {
                "name": "Open",
                "description": "Open the RowSet.",
                "arguments": [
                    {
                        "name": "definition",
                        "type": "C"
                    }
                ]
            },
            "close": {
                "name": "Close",
                "description": "Close the RowSet and clear the data cache."
            },
            "refreshrow": {
                "name": "RefreshRow",
                "description": "Get the most recent database values for row RowIndex.",
                "arguments": [
                    {
                        "name": "rowindex",
                        "type": "N"
                    }
                ]
            },
            "setdata": {
                "name": "SetData",
                "description": "Set the value of a specific row and column.",
                "arguments": [
                    {
                        "name": "row",
                        "type": "N"
                    },
                    {
                        "name": "column",
                        "type": "N"
                    },
                    {
                        "name": "data",
                        "type": "A"
                    }
                ]
            }
        },
        "__name__": "RowSet"
    },
    "rowsetdefinition": {
        "__methods__": {
            "addargument": {
                "name": "AddArgument",
                "description": "Add a Argument.",
                "arguments": [
                    {
                        "name": "argument",
                        "type": "SQL::ArgumentDefinition"
                    }
                ]
            },
            "addcolumn": {
                "name": "AddColumn",
                "description": "Add a Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "argumentnumber": {
                "name": "ArgumentNumber",
                "description": "Get the index of a Argument from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the index of a Column from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "deleteargument": {
                "name": "DeleteArgument",
                "description": "Delete a Argument.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deletecolumn": {
                "name": "DeleteColumn",
                "description": "Delete a Column.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertcolumn": {
                "name": "InsertColumn",
                "description": "Insert a new Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movecolumn": {
                "name": "MoveColumn",
                "description": "Move a block of Column items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "validate": {
                "name": "Validate",
                "description": "This function does an internal consistency check of the settings."
            }
        },
        "__name__": "RowSetDefinition"
    },
    "rowsetrow": {
        "__properties__": {
            "rowindex": {
                "name": "RowIndex"
            },
            "columncount": {
                "name": "ColumnCount"
            },
            "dbfrowsyntax": {
                "name": "DBFRowSyntax"
            },
            "callresult": {
                "name": "CallResult"
            },
            "rowindexonpage": {
                "name": "RowIndexOnPage"
            }
        },
        "__methods__": {
            "data": {
                "name": "Data",
                "description": "Get the value of the data column specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the number of the column named.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "dataisnull": {
                "name": "DataIsNull",
                "description": "Determine whether a given element is NULL.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "setdata": {
                "name": "SetData",
                "description": "Set the value of the data column specified.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    },
                    {
                        "name": "data",
                        "type": "A"
                    }
                ]
            },
            "setdatanull": {
                "name": "SetDataNull",
                "description": "Set a given element to NULL.",
                "arguments": [
                    {
                        "name": "columnindex",
                        "type": "N"
                    }
                ]
            },
            "beginupdate": {
                "name": "BeginUpdate",
                "description": "Start a set of changes to the data in the row."
            },
            "save": {
                "name": "Save",
                "description": "Apply all changes to the row made by calls to SetData and SetDataNull."
            },
            "undochanges": {
                "name": "UndoChanges",
                "description": "Remove all changes to the row made by calls to SetData and SetDataNull."
            }
        },
        "__name__": "RowSetRow"
    },
    "rowsnapshot": {
        "__methods__": {
            "adddata": {
                "name": "AddData",
                "description": "Add a Data.",
                "arguments": [
                    {
                        "name": "data",
                        "type": "SQL::ColumnValue"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "datanumber": {
                "name": "DataNumber",
                "description": "Get the index of a Data from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "deletedata": {
                "name": "DeleteData",
                "description": "Delete a Data.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertdata": {
                "name": "InsertData",
                "description": "Insert a new Data.",
                "arguments": [
                    {
                        "name": "data",
                        "type": "SQL::ColumnValue"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movedata": {
                "name": "MoveData",
                "description": "Move a block of Data items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "RowSnapshot"
    },
    "schema": {
        "__methods__": {
            "addtable": {
                "name": "AddTable",
                "description": "Add a Table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear out existing entries."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "createtables": {
                "name": "CreateTables",
                "description": "Creates all tables in the schema in the database identified by the connection optionally dropping existing tables.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "dropfirst",
                        "type": "L"
                    }
                ]
            },
            "deletetable": {
                "name": "DeleteTable",
                "description": "Delete a Table.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "droptables": {
                "name": "DropTables",
                "description": "Drops all tables in the schema from the database.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            },
            "generatecreatescript": {
                "name": "GenerateCreateScript",
                "description": "Generate a script to create the tables in the schema.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            },
            "generatedropscript": {
                "name": "GenerateDropScript",
                "description": "Generate a script to drop the tables in the schema.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            },
            "listtables": {
                "name": "ListTables",
                "description": "Return a list of tables for the current database.",
                "arguments": [
                    {
                        "name": "filter",
                        "type": "P"
                    }
                ]
            },
            "listtableswithtypes": {
                "name": "ListTablesWithTypes",
                "description": "Return a list of tables for the current database suffixed with (<type>).",
                "arguments": [
                    {
                        "name": "filter",
                        "type": "P"
                    }
                ]
            },
            "loadcurrentdbfdatabase": {
                "name": "LoadCurrentDBFDatabase",
                "description": "Clear any current information and load the schema from the open DBF database."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "tableindependencyordernumber": {
                "name": "TableInDependencyOrderNumber",
                "description": "Get the index of a TableInDependencyOrder from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "tablenumber": {
                "name": "TableNumber",
                "description": "Get the index of a Table from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "tablesreferencedby": {
                "name": "TablesReferencedBy",
                "description": "Generate a collection of tables referenced by this table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "tablesreferencing": {
                "name": "TablesReferencing",
                "description": "Generate a collection of tables that reference this table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "P"
                    }
                ]
            },
            "toexcel": {
                "name": "ToExcel",
                "description": "Create an Excel 2003 workbook with a sheet for each table in the schema.",
                "arguments": [
                    {
                        "name": "destinationfile",
                        "type": "C"
                    },
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "includeheadings",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "updaterowcounts": {
                "name": "UpdateRowCounts",
                "description": "Get row counts for the actual tables in the schema.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            },
            "updatestatistics": {
                "name": "UpdateStatistics",
                "description": "Gather statistical information about the actual tables in the schema.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            }
        },
        "__name__": "Schema"
    },
    "syntaxtemplate": {
        "__functions__": {
            "createincrementalloader": {
                "name": "CreateIncrementalLoader",
                "description": "Create a schema object that does incremental loading of tables.",
                "arguments": [
                    {
                        "name": "loader",
                        "type": "P"
                    },
                    {
                        "name": "tablelist",
                        "type": "C",
                        "optional": true
                    }
                ]
            },
            "listdrivers": {
                "name": "ListDrivers",
                "description": "Return a list of all named syntax templates."
            },
            "unload": {
                "name": "UnLoad",
                "description": "Unload a saved syntax (used to force a cache refresh).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "unloadall": {
                "name": "UnLoadAll",
                "description": "Unload all loaded saved syntax."
            }
        },
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "convert": {
                "name": "Convert",
                "description": "Converts a SQL statement using the loaded syntax handler.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    },
                    {
                        "name": "args",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "fromjson": {
                "name": "FromJson",
                "description": "Loads a syntax handler definition from JSON (into SyntaxTemplate object).",
                "arguments": [
                    {
                        "name": "json",
                        "type": "C"
                    }
                ]
            },
            "load": {
                "name": "Load",
                "description": "Load (if not already loaded) a saved syntax handler into the context.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "SyntaxTemplate"
    },
    "tablefilter": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "TableFilter"
    },
    "tableinfo": {
        "__functions__": {
            "parsetablename": {
                "name": "ParseTableName",
                "description": "Parse a dot separated table name and return the components.  Use [] to wrap names with dots in them.",
                "arguments": [
                    {
                        "name": "catalogname",
                        "type": "C"
                    },
                    {
                        "name": "schemaname",
                        "type": "C"
                    },
                    {
                        "name": "ownername",
                        "type": "C"
                    },
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "source",
                        "type": "C"
                    }
                ]
            }
        },
        "__methods__": {
            "addcolumn": {
                "name": "AddColumn",
                "description": "Add a Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "addindex": {
                "name": "AddIndex",
                "description": "Add a Index.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Reset the contents of the TableInfo as if it had just been declared."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "columnisinprimarykey": {
                "name": "ColumnIsInPrimaryKey",
                "description": "Returns true if the column matching the index requested is part of the table's primary key",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "columnnumber": {
                "name": "ColumnNumber",
                "description": "Get the index of a Column from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "comparecolumns": {
                "name": "CompareColumns",
                "description": "Compare the current table information with another and create lists of columns that would need to be added, deleted or modified to make this table information match the other table information.",
                "arguments": [
                    {
                        "name": "othertable",
                        "type": "P"
                    },
                    {
                        "name": "compareresults",
                        "type": "P"
                    }
                ]
            },
            "compareindexes": {
                "name": "CompareIndexes",
                "description": "Compare the current table information with another and create lists of indexes that would need to be added, deleted or modified to make this table information match the other table information.",
                "arguments": [
                    {
                        "name": "othertable",
                        "type": "P"
                    },
                    {
                        "name": "compareresults",
                        "type": "P"
                    }
                ]
            },
            "deletecolumn": {
                "name": "DeleteColumn",
                "description": "Delete a Column.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deleteindex": {
                "name": "DeleteIndex",
                "description": "Delete a Index.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "indexnumber": {
                "name": "IndexNumber",
                "description": "Get the index of a Index from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "insertcolumn": {
                "name": "InsertColumn",
                "description": "Insert a new Column.",
                "arguments": [
                    {
                        "name": "column",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertindex": {
                "name": "InsertIndex",
                "description": "Insert a new Index.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "SQL::IndexInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "listcolumns": {
                "name": "ListColumns",
                "description": "Create a list of the table columns (optionally including types).",
                "arguments": [
                    {
                        "name": "includetypes",
                        "type": "L",
                        "optional": true
                    }
                ]
            },
            "movecolumn": {
                "name": "MoveColumn",
                "description": "Move a block of Column items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "moveindex": {
                "name": "MoveIndex",
                "description": "Move a block of Index items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "parse": {
                "name": "Parse",
                "description": "Parse a SQL CREATE TABLE statement into a table info.",
                "arguments": [
                    {
                        "name": "sqlstatement",
                        "type": "C"
                    }
                ]
            },
            "updaterowcounts": {
                "name": "UpdateRowCounts",
                "description": "Get row counts for the actual table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            },
            "updatestatistics": {
                "name": "UpdateStatistics",
                "description": "Gather statistical information about the actual table.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    }
                ]
            }
        },
        "__name__": "TableInfo"
    },
    "tableinfocolumncompareresults": {
        "__methods__": {
            "addcolumnsadded": {
                "name": "AddColumnsAdded",
                "description": "Add a ColumnsAdded.",
                "arguments": [
                    {
                        "name": "columnsadded",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "addcolumnsdeleted": {
                "name": "AddColumnsDeleted",
                "description": "Add a ColumnsDeleted.",
                "arguments": [
                    {
                        "name": "columnsdeleted",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "addcolumnsmodifiednew": {
                "name": "AddColumnsModifiedNew",
                "description": "Add a ColumnsModifiedNew.",
                "arguments": [
                    {
                        "name": "columnsmodifiednew",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "addcolumnsmodifiedoriginal": {
                "name": "AddColumnsModifiedOriginal",
                "description": "Add a ColumnsModifiedOriginal.",
                "arguments": [
                    {
                        "name": "columnsmodifiedoriginal",
                        "type": "SQL::DataTypeInfo"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Reset the contents as if it had just been declared."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "columnsaddednumber": {
                "name": "ColumnsAddedNumber",
                "description": "Get the index of a ColumnsAdded from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "columnsdeletednumber": {
                "name": "ColumnsDeletedNumber",
                "description": "Get the index of a ColumnsDeleted from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "columnsmodifiednewnumber": {
                "name": "ColumnsModifiedNewNumber",
                "description": "Get the index of a ColumnsModifiedNew from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "columnsmodifiedoriginalnumber": {
                "name": "ColumnsModifiedOriginalNumber",
                "description": "Get the index of a ColumnsModifiedOriginal from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "deletecolumnsadded": {
                "name": "DeleteColumnsAdded",
                "description": "Delete a ColumnsAdded.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deletecolumnsdeleted": {
                "name": "DeleteColumnsDeleted",
                "description": "Delete a ColumnsDeleted.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deletecolumnsmodifiednew": {
                "name": "DeleteColumnsModifiedNew",
                "description": "Delete a ColumnsModifiedNew.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deletecolumnsmodifiedoriginal": {
                "name": "DeleteColumnsModifiedOriginal",
                "description": "Delete a ColumnsModifiedOriginal.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertcolumnsadded": {
                "name": "InsertColumnsAdded",
                "description": "Insert a new ColumnsAdded.",
                "arguments": [
                    {
                        "name": "columnsadded",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertcolumnsdeleted": {
                "name": "InsertColumnsDeleted",
                "description": "Insert a new ColumnsDeleted.",
                "arguments": [
                    {
                        "name": "columnsdeleted",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertcolumnsmodifiednew": {
                "name": "InsertColumnsModifiedNew",
                "description": "Insert a new ColumnsModifiedNew.",
                "arguments": [
                    {
                        "name": "columnsmodifiednew",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertcolumnsmodifiedoriginal": {
                "name": "InsertColumnsModifiedOriginal",
                "description": "Insert a new ColumnsModifiedOriginal.",
                "arguments": [
                    {
                        "name": "columnsmodifiedoriginal",
                        "type": "SQL::DataTypeInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "movecolumnsadded": {
                "name": "MoveColumnsAdded",
                "description": "Move a block of ColumnsAdded items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "movecolumnsdeleted": {
                "name": "MoveColumnsDeleted",
                "description": "Move a block of ColumnsDeleted items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "movecolumnsmodifiednew": {
                "name": "MoveColumnsModifiedNew",
                "description": "Move a block of ColumnsModifiedNew items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "movecolumnsmodifiedoriginal": {
                "name": "MoveColumnsModifiedOriginal",
                "description": "Move a block of ColumnsModifiedOriginal items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "TableInfoColumnCompareResults"
    },
    "tableinfoindexcompareresults": {
        "__methods__": {
            "addindexesadded": {
                "name": "AddIndexesAdded",
                "description": "Add a IndexesAdded.",
                "arguments": [
                    {
                        "name": "indexesadded",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "addindexesdeleted": {
                "name": "AddIndexesDeleted",
                "description": "Add a IndexesDeleted.",
                "arguments": [
                    {
                        "name": "indexesdeleted",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "addindexesmodifiednew": {
                "name": "AddIndexesModifiedNew",
                "description": "Add a IndexesModifiedNew.",
                "arguments": [
                    {
                        "name": "indexesmodifiednew",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "addindexesmodifiedoriginal": {
                "name": "AddIndexesModifiedOriginal",
                "description": "Add a IndexesModifiedOriginal.",
                "arguments": [
                    {
                        "name": "indexesmodifiedoriginal",
                        "type": "SQL::IndexInfo"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Reset the contents as if it had just been declared."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deleteindexesadded": {
                "name": "DeleteIndexesAdded",
                "description": "Delete a IndexesAdded.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deleteindexesdeleted": {
                "name": "DeleteIndexesDeleted",
                "description": "Delete a IndexesDeleted.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deleteindexesmodifiednew": {
                "name": "DeleteIndexesModifiedNew",
                "description": "Delete a IndexesModifiedNew.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "deleteindexesmodifiedoriginal": {
                "name": "DeleteIndexesModifiedOriginal",
                "description": "Delete a IndexesModifiedOriginal.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "indexesaddednumber": {
                "name": "IndexesAddedNumber",
                "description": "Get the index of a IndexesAdded from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "indexesdeletednumber": {
                "name": "IndexesDeletedNumber",
                "description": "Get the index of a IndexesDeleted from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "indexesmodifiednewnumber": {
                "name": "IndexesModifiedNewNumber",
                "description": "Get the index of a IndexesModifiedNew from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "indexesmodifiedoriginalnumber": {
                "name": "IndexesModifiedOriginalNumber",
                "description": "Get the index of a IndexesModifiedOriginal from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "insertindexesadded": {
                "name": "InsertIndexesAdded",
                "description": "Insert a new IndexesAdded.",
                "arguments": [
                    {
                        "name": "indexesadded",
                        "type": "SQL::IndexInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertindexesdeleted": {
                "name": "InsertIndexesDeleted",
                "description": "Insert a new IndexesDeleted.",
                "arguments": [
                    {
                        "name": "indexesdeleted",
                        "type": "SQL::IndexInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertindexesmodifiednew": {
                "name": "InsertIndexesModifiedNew",
                "description": "Insert a new IndexesModifiedNew.",
                "arguments": [
                    {
                        "name": "indexesmodifiednew",
                        "type": "SQL::IndexInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "insertindexesmodifiedoriginal": {
                "name": "InsertIndexesModifiedOriginal",
                "description": "Insert a new IndexesModifiedOriginal.",
                "arguments": [
                    {
                        "name": "indexesmodifiedoriginal",
                        "type": "SQL::IndexInfo"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "moveindexesadded": {
                "name": "MoveIndexesAdded",
                "description": "Move a block of IndexesAdded items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "moveindexesdeleted": {
                "name": "MoveIndexesDeleted",
                "description": "Move a block of IndexesDeleted items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "moveindexesmodifiednew": {
                "name": "MoveIndexesModifiedNew",
                "description": "Move a block of IndexesModifiedNew items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "moveindexesmodifiedoriginal": {
                "name": "MoveIndexesModifiedOriginal",
                "description": "Move a block of IndexesModifiedOriginal items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "TableInfoIndexCompareResults"
    },
    "tableinfolist": {
        "__methods__": {
            "addtable": {
                "name": "AddTable",
                "description": "Add a Table.",
                "arguments": [
                    {
                        "name": "table",
                        "type": "SQL::TableInfo"
                    }
                ]
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deletetable": {
                "name": "DeleteTable",
                "description": "Delete a Table.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "tablenumber": {
                "name": "TableNumber",
                "description": "Get the index of a Table from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            }
        },
        "__name__": "TableInfoList"
    },
    "tablename": {
        "__methods__": {
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            }
        },
        "__name__": "TableName"
    },
    "tablesnapshot": {
        "__methods__": {
            "addrow": {
                "name": "AddRow",
                "description": "Add a Row.",
                "arguments": [
                    {
                        "name": "row",
                        "type": "SQL::RowSnapshot"
                    }
                ]
            },
            "clear": {
                "name": "Clear",
                "description": "Clear the snapshot."
            },
            "clone": {
                "name": "Clone",
                "description": "Create a copy of an object instance."
            },
            "deleterow": {
                "name": "DeleteRow",
                "description": "Delete a Row.",
                "arguments": [
                    {
                        "name": "index",
                        "type": "N"
                    }
                ]
            },
            "insertrow": {
                "name": "InsertRow",
                "description": "Insert a new Row.",
                "arguments": [
                    {
                        "name": "row",
                        "type": "SQL::RowSnapshot"
                    },
                    {
                        "name": "insertbefore",
                        "type": "N",
                        "optional": true
                    }
                ]
            },
            "load": {
                "name": "Load",
                "description": "Load table data into the snapshot.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "tableinfo",
                        "type": "P"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "loaddbf": {
                "name": "LoadDBF",
                "description": "Load DBF table data into the snapshot.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C"
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "moverow": {
                "name": "MoveRow",
                "description": "Move a block of Row items.",
                "arguments": [
                    {
                        "name": "moveto",
                        "type": "N"
                    },
                    {
                        "name": "movefrom",
                        "type": "N"
                    }
                ]
            },
            "newinstance": {
                "name": "NewInstance",
                "description": "Create a new object instance of the same type."
            },
            "rownumber": {
                "name": "RowNumber",
                "description": "Get the index of a Row from the name.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "C"
                    }
                ]
            },
            "store": {
                "name": "Store",
                "description": "Store table data from the snapshot into the database.",
                "arguments": [
                    {
                        "name": "connection",
                        "type": "P"
                    },
                    {
                        "name": "createtable",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "storedbf": {
                "name": "StoreDBF",
                "description": "Store table data from the snapshot into a DBF table and optionally add to the current database.",
                "arguments": [
                    {
                        "name": "tablename",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "eventscript",
                        "type": "C",
                        "optional": true
                    },
                    {
                        "name": "addtodatabase",
                        "type": "L",
                        "optional": true
                    },
                    {
                        "name": "usercontext",
                        "type": "P",
                        "optional": true
                    }
                ]
            },
            "toexcel": {
                "name": "ToExcel",
                "description": "Create an Excel 2003 workbook with a sheet for the data in the snapshot.",
                "arguments": [
                    {
                        "name": "destinationfile",
                        "type": "C"
                    },
                    {
                        "name": "includeheadings",
                        "type": "L",
                        "optional": true
                    }
                ]
            }
        },
        "__name__": "TableSnapshot"
    },
    "tabletype": {
        "__enumeration__": [
            "Table",
            "View",
            "Alias",
            "SystemTable",
            "LinkedTable",
            "Synonym",
            "ObjectDefinition"
        ],
        "__name__": "TableType"
    },
    "updatewherecriteria": {
        "__enumeration__": [
            "PrimaryKeyAndUpdateableColumns",
            "PrimaryKeyColumns",
            "AllColumns",
            "Custom",
            "PrimaryKeyAndModifiedColumns"
        ],
        "__name__": "UpdateWhereCriteria"
    },
    "__name__": "SQL"
}